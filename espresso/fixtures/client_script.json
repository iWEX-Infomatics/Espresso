[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.947263",
  "module": "espresso",
  "name": "Conditional Dropdown Gemstones",
  "script": "frappe.ui.form.on('Item', {\r\n    custom_material_type: function(frm) {\r\n        // Set query for custom_gemstone field based on material type\r\n        frm.set_query('custom_gemstone', function() {\r\n            return {\r\n                filters: [\r\n                    ['Gemstones', 'stonepearl', '=', frm.doc.item_group]\r\n                ]\r\n            };\r\n        });\r\n        \r\n         frm.set_query('custom_sub_type', function() {\r\n            return {\r\n                filters: [\r\n                    ['Material Sub Types', 'type', '=', frm.doc.item_group]\r\n                ]\r\n            };\r\n        });\r\n    },\r\n    \r\n    refresh: function(frm){\r\n        // Set query for custom_gemstone field based on material type\r\n        frm.set_query('custom_gemstone', function() {\r\n            return {\r\n                filters: [\r\n                    ['Gemstones', 'stonepearl', '=', frm.doc.item_group]\r\n                ]\r\n            };\r\n        });\r\n        \r\n        frm.set_query('custom_sub_type', function() {\r\n            return {\r\n                filters: [\r\n                    ['Material Sub Types', 'type', '=', frm.doc.item_group]\r\n                ]\r\n            };\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DocType",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.982593",
  "module": "espresso",
  "name": "Child Table fields Down/Upload - Doctype",
  "script": "frappe.ui.form.on('DocType', {\n    setup: function(frm){\n        frm.get_docfield(\"fields\").allow_bulk_edit = 1;\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.256972",
  "module": "espresso",
  "name": "BypassRateOpportunity",
  "script": "frappe.ui.form.on('Opportunity', {\n  validate: function(frm) {\n    frm.doc.items.forEach(function(row) {\n      if (!row.rate) {\n        row.rate = 1;\n        row.amount = row.qty;\n      }\n    });\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.152394",
  "module": "espresso",
  "name": "Purchase Order Image",
  "script": "// ========== COPY DESCRIPTION FROM LINKED SALES ORDER ==========\r\nfrappe.ui.form.on('Purchase Order', {\r\n    onload: function(frm) {\r\n        if (frm.doc.from_sales_order && frm.doc.items && frm.doc.items.length > 0) {\r\n            frappe.db.get_doc('Sales Order', frm.doc.from_sales_order)\r\n                .then(sales_order => {\r\n                    sales_order.items.forEach((so_item, i) => {\r\n                        let po_item = frm.doc.items[i];\r\n                        if (po_item) {\r\n                            po_item.description = so_item.description;\r\n                        }\r\n                    });\r\n                    frm.refresh_field('items');\r\n                });\r\n        }\r\n    }\r\n});\r\n\r\n// ========== SET LATEST SALES ORDER ON BOM ITEM SELECTION ==========\r\n// frappe.ui.form.on('Purchase Order BOM Items', {\r\n//     item_code: function(frm, cdt, cdn) {\r\n//         let row = locals[cdt][cdn];\r\n\r\n//         if (frm.doc.doctype !== \"Purchase Order\" || !row.item_code) return;\r\n\r\n//         frappe.call({\r\n//             method: \"get_latest_so_for_item\", \r\n//             args: {\r\n//                 item_code: row.item_code\r\n//             },\r\n//             callback: function(r) {\r\n//                 if (r?.data?.parent) {\r\n//                     frappe.model.set_value(cdt, cdn, 'custom_sales_order_id', r.data.parent);\r\n//                 } else {\r\n//                     frappe.model.set_value(cdt, cdn, 'custom_sales_order_id', '');\r\n//                 }\r\n//             }\r\n//         });\r\n//     }\r\n// });\r\n\r\n// ========== SET READ-ONLY FIELDS IN custom_bom_items ==========\r\nfunction set_custom_bom_items_fields_read_only(frm) {\r\n    if (frm.fields_dict.custom_bom_items?.grid) {\r\n        const readOnlyFields = [\r\n            'qty',\r\n            'item_code',\r\n            'item_group',\r\n            'custom_country_of_origin',\r\n            'supplier',\r\n            'uom',\r\n            'custom_gemstone',\r\n            'stone_treatment',\r\n            'grade',\r\n            'cut',\r\n            'setting_type',\r\n            'sku_metal_weight',\r\n            'merch_color__attribute',\r\n            'sku_carat_weight',\r\n            'avg_carat_weight',\r\n            'stone_pieces'\r\n        ];\r\n\r\n        readOnlyFields.forEach(field => {\r\n            frm.fields_dict.custom_bom_items.grid.update_docfield_property(field, 'read_only', 1);\r\n        });\r\n    }\r\n}\r\n\r\n// ========== SET READ-ONLY ON CHILD ROW OPEN ==========\r\nfrappe.ui.form.on('custom_bom_items', {\r\n    form_rendered: function(frm, cdt, cdn) {\r\n        const readOnlyFields = [\r\n            'qty',\r\n            'item_code',\r\n            'item_group',\r\n            'custom_country_of_origin',\r\n            'supplier',\r\n            'uom',\r\n            'custom_gemstone',\r\n            'stone_treatment',\r\n            'grade',\r\n            'cut',\r\n            'setting_type',\r\n            'sku_metal_weight',\r\n            'merch_color__attribute',\r\n            'sku_carat_weight',\r\n            'avg_carat_weight',\r\n            'stone_pieces'\r\n        ];\r\n\r\n        const grid_row = frm.fields_dict.custom_bom_items.grid.grid_rows_by_docname[cdn];\r\n        if (grid_row?.grid_form) {\r\n            readOnlyFields.forEach(field => {\r\n                const df = grid_row.grid_form.fields_dict[field]?.df;\r\n                if (df) {\r\n                    df.read_only = 1;\r\n                    grid_row.grid_form.fields_dict[field].refresh();\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Purchase Order', {\r\n    refresh(frm) {\r\n        // frm.add_custom_button(__('Fetch BOM from Sales Order'), () => {\r\n        //     frm.trigger('custom_fetch_bom_from_sales_order');\r\n        // });\r\n    },\r\n\r\n    async custom_fetch_bom_from_sales_order(frm) {\r\n        const first_item = frm.doc.items && frm.doc.items.length > 0 ? frm.doc.items[0] : null;\r\n\r\n        if (!first_item || !first_item.sales_order) {\r\n            frappe.msgprint('First row of Items table must have a Sales Order linked.');\r\n            return;\r\n        }\r\n\r\n        const sales_order_name = first_item.sales_order;\r\n\r\n        try {\r\n            const so = await frappe.db.get_doc('Sales Order', sales_order_name);\r\n\r\n            if (so.custom_item_bom) {\r\n                frm.set_value('custom_item_bom', so.custom_item_bom);\r\n            }\r\n\r\n            frm.clear_table('custom_bom_items');\r\n\r\n            const field_map = {\r\n                item_code: 'item_code',\r\n                item_group: 'custom_item_group',\r\n                item_description: 'description',\r\n                qty: 'qty',\r\n                uom: 'uom',\r\n                rate: 'rate',\r\n                amount: 'amount',\r\n                custom_gemstone: 'custom_gemstone',\r\n                our_responsibility: 'custom_our_responsibility',\r\n                item_group: 'custom_item_group',\r\n                sku_carat_weight: 'custom_sku_weight',\r\n                avg_carat_weight: 'custom_avg_carat_weight',\r\n                setting_type: 'custom_setting_type',\r\n                merch_color__attribute: 'custom_merch_color__attribute',\r\n                stone_treatment: 'custom_stone_treatment',\r\n                stone_pieces: 'custom_stone_pieces',\r\n                min_weight: 'custom_min_weight',\r\n                custom_country_of_origin: 'custom_country_of_origin',\r\n                metal_weight: 'custom_metal_weight',\r\n                cut: 'custom_cut',\r\n                length: 'custom_length',\r\n                grade: 'custom_grade',\r\n                weight_per_piece: 'custom_weight_per_piece',\r\n                merch_color: 'custom_merch_color',\r\n                avg_metal_weight: 'custom_metal_weight',\r\n                sku_metal_weight: 'custom_sku_metal_weight'\r\n            };\r\n\r\n            for (let row of so.custom_bom_items || []) {\r\n                const new_row = frm.add_child('custom_bom_items');\r\n                for (let target_field in field_map) {\r\n                    const source_field = field_map[target_field];\r\n                    new_row[target_field] = row[source_field];\r\n                }\r\n            }\r\n\r\n            frm.refresh_field('custom_bom_items');\r\n            // frappe.msgprint(`Copied BOM items from Sales Order: ${sales_order_name}`);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            frappe.msgprint('Error fetching Sales Order or processing data.');\r\n        }\r\n    }\r\n});\r\n\r\n// ================Metal Cost============================================\r\nfrappe.ui.form.on('Purchase Order', {\r\n    refresh: async function(frm) {\r\n        frm.add_custom_button(__('Metal Rate'), async function() {\r\n            let table_data = [];\r\n            frappe.call({\r\n                method: \"get_gold_rate\",\r\n                args: {\r\n                    \"docname\": frm.doc.name\r\n                },\r\n                callback: function(r) {\r\n                    if (r.data && r.data.length > 0) {\r\n                        const dialog = new frappe.ui.Dialog({\r\n                            title: 'Metal Rate',\r\n                            fields: [\r\n                                {\r\n                                    fieldname: 'metal_rate_table',\r\n                                    fieldtype: 'Table',\r\n                                    label: 'Metal Rates',\r\n                                    cannot_add_rows: 1,\r\n                                    data: r.data,\r\n                                    fields: [\r\n                                        {\r\n                                            fieldtype: 'Time',\r\n                                            fieldname: 'time',\r\n                                            label: 'Time',\r\n                                            reqd: 1,\r\n                                            in_list_view: true\r\n                                        },\r\n                                        {\r\n                                            fieldtype: 'Data',\r\n                                            fieldname: 'metal',\r\n                                            label: 'Metal',\r\n                                            reqd: 1,\r\n                                            in_list_view: true\r\n                                        },\r\n                                        {\r\n                                            fieldtype: 'Currency',\r\n                                            fieldname: 'rate',\r\n                                            label: 'Metal Rate',\r\n                                            reqd: 1,\r\n                                            in_list_view: true\r\n                                        },\r\n                                        /*{\r\n                                            fieldtype: 'Check',\r\n                                            fieldname: 'selected',\r\n                                            label: 'Select',\r\n                                            in_list_view: true\r\n                                        },*/\r\n                                        {\r\n                                            fieldtype: 'Link',\r\n                                            fieldname: 'item',\r\n                                            label: 'Item',\r\n                                            options: \"Item\",\r\n                                            hidden: 1\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            primary_action_label: 'Insert',\r\n                            primary_action(values) {\r\n                                const table_data = values.metal_rate_table || [];\r\n\r\n                                if (!table_data.length) {\r\n                                    frappe.msgprint('Please enter at least one metal rate.');\r\n                                    return;\r\n                                }\r\n                                console.log(table_data)\r\n                                table_data.forEach(r => {\r\n                                    if (r.__checked) {\r\n                                        let matched_item = frm.doc.items.find(item => item.item_code === r.item);\r\n                                        if (matched_item) {\r\n                                            frappe.model.set_value(matched_item.doctype, matched_item.name, \"rate\", r.rate);\r\n                                        }\r\n                                    }\r\n                                });\r\n\r\n                                frm.refresh_field(\"items\");\r\n                                dialog.hide(); // Close after insert\r\n                            }\r\n                        });\r\n\r\n                        // Add a \"Close\" button\r\n                        dialog.set_secondary_action_label('Close');\r\n                        dialog.set_secondary_action(() => {\r\n                            dialog.hide();\r\n                        });\r\n\r\n                        dialog.show();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.444246",
  "module": "espresso",
  "name": "Sales Order Automation",
  "script": "// --- Main: Sales Order triggers ---\r\nfrappe.ui.form.on('Sales Order', {\r\n    refresh: function (frm) {\r\n        if (frm.doc.docstatus === 0 && frm.doc.name) {\r\n            frm.add_custom_button(__('Create Purchase Order'), function () {\r\n                show_items_popup(frm);\r\n            });\r\n        }\r\n    },\r\n\r\n    custom_stone_vendor(frm) {\r\n        update_bom_suppliers(frm);\r\n    },\r\n\r\n    custom_other_vendor(frm) {\r\n        update_bom_suppliers(frm);\r\n    },\r\n\r\n    validate(frm) {\r\n        update_bom_suppliers(frm);\r\n    }\r\n});\r\n\r\nfunction update_bom_suppliers(frm) {\r\n    (frm.doc.custom_bom_items || []).forEach(row => {\r\n        if (!row.custom_is_supplier_overridden) {\r\n            if (row.custom_our_responsibility == 1) {\r\n                row.custom_supplier = row.custom_item_group === 'Stone'\r\n                    ? frm.doc.custom_stone_vendor || ''\r\n                    : frm.doc.custom_stone_vendor || '';\r\n            } else {\r\n                row.custom_supplier = frm.doc.custom_factory_vendor || '';\r\n            }\r\n        }\r\n    });\r\n    frm.refresh_field('custom_bom_items');\r\n}\r\n\r\n\r\n// --- Step 1: Items Dialog ---\r\nfunction show_items_popup(frm, preselected_items = [], preselected_supplier = '') {\r\n    const item_data = (frm.doc.items || [])\r\n        .filter(row => !row.custom_purchase_order_no)\r\n        .map(row => ({\r\n            item_code: row.item_code,\r\n            item_name: row.item_name,\r\n            qty: row.qty,\r\n            warehouse: row.warehouse || \"All Warehouses\",\r\n            item_group: row.item_group\r\n        }));\r\n\r\n    const has_items = item_data.length > 0;\r\n\r\n    let item_dialog = new frappe.ui.Dialog({\r\n        title: 'Select Items for PO',\r\n        fields: [\r\n            {\r\n                fieldname: 'supplier',\r\n                label: 'Supplier',\r\n                fieldtype: 'Link',\r\n                options: 'Supplier',\r\n                reqd: has_items,\r\n                default: preselected_supplier || frm.doc.custom_factory_vendor || ''\r\n            },\r\n            {\r\n                fieldname: 'item_selection',\r\n                label: 'Items',\r\n                fieldtype: 'Table',\r\n                cannot_add_rows: true,\r\n                in_place_edit: true,\r\n                data: item_data,\r\n                get_data: () => item_data,\r\n                fields: [\r\n                    { fieldname: 'item_code', fieldtype: 'Data', label: 'Item Code', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'item_name', fieldtype: 'Data', label: 'Item Name', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'qty', fieldtype: 'Float', label: 'Qty', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'item_group', fieldtype: 'Link', options: 'Item Group', label: 'Item Group', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'warehouse', fieldtype: 'Link', options: 'Warehouse', label: 'Warehouse', in_list_view: 1 }\r\n                ]\r\n            }\r\n        ],\r\n        primary_action_label: 'Proceed',\r\n        primary_action() {\r\n            const supplier = item_dialog.get_value('supplier');\r\n            const selected_items = item_dialog.fields_dict.item_selection.grid.get_selected_children();\r\n\r\n            if (has_items && !supplier) {\r\n                frappe.throw(__('Please select a Supplier before proceeding.'));\r\n                return;\r\n            }\r\n\r\n            selected_items.forEach(row => {\r\n                row.supplier = supplier;\r\n            });\r\n\r\n            item_dialog.hide();\r\n            show_bom_popup(frm, selected_items, supplier);\r\n        },\r\n        secondary_action_label: 'Cancel',\r\n        secondary_action() {\r\n            item_dialog.hide();\r\n        }\r\n    });\r\n\r\n    item_dialog.show();\r\n\r\n    frappe.after_ajax(() => {\r\n        const grid = item_dialog.fields_dict.item_selection.grid;\r\n        const supplier_field = item_dialog.get_field('supplier');\r\n\r\n        function auto_check_items() {\r\n            if (supplier_field.get_value()) {\r\n                grid.grid_rows.forEach(row => {\r\n                    row.doc.__checked = 1;\r\n                    row.refresh();\r\n                });\r\n            }\r\n        }\r\n\r\n        auto_check_items();\r\n\r\n        supplier_field.df.onchange = auto_check_items;\r\n\r\n        // Prevent row deletion\r\n        $(grid.wrapper).find('.grid-remove-rows').hide();\r\n        grid.wrapper.addEventListener('click', () => {\r\n            $(grid.wrapper).find('.grid-remove-rows').hide();\r\n        });\r\n    });\r\n}\r\n\r\n// --- Step 2: BOM Items Dialog ---\r\nfunction show_bom_popup(frm, selected_items, supplier) {\r\n    const bom_data = (frm.doc.custom_bom_items || [])\r\n        .filter(row => !row.custom_purchase_order_id)\r\n        .map(row => ({\r\n            item_code: row.item_code,\r\n            item_name: row.item_name,\r\n            qty: row.qty,\r\n            supplier: row.custom_supplier || \"\",\r\n            description: row.description || \"\",\r\n            _row_idx: row.idx,\r\n            __checked:1\r\n        }));\r\n\r\n    let bom_dialog = new frappe.ui.Dialog({\r\n        title: 'Select BOM Items for PO',\r\n        fields: [\r\n            {\r\n                fieldname: 'bom_selection',\r\n                label: 'BOM Items',\r\n                fieldtype: 'Table',\r\n                cannot_add_rows: true,\r\n                in_place_edit: true,\r\n                data: bom_data,\r\n                get_data: () => bom_data,\r\n                fields: [\r\n                    { fieldname: 'item_code', fieldtype: 'Data', label: 'Item Code', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'item_name', fieldtype: 'Data', label: 'Item Name', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'qty', fieldtype: 'Float', label: 'Qty', read_only: 1, in_list_view: 1 },\r\n                    { fieldname: 'supplier', fieldtype: 'Link', options: 'Supplier', label: 'Supplier', in_list_view: 1 }\r\n                ]\r\n            }\r\n        ],\r\n        primary_action_label: 'Create',\r\n        primary_action(values) {\r\n            const selected_bom = bom_dialog.fields_dict.bom_selection.grid.get_selected_children();\r\n            (values.bom_selection || []).forEach(row => {\r\n            let existing_row = frm.doc.custom_bom_items.find(r => r.item_code === row.item_code);\r\n                if (existing_row) {\r\n                     frappe.model.set_value(existing_row.doctype, existing_row.name, 'custom_supplier', row.supplier);\r\n                }\r\n            });\r\n            bom_dialog.hide();\r\n            create_purchase_orders(frm, selected_items, selected_bom);\r\n        },\r\n        secondary_action_label: 'Back',\r\n        secondary_action() {\r\n            bom_dialog.hide();\r\n            show_items_popup(frm, selected_items, supplier);\r\n        },\r\n        tertiary_action_label: 'Cancel',\r\n        tertiary_action() {\r\n            bom_dialog.hide();\r\n        }\r\n    });\r\n\r\n    bom_dialog.show();\r\n\r\n    frappe.after_ajax(() => {\r\n        const grid = bom_dialog.fields_dict.bom_selection.grid;\r\n\r\n        setTimeout(() => {\r\n            const debounce = (func, wait) => {\r\n                let timeout;\r\n                return (...args) => {\r\n                    clearTimeout(timeout);\r\n                    timeout = setTimeout(() => func.apply(this, args), wait);\r\n                };\r\n            };\r\n\r\n            const save_form = debounce(() => {\r\n                frm.refresh_field(\"custom_bom_items\");\r\n                frm.save();\r\n            }, 500);\r\n\r\n            grid.grid_rows.forEach(row => {\r\n                row.doc.__checked = 1;\r\n                row.refresh();\r\n\r\n                row.fields_dict.supplier.$wrapper.on('input', () => {\r\n                    const new_supplier = row.fields_dict.supplier.get_value();\r\n                    const bom_row = frm.doc.custom_bom_items.find(r => r.idx === row.doc._row_idx);\r\n\r\n                    if (bom_row) {\r\n                        bom_row.custom_supplier = new_supplier;\r\n                        bom_row.custom_is_supplier_overridden = new_supplier ? 1 : 0;\r\n                        save_form();\r\n                    }\r\n                });\r\n            });\r\n\r\n            $(grid.wrapper).find('.grid-remove-rows').hide();\r\n            grid.wrapper.addEventListener('click', () => {\r\n                $(grid.wrapper).find('.grid-remove-rows').hide();\r\n            });\r\n        }, 100);\r\n    });\r\n}\r\n\r\n\r\nfunction create_purchase_orders(frm, items, bom_items) {\r\n    const all_items = [...items, ...bom_items];\r\n    const items_by_supplier = {};\r\n\r\n    const get_company_abbr = (company_name) => {\r\n        if (!company_name) return \"UNDEF\";\r\n        const known_abbrs = {\r\n            \"Bright Blue Jewels\": \"BBJ\",\r\n            \"Some Other Company\": \"SOC\"\r\n        };\r\n        return known_abbrs[company_name] || company_name.split(\" \").map(w => w[0]).join(\"\").toUpperCase();\r\n    };\r\n\r\n    const company_abbr = get_company_abbr(frm.doc.company);\r\n    const default_warehouse = \"Stores - \" + company_abbr;\r\n\r\n    all_items.forEach(row => {\r\n        if (row.item_code && row.supplier) {\r\n            if (!items_by_supplier[row.supplier]) {\r\n                items_by_supplier[row.supplier] = [];\r\n            }\r\n\r\n            const warehouse = row.warehouse || frm.doc.set_warehouse || default_warehouse;\r\n            const so_item = frm.doc.items.find(i => i.item_code === row.item_code && !i.custom_purchase_order_no && i.qty === row.qty);\r\n            const bom_item = (frm.doc.custom_bom_items || []).find(i => i.item_code === row.item_code && i.qty === row.qty && i.custom_supplier === row.supplier);\r\n\r\n            items_by_supplier[row.supplier].push({\r\n                item_code: row.item_code,\r\n                qty: row.qty,\r\n                schedule_date: frappe.datetime.now_date(),\r\n                uom: \"Nos\",\r\n                rate: 1,\r\n                warehouse: warehouse,\r\n                sales_order:  frm.doc.name,\r\n                description: so_item?.description || bom_item?.description || \"\"\r\n            });\r\n        }\r\n    });\r\n\r\n    const suppliers = Object.keys(items_by_supplier);\r\n    const created_po_names = [];\r\n\r\n    const create_next_po = function(index) {\r\n        if (index >= suppliers.length) {\r\n            frm.refresh_field(\"custom_bom_items\");\r\n            frm.refresh_field(\"items\");\r\n\r\n            if (created_po_names.length) {\r\n                frappe.confirm(\r\n                    'View Purchase Orders created?',\r\n                    function() {\r\n                        frappe.set_route('List', 'Purchase Order', {\r\n                            name: [\"in\", created_po_names]\r\n                        });\r\n                    },\r\n                    function() {\r\n                        const links = created_po_names.map(name =>\r\n                            `<a href=\"/app/purchase-order/${name}\" target=\"_blank\">${name}</a>`\r\n                        ).join('<br>');\r\n\r\n                        frappe.msgprint({\r\n                            title: __('Purchase Orders Created'),\r\n                            message: links,\r\n                            indicator: 'green'\r\n                        });\r\n                    }\r\n                );\r\n            } else {\r\n                frappe.msgprint(__('No Purchase Orders were created.'));\r\n            }\r\n            return;\r\n        }\r\n\r\n        const supplier = suppliers[index];\r\n        const doc = {\r\n            doctype: 'Purchase Order',\r\n            supplier: supplier,\r\n            schedule_date: frappe.datetime.now_date(),\r\n            items: items_by_supplier[supplier],\r\n            company: frm.doc.company,\r\n            sales_order: frm.doc.title\r\n,\r\n            set_warehouse: frm.doc.set_warehouse || default_warehouse\r\n        };\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.insert',\r\n            args: { doc },\r\n            callback: function(r) {\r\n                if (r.message && r.message.name) {\r\n                    const po_name = r.message.name;\r\n                    created_po_names.push(po_name);\r\n\r\n                    (frm.doc.custom_bom_items || []).forEach(row => {\r\n                        if (\r\n                            row.custom_supplier === supplier &&\r\n                            !row.custom_purchase_order_id\r\n                        ) {\r\n                            row.custom_purchase_order_id = po_name;\r\n                        }\r\n                    });\r\n\r\n                    (frm.doc.items || []).forEach(row => {\r\n                        if (\r\n                            row.supplier === supplier &&\r\n                            !row.custom_purchase_order_no\r\n                        ) {\r\n                            frappe.model.set_value(row.doctype, row.name, \"custom_purchase_order_no\", po_name);\r\n                        }\r\n                        frm.save();\r\n                    });\r\n\r\n                }\r\n\r\n                create_next_po(index + 1);\r\n            },\r\n            error: function(err) {\r\n                frappe.msgprint(__('Error creating PO for ') + supplier);\r\n                create_next_po(index + 1);\r\n            }\r\n        }); \r\n    };\r\n\r\n    create_next_po(0);\r\n}\r\n\r\n\r\n\r\nfrappe.ui.form.on('Sales Order', {\r\n    setup(frm) {\r\n        frm.fields_dict.custom_bom_items.grid.get_field(\"custom_gemstone\").onchange = function (doc, cdt, cdn) {\r\n            const row = locals[cdt][cdn];\r\n            if (row.custom_gemstone) {\r\n                frappe.call({\r\n                    method: \"get_country_of_origin\",\r\n                    args: {\r\n                        gemstone: row.custom_gemstone\r\n                    },\r\n                    callback: function (r) {\r\n                        if (r.data) {\r\n                            const allowed_countries = r.data.map(entry => entry[1]);\r\n                            const unique_countries = [...new Set(allowed_countries)];\r\n                            frm.fields_dict.custom_bom_items.grid.update_docfield_property(\r\n                                \"custom_country_of_origin\",\r\n                                \"options\",\r\n                                unique_countries\r\n                            );\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    },\r\n\r\n    onload(frm) {\r\n        frm.fields_dict.custom_bom_items.grid.get_field('custom_country_of_origin').reqd = false;\r\n    },\r\n\r\n    validate(frm) {\r\n        let has_error = false;\r\n        (frm.doc.custom_bom_items || []).forEach(row => {\r\n            if (row.custom_gemstone && !row.custom_country_of_origin) {\r\n                has_error = true;\r\n                frappe.msgprint(`Please enter Country of Origin for gemstone: ${row.custom_gemstone}`);\r\n            }\r\n        });\r\n        if (has_error) frappe.validated = false;\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on('BOM Item', {\r\n    custom_gemstone: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        frappe.meta.get_docfield(\"BOM Item\", \"custom_country_of_origin\", frm.doc.name).reqd = !!row.custom_gemstone;\r\n\r\n        if (row.custom_gemstone) {\r\n            frappe.call({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: row.custom_gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.data) {\r\n                        const allowed_countries = [...new Set(r.data.map(entry => entry[1]))];\r\n\r\n                        frm.fields_dict.custom_bom_items.grid.update_docfield_property(\r\n                            'custom_country_of_origin',\r\n                            'options',\r\n                            allowed_countries\r\n                        );\r\n\r\n                        frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n                        frm.fields_dict.custom_bom_items.grid.refresh();\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // Reset field if gemstone is cleared\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n            frm.fields_dict.custom_bom_items.grid.refresh();\r\n        }\r\n    },\r\n\r\n    form_render: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        if (row.custom_gemstone) {\r\n            frappe.call({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: row.custom_gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.data) {\r\n                        const allowed_countries = [...new Set(r.data.map(entry => entry[1]))];\r\n\r\n                        frm.fields_dict.custom_bom_items.grid.update_docfield_property(\r\n                            'custom_country_of_origin',\r\n                            'options',\r\n                            allowed_countries\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (row.custom_country) {\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_country);\r\n        }\r\n    },\r\n\r\n    custom_country: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        if (row.custom_country) {\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_country);\r\n        }\r\n    },\r\n    custom_supplier: function (frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        const has_value = row.custom_supplier && row.custom_supplier.trim() !== '';\r\n\r\n        frappe.model.set_value(cdt, cdn, 'custom_is_supplier_overridden', has_value ? 1 : 0);\r\n    },\r\n    \r\n    custom_gemstone: function (frm, cdt, cdn) {\r\n        update_bom_description(frm, cdt, cdn);\r\n    },\r\n    custom_country_of_origin: function (frm, cdt, cdn) {\r\n        update_bom_description(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction update_bom_description(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    let original_description = row.description || '';\r\n\r\n    const gemstone = row.custom_gemstone || '';\r\n    const country = row.custom_country_of_origin || '';\r\n\r\n    let updated_description = original_description;\r\n\r\n    if (updated_description.includes(\"Gemstone:\")) {\r\n        updated_description = updated_description.replace(/(Gemstone:\\s*)([^|]*)/, `$1${gemstone}`);\r\n    } else {\r\n        updated_description += ` | Gemstone: ${gemstone}`;\r\n    }\r\n\r\n    if (updated_description.includes(\"Country:\")) {\r\n        updated_description = updated_description.replace(/(Country:\\s*)([^|]*)/, `$1${country}`);\r\n    } else {\r\n        updated_description += ` | Country: ${country}`;\r\n    }\r\n\r\n    frappe.model.set_value(cdt, cdn, 'description', updated_description);\r\n}\r\n\r\n\r\nfrappe.ui.form.on('Sales Order', {\r\n    custom_factory_vendor: function(frm) {\r\n        update_supplier_in_items(frm);\r\n    },\r\n    onload: function(frm) {\r\n        update_supplier_in_items(frm);\r\n        set_warehouse_from_company(frm);\r\n    },\r\n    refresh: function(frm) {\r\n        update_supplier_in_items(frm);\r\n    },\r\n    company: function(frm) {\r\n        set_warehouse_from_company(frm);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Sales Order Item', {\r\n    items_add: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        row.supplier = frm.doc.custom_factory_vendor || '';\r\n        frm.refresh_field('items');\r\n    }\r\n});\r\n\r\nfunction update_supplier_in_items(frm) {\r\n    if (!frm.doc.custom_factory_vendor) return;\r\n\r\n    (frm.doc.items || []).forEach(item => {\r\n        item.supplier = frm.doc.custom_factory_vendor;\r\n    });\r\n\r\n    frm.refresh_field('items');\r\n}\r\n\r\nasync function set_warehouse_from_company(frm) {\r\n    if (!frm.doc.company) {\r\n        frm.set_value('set_warehouse', '');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const res = await frappe.db.get_value('Company', frm.doc.company, 'abbr');\r\n        const abbr = res?.message?.abbr;\r\n\r\n        if (abbr) {\r\n            frm.set_value('set_warehouse', `Stores - ${abbr}`);\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error fetching company abbreviation:\", err);\r\n        frm.set_value('set_warehouse', '');\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.286682",
  "module": "espresso",
  "name": "Warehouse Defult",
  "script": "frappe.ui.form.on('Sales Order', {\n    company: function(frm) {\n        if (frm.doc.company == \"BBJ\") {\n            frm.set_value('set_warehouse', 'Stores - BBJ');\n        } else if (frm.doc.company == \"D&K\") {\n            frm.set_value('set_warehouse', 'Stores - DK');\n        } else if (frm.doc.company == \"MCGI\") {\n            frm.set_value('set_warehouse', 'Stores - MPL');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.117524",
  "module": "espresso",
  "name": "Sales Order - Filter the Items",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_item_group_to_filter_items) {\r\n            frm.set_value('custom_item_group_to_filter_items', 'SKU');\r\n        }\r\n        frm.trigger('apply_item_group_filter');\r\n    },\r\n    refresh: function(frm) {\r\n        frm.trigger('apply_item_group_filter');\r\n        frm.trigger('set_custom_bom_query');\r\n    },\r\n    custom_item_group_to_filter_items: function(frm) {\r\n        frm.trigger('apply_item_group_filter');\r\n    },\r\n    items_on_form_rendered: function(frm) {\r\n        frm.trigger('set_custom_bom_query');\r\n    },\r\n    set_custom_bom_query: function(frm) {\r\n        frm.set_query('custom_item_bom', function(doc) {\r\n            if (doc.items && doc.items.length > 0 && doc.items[0].item_code) {\r\n                return {\r\n                    filters: [\r\n                        ['BOM', 'item', '=', doc.items[0].item_code]\r\n                    ]\r\n                };\r\n            }\r\n            return {};\r\n        });\r\n    },\r\n    apply_item_group_filter: function(frm) {\r\n        frm.fields_dict['items'].grid.get_field('item_code').get_query = function() {\r\n            return {\r\n                filters: [\r\n                    [\"Item\", \"item_group\", \"descendants of (inclusive)\", frm.doc.custom_item_group_to_filter_items || \"SKU\"]\r\n                ]\r\n            };\r\n        };\r\n\r\n        if (frm.doc.items && frm.doc.items.length > 0) {\r\n            frm.fields_dict['items'].grid.refresh();\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Sales Order Item', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        frm.trigger('set_custom_bom_query');\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "local_sales",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.214297",
  "module": "espresso",
  "name": "download-button-local-sales",
  "script": "frappe.listview_settings['local_sales'] = {\r\n  // Add both aws_url and the other field you want to use\r\n  add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\r\n  \r\n  // Format the aws_url field as a button\r\n  formatters: {\r\n    aws_url: function(value, df, doc) {\r\n      let finalUrl;\r\n      \r\n      // Check if import field exists and has a value\r\n      if (doc.file_attachment) {\r\n        finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n      } else {\r\n        // Get the value from record_id field\r\n        let rid = doc.record_id || \"\";\r\n        \r\n        // Use the original URL structure\r\n        finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_2/9/\"+rid;\r\n      }\r\n      if (finalUrl) {\r\n        return `<button class=\"btn btn-xs btn-info\" \r\n                        onclick=\"window.open('${finalUrl}', '_blank'); \r\n                        event.stopPropagation();\r\n                        return false;\">\r\n                        Download</button>`;\r\n      } else {\r\n        return `<span>No URL</span>`;\r\n      }\r\n    }\r\n  }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.807736",
  "module": "espresso",
  "name": "Warehouse Default - PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    before_save: function(frm) {\n        if (frm.doc.company == \"BBJ\") {\n            frm.set_value('set_warehouse', 'Stores - BBJ');\n        } else if (frm.doc.company == \"D&K\") {\n            frm.set_value('set_warehouse', 'Stores - DK');\n        } else if (frm.doc.company == \"MCGI\") {\n            frm.set_value('set_warehouse', 'Stores - MPL');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "import",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.026891",
  "module": "espresso",
  "name": "download-button-for-import",
  "script": "frappe.listview_settings['import']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_1/6/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "daily_report_bank_advices",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.421496",
  "module": "espresso",
  "name": "download-button-for-daily_report_bank_advices",
  "script": "frappe.listview_settings['daily_report_bank_advices'] = {\r\n    // Add all required fields\r\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\", \"aws_url_2\"],\r\n    \r\n    // Format both aws_url and aws_url_2 fields as buttons\r\n    formatters: {\r\n        aws_url: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_IMPORT/10/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        },\r\n        \r\n        aws_url_2: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url_2\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_IMPORT/14/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        }\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "local_purchase_jew",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.959470",
  "module": "espresso",
  "name": "download-button-for-local_purchase_jew",
  "script": "frappe.listview_settings['local_purchase_jew']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE1/12/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "local_purchase_stone",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.913101",
  "module": "espresso",
  "name": "download-button-for-local_purchase_stone",
  "script": "frappe.listview_settings['local_purchase_stone']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_3/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "export",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.887186",
  "module": "espresso",
  "name": "download-button-for-export",
  "script": "frappe.listview_settings['export']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_4/8/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "customs_documents",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.842811",
  "module": "espresso",
  "name": "download-button-for-customs_documents",
  "script": "frappe.listview_settings['customs_documents']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_CUSTOMS_DOCUMENTS/6/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "debit_credit_notes",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.816888",
  "module": "espresso",
  "name": "download-button-for-debit_credit_notes",
  "script": "frappe.listview_settings['debit_credit_notes']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_DEBIT_CREDIT_NOTES/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "items_to_be_booked_in_cogs",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.185282",
  "module": "espresso",
  "name": "download-button-for-items_to_be_booked_in_cogs",
  "script": "frappe.listview_settings['items_to_be_booked_in_cogs']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_2/9/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "bank_statements",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.317343",
  "module": "espresso",
  "name": "download-button-for-bank_statements",
  "script": "frappe.listview_settings['bank_statements']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_BANK_STATEMENTS/6/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "d_k_import",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.775106",
  "module": "espresso",
  "name": "download-button-for-d_k_import",
  "script": "frappe.listview_settings['d_k_import']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_GLOBAL/14/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "d_k_local",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.728084",
  "module": "espresso",
  "name": "download-button-for-d_k_local",
  "script": "frappe.listview_settings['d_k_local']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_LOCAL/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "d_k_spec",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.683033",
  "module": "espresso",
  "name": "download-button-for-d_k_spec",
  "script": "frappe.listview_settings['d_k_spec']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_SPEC/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "d_k_expenses",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.646295",
  "module": "espresso",
  "name": "download-button-for-d_k_expenses",
  "script": "frappe.listview_settings['d_k_expenses']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_EXPENSES/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "d_k_local_sales",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.607008",
  "module": "espresso",
  "name": "download-button-for-d_k_local_sales",
  "script": "frappe.listview_settings['d_k_local_sales']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_LOCAL_SALES/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "bbj_closing_checklist_entries",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.569522",
  "module": "espresso",
  "name": "download-button-for-bbj_closing_checklist_entries",
  "script": "frappe.listview_settings['bbj_closing_checklist_entries']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_ACCOUNT_PAYABLE_JTV/7/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "physical_reconciliation_2023",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.137455",
  "module": "espresso",
  "name": "download-button-for-physical_reconciliation_2023",
  "script": "frappe.listview_settings['physical_reconciliation_2023']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_2/9/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "account_payable_jtv",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.065319",
  "module": "espresso",
  "name": "download-button-for-account_payable_jtv",
  "script": "frappe.listview_settings['account_payable_jtv']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_ACCOUNT_PAYABLE_JTV/7\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "import_line_items",
  "enabled": 1,
  "modified": "2025-06-25 11:49:39.112275",
  "module": "espresso",
  "name": "download-button-for-import_line_items",
  "script": "frappe.listview_settings['import_line_items']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_2/9/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "bbj_inventory_adjustments",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.397364",
  "module": "espresso",
  "name": "download-button-for-bbj_inventory_adjustments",
  "script": "frappe.listview_settings['bbj_inventory_adjustments'] = {\r\n    // Add all required fields\r\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\", \"aws_url_2\"],\r\n    \r\n    // Format both aws_url and aws_url_2 fields as buttons\r\n    formatters: {\r\n        aws_url: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_BBJ_INVENTORY_ADJUSTMENTS/6/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        },\r\n        \r\n        aws_url_2: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url_2\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_BBJ_INVENTORY_ADJUSTMENTS/8/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        }\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "bbj_inventory_transfers",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.370889",
  "module": "espresso",
  "name": "download-button-for-bbj_inventory_transfers",
  "script": "frappe.listview_settings['bbj_inventory_transfers'] = {\r\n    // Add all required fields\r\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\", \"aws_url_2\"],\r\n    \r\n    // Format both aws_url and aws_url_2 fields as buttons\r\n    formatters: {\r\n        aws_url: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_BBJ_INVENTORY_TRANSFERS/6/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        },\r\n        \r\n        aws_url_2: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url_2\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_BBJ_INVENTORY_TRANSFERS/8/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        }\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "bbj_order_margin",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.526487",
  "module": "espresso",
  "name": "download-button-for-bbj_order_margin",
  "script": "frappe.listview_settings['bbj_order_margin']=\n   {\n    // Add both aws_url and the other field you want to use\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\"],\n\n    // Format the aws_url field as a button\n    formatters: {\n        aws_url: function(value, df, doc) {\n        let finalUrl;\n\n        // Check if import field exists and has a value\n        if (doc.file_attachment) {\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\n            } \n        else{\n            // Get the value from record_id field\n            let rid = doc.record_id || \"\";\n\n            // Use the original URL structure\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_BBJ_ORDER_MARGIN/10/\"+rid;\n            }\n        if (finalUrl) {\n            return `<button class=\"btn btn-xs btn-info\" \n                        onclick=\"window.open('${finalUrl}', '_blank'); \n                        event.stopPropagation();\n                        return false;\">\n                        Download</button>`;\n        } \n        else {\n            return `<span>No URL</span>`;\n        }\n    }\n    }\n    };\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.511567",
  "module": "espresso",
  "name": "Ring Button Functionality",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    onload: function (frm) {\r\n        frm.custom_ring_button_added = false;\r\n\r\n        const ALLOWED_ITEM_GROUPS = ['Ring', 'Set'];\r\n        const has_target_item = frm.doc.items && frm.doc.items.some(i =>\r\n            ALLOWED_ITEM_GROUPS.includes(i.item_group) && !i.custom_size\r\n        );\r\n\r\n        if (has_target_item && !frm.custom_ring_button_added) {\r\n            add_ring_button(frm, ALLOWED_ITEM_GROUPS);\r\n        }\r\n    },\r\nrefresh: function(frm) {\r\n    if ([0, 1].includes(frm.doc.docstatus)) {\r\n        // frm.add_custom_button(__('View'), null, __('View'));\r\n\r\n        frm.add_custom_button(__('Customer Worksheet'), function () {\r\n            const items = frm.doc.items || [];\r\n\r\n            const worksheets = [...new Set(\r\n                items.map(row => row.custom_customer_worksheet_no).filter(Boolean)\r\n            )];\r\n\r\n            if (worksheets.length === 0) {\r\n                frappe.msgprint(\"No related Customer Worksheet found.\");\r\n            } else if (worksheets.length === 1) {\r\n                frappe.set_route(\"Form\", \"Customer Worksheet\", worksheets[0]);\r\n            } else {\r\n                frappe.prompt(\r\n                    [\r\n                        {\r\n                            label: \"Select Customer Worksheet\",\r\n                            fieldname: \"worksheet_no\",\r\n                            fieldtype: \"Select\",\r\n                            options: worksheets,\r\n                            reqd: 1\r\n                        }\r\n                    ],\r\n                    (values) => {\r\n                        frappe.set_route(\"Form\", \"Customer Worksheet\", values.worksheet_no);\r\n                    },\r\n                    \"Open Related Worksheet\",\r\n                    \"Open\"\r\n                );\r\n            }\r\n        }, __('View'));\r\n\r\n        frm.add_custom_button(__('Purchase Order'), function () {\r\n            const items = frm.doc.items || [];\r\n\r\n            const purchaseOrders = [...new Set(\r\n                items.map(row => row.custom_purchase_order_no).filter(Boolean)\r\n            )];\r\n\r\n            if (purchaseOrders.length === 0) {\r\n                frappe.msgprint(\"No related Purchase Order found.\");\r\n            } else if (purchaseOrders.length === 1) {\r\n                frappe.set_route(\"Form\", \"Purchase Order\", purchaseOrders[0]);\r\n            } else {\r\n                frappe.prompt(\r\n                    [\r\n                        {\r\n                            label: \"Select Purchase Order\",\r\n                            fieldname: \"po_no\",\r\n                            fieldtype: \"Select\",\r\n                            options: purchaseOrders,\r\n                            reqd: 1\r\n                        }\r\n                    ],\r\n                    (values) => {\r\n                        frappe.set_route(\"Form\", \"Purchase Order\", values.po_no);\r\n                    },\r\n                    \"Open Related Purchase Order\",\r\n                    \"Open\"\r\n                );\r\n            }\r\n        }, __('View'));\r\n    }\r\n}\r\n\r\n});\r\n\r\nfrappe.ui.form.on('Sales Order Item', {\r\n    item_code(frm, cdt, cdn) {\r\n        const child = locals[cdt][cdn];\r\n        if (!child.item_code) return;\r\n\r\n        frappe.db.get_value('Item', child.item_code, ['item_group', 'item_name']).then(r => {\r\n            const item_group = r.message.item_group;\r\n            const item_name = r.message.item_name;\r\n\r\n            frappe.model.set_value(cdt, cdn, 'item_group', item_group);\r\n            frappe.model.set_value(cdt, cdn, 'item_name', item_name);\r\n\r\n            const ALLOWED_ITEM_GROUPS = ['Ring', 'Set'];\r\n            const has_target_item = frm.doc.items.some(i =>\r\n                ALLOWED_ITEM_GROUPS.includes(i.item_group) && !i.custom_size\r\n            );\r\n\r\n            if (has_target_item && !frm.custom_ring_button_added) {\r\n                add_ring_button(frm, ALLOWED_ITEM_GROUPS);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfunction add_ring_button(frm, ALLOWED_ITEM_GROUPS) {\r\n    frm.add_custom_button('Add Sizes for Ring/Set', function () {\r\n        const has_invalid = frm.doc.items.some(i =>\r\n            ALLOWED_ITEM_GROUPS.includes(i.item_group) &&\r\n            (!i.rate || i.rate <= 0 || !i.qty || i.qty <= 0) &&\r\n            !i.custom_size\r\n        );\r\n\r\n        const target_item = frm.doc.items.find(i =>\r\n            ALLOWED_ITEM_GROUPS.includes(i.item_group) && !i.custom_size\r\n        );\r\n\r\n        if (!target_item) {\r\n            frappe.msgprint(__('No valid Ring or Set item found.'));\r\n            return;\r\n        }\r\n\r\n        if (has_invalid) {\r\n            frappe.confirm(\r\n                __(\"Some 'Ring/Set' items have rate = 0 or qty ≤ 0. Proceed anyway?\"),\r\n                function () {\r\n                    show_ring_size_dialog(frm, target_item, ALLOWED_ITEM_GROUPS);\r\n                },\r\n                function () { }\r\n            );\r\n        } else {\r\n            show_ring_size_dialog(frm, target_item, ALLOWED_ITEM_GROUPS);\r\n        }\r\n    });\r\n\r\n    frm.custom_ring_button_added = true;\r\n}\r\n\r\nfunction show_ring_size_dialog(frm, item, ALLOWED_ITEM_GROUPS) {\r\n    const ordered_qty = frm.doc.total_qty || item.qty;\r\n    const size_list = [5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Enter Sizes & Quantities for Ring/Set',\r\n        fields: [\r\n            { fieldtype: 'HTML', fieldname: 'header_section' },\r\n            { fieldtype: 'HTML', fieldname: 'ring_table' }\r\n        ],\r\n        primary_action_label: 'Update',\r\n        primary_action() {\r\n            let data = [];\r\n            let updated_qty = 0;\r\n\r\n            $(dialog.$wrapper).find('.ring-row').each(function () {\r\n                const size = $(this).find('.ring-size').val();\r\n                const qty = parseInt($(this).find('.ring-qty').val()) || 0;\r\n                if (size && qty > 0) {\r\n                    data.push({ size, qty });\r\n                    updated_qty += qty;\r\n                }\r\n            });\r\n\r\n            if (data.length === 0) {\r\n                frappe.msgprint(__('Please enter at least one valid size and quantity.'));\r\n                return;\r\n            }\r\n\r\n            const index = frm.doc.items.findIndex(i =>\r\n                i.item_code === item.item_code &&\r\n                i.qty === item.qty &&\r\n                i.rate === item.rate &&\r\n                !i.custom_size\r\n            );\r\n            if (index !== -1) {\r\n                frm.doc.items.splice(index, 1);\r\n            }\r\n\r\n            data.forEach(row => {\r\n                frm.add_child('items', {\r\n                    item_code: item.item_code,\r\n                    item_name: item.item_name,\r\n                    qty: row.qty,\r\n                    rate: item.rate,\r\n                    custom_size: row.size,\r\n                    uom: item.uom,\r\n                    description: item.description,\r\n                    delivery_date: item.delivery_date,\r\n                    item_group: item.item_group,\r\n                    custom_purchase_order_no: item.custom_purchase_order_no\r\n                });\r\n            });\r\n\r\n            frm.refresh_field('items');\r\n            dialog.hide();\r\n            frm.clear_custom_buttons();\r\n            frm.custom_ring_button_added = false;\r\n        }\r\n    });\r\n\r\n    // Header HTML\r\n    const header_html = `\r\n        <div class=\"row\" style=\"display: flex; gap: 10px;\">\r\n            <div class=\"col\" style=\"background-color:#ffebee; padding: 10px; border-radius: 4px; width: 100%;\">\r\n                <b>Item:</b> ${item.item_code}\r\n                <span style=\"float:right\"><b>Ordered Qty:</b> ${ordered_qty}</span>\r\n            </div>\r\n            <div class=\"col\" style=\"background-color:#e8f5e9; padding: 10px; border-radius: 4px; width: 100%;\">\r\n                <b>Updated Qty:</b> <span class=\"updated-qty\">0</span>\r\n                <span style=\"float:right\"><b>Difference:</b> <span class=\"qty-diff\">${-ordered_qty}</span></span>\r\n            </div>\r\n        </div><br/>\r\n    `;\r\n    dialog.fields_dict.header_section.$wrapper.html(header_html);\r\n\r\n    // Ring rows HTML\r\n    const rows_html = size_list.map(size => `\r\n        <div class=\"ring-row\" style=\"display: flex; gap: 10px; margin-bottom: 8px;\">\r\n            <input type=\"text\" class=\"ring-size form-control\" value=\"${size}\" placeholder=\"Size\" style=\"width: 100%;\">\r\n            <input type=\"number\" class=\"ring-qty form-control\" placeholder=\"Enter qty\" style=\"width: 100%;\">\r\n        </div>\r\n    `).join('');\r\n\r\n    dialog.fields_dict.ring_table.$wrapper.html(`\r\n        <div>\r\n            <div style=\"display: flex; font-weight: bold; gap: 10px; margin-bottom: 8px;\">\r\n                <div style=\"width: 100%;\">Size</div>\r\n                <div style=\"width: 100%;\">Order Qty</div>\r\n            </div>\r\n            <div class=\"ring-rows\">\r\n                ${rows_html}\r\n            </div>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary add-ring-row\" style=\"margin: 10px 0;\">Add Row</button>\r\n            <div style=\"margin-top:10px; font-size: 12px; color: #996600; background-color: #fff8e1; padding: 8px; border-radius: 4px;\">\r\n                <b>Note:</b> You can edit or add any sizes as needed. Ensure total matches ordered quantity.\r\n            </div>\r\n        </div>\r\n    `);\r\n\r\n    function update_qty_status() {\r\n        let total = 0;\r\n        dialog.$wrapper.find('.ring-qty').each(function () {\r\n            total += parseInt($(this).val()) || 0;\r\n        });\r\n        const diff = total - ordered_qty;\r\n        dialog.$wrapper.find('.updated-qty').text(total);\r\n        dialog.$wrapper.find('.qty-diff').text(diff);\r\n\r\n        if (diff === 0) {\r\n            dialog.get_primary_btn().removeClass('btn-disabled').show();\r\n        } else {\r\n            dialog.get_primary_btn().hide();\r\n        }\r\n    }\r\n\r\n    dialog.$wrapper.on('input', '.ring-qty', update_qty_status);\r\n\r\n    dialog.$wrapper.on('click', '.add-ring-row', function () {\r\n        const new_row = `\r\n            <div class=\"ring-row\" style=\"display: flex; gap: 10px; margin-bottom: 8px;\">\r\n                <input type=\"text\" class=\"ring-size form-control\" placeholder=\"Size\" style=\"width: 100%;\">\r\n                <input type=\"number\" class=\"ring-qty form-control\" placeholder=\"Enter qty\" style=\"width: 100%;\">\r\n            </div>\r\n        `;\r\n        dialog.$wrapper.find('.ring-rows').append(new_row);\r\n        update_qty_status();\r\n    });\r\n\r\n    dialog.get_primary_btn().hide();\r\n    dialog.show();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.001114",
  "module": "espresso",
  "name": "duplicate of Sales order Bom image",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    onload(frm) {\r\n        frm.set_query('custom_item_bom', () => {\r\n            const item_codes = (frm.doc.items || []).map(row => row.item_code);\r\n            if (!item_codes.length) return { filters: { docstatus: 1 } };\r\n    \r\n            return {\r\n                filters: {\r\n                    item: [\"in\", item_codes],\r\n                    is_default: 1\r\n                }\r\n            };\r\n        });\r\n    },\r\n\r\n    onload_post_render(frm) {\r\n        frm.trigger(\"recalculate_bom_quantities\");\r\n        set_custom_bom_items_fields_read_only(frm);\r\n    },\r\n    \r\n    refresh(frm) {\r\n        frm.trigger(\"recalculate_bom_quantities\");\r\n    },\r\n    \r\n    total_qty(frm) {\r\n        frm.trigger(\"recalculate_bom_quantities\");\r\n    },\r\n\r\n    before_save(frm) {\r\n        const firstItem = frm.doc.items?.[0];\r\n        if (firstItem?.image) {\r\n            frm.set_value('custom_image_product', firstItem.image);\r\n        }\r\n    },\r\n\r\n    validate(frm) {\r\n        frm.trigger(\"recalculate_bom_quantities\");\r\n\r\n        if (!frm.doc.custom_item_bom) {\r\n            for (let item of frm.doc.items || []) {\r\n                if (item.bom_no) {\r\n                    frm.set_value('custom_item_bom', item.bom_no);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    recalculate_bom_quantities(frm) {\r\n        const multiplier = frm.doc.total_qty || 1;\r\n    \r\n        frm.doc.custom_bom_items?.forEach(bom_item => {\r\n            const qty = flt(multiplier) * flt(bom_item.custom_quantity || 1);\r\n            const rate = flt(bom_item.rate || 0);\r\n    \r\n            bom_item.qty = qty;\r\n            bom_item.amount = qty * rate;\r\n        });\r\n    \r\n        frm.refresh_field('custom_bom_items');\r\n    },\r\n\r\n\r\n    async custom_item_bom(frm) {\r\n        if (!frm.doc.custom_item_bom) return;\r\n\r\n        try {\r\n            const { message } = await frappe.db.get_value('BOM', frm.doc.custom_item_bom, 'docstatus');\r\n            if (!message || message.docstatus === 2) return;\r\n\r\n            frm.clear_table('custom_bom_items');\r\n            const total_qty = frm.doc.total_qty || 1;\r\n\r\n            const { message: bomDoc } = await frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"BOM\",\r\n                    name: frm.doc.custom_item_bom\r\n                }\r\n            });\r\n            \r\n\r\n            const bom_qty = bomDoc.quantity || 1;\r\n\r\n            for (const bom_item of bomDoc.items || []) {\r\n                const row = frm.add_child('custom_bom_items');\r\n                row.item_code = bom_item.item_code;\r\n                row.item_name = bom_item.item_name;\r\n                row.base_qty = bom_item.qty;\r\n                row.custom_quantity = bom_item.qty;\r\n                row.uom = bom_item.uom;\r\n                row.stock_uom = bom_item.stock_uom;\r\n                row.rate = bom_item.rate || 0;\r\n                row.qty = total_qty * bom_item.qty;\r\n                row.amount = row.qty * row.rate;\r\n                \r\n                row.description = bom_item.description || '';\r\n                row.custom_selling_rate = bom_item.custom_selling_rate || '',\r\n                row.custom_selling_amount = bom_item.custom_selling_amount || '',\r\n                row.custom_stone_treatment = bom_item.custom_stone_treatment || '';\r\n                row.custom_sku_weight = bom_item.custom_sku_weight || 0;\r\n                row.custom_stone_pieces = bom_item.custom_stone_pieces || 0;\r\n                row.custom_min_weight = bom_item.custom_min_weight || 0;\r\n                row.custom_gemstone = bom_item.custom_gemstone || '';\r\n                row.custom_country_of_origin = bom_item.custom_country_of_origin || '';\r\n                row.custom_merch_color__attribute = bom_item.custom_merch_color__attribute || '';\r\n                row.custom_metal_weight = bom_item.custom_metal_weight || 0;\r\n                row.custom_avg_carat_weight = bom_item.custom_avg_carat_weight || 0;\r\n                row.custom_cut = bom_item.custom_cut || '';\r\n                row.custom_length = bom_item.custom_length || 0;\r\n                row.custom_oh = bom_item.custom_oh || 0;\r\n                row.custom_ext_qty_required = bom_item.custom_ext_qty_required || 0;\r\n                row.custom_net_balance_required = bom_item.custom_net_balance_required || 0;\r\n                row.custom_grade = bom_item.custom_grade || '';\r\n                row.custom_weight_per_piece = bom_item.custom_weight_per_piece || 0;\r\n                row.custom_merch_color = bom_item.custom_merch_color || '';\r\n                row.supplier = bom_item.supplier || '';\r\n                row.custom_our_responsibility = bom_item.custom_our_responsibility || 0;\r\n                row.custom_item_group = bom_item.custom_item_group || '';\r\n                row.custom_supplier = bom_item.custom_supplier || '';\r\n                row.custom_setting_type = bom_item.custom_setting_type || '';\r\n                row.custom_sku_metal_weight = bom_item.custom_sku_metal_weight || 0;\r\n\r\n                // if (bom_item.item_code) {\r\n                //     frappe.call({\r\n                //         method: \"get_latest_po_for_item\",\r\n                //         args: { item_code: bom_item.item_code },\r\n                //         callback(r) {\r\n                //             if (r?.data?.parent) {\r\n                //                 frappe.model.set_value(row.doctype, row.name, \"custom_purchase_order_id\", r.data.parent);\r\n                //             }\r\n                //         }\r\n                //     });\r\n                // }\r\n            }\r\n            frm.set_value('custom_automated', 1);\r\n            frm.refresh_field('custom_bom_items');\r\n            frm.trigger('update_specs_from_bom');\r\n            set_custom_bom_items_fields_read_only(frm);\r\n\r\n        } catch (err) {\r\n            console.error('Error loading BOM items:', err);\r\n            frappe.msgprint(__('Failed to load BOM items. Please check the console for details.'));\r\n        }\r\n    },\r\n\r\n    update_specs_from_bom(frm) {\r\n        frm.clear_table('custom_specs');\r\n\r\n        if (!frm.doc.custom_item_bom || !frm.doc.custom_bom_items?.length) return;\r\n\r\n        for (const bom_item of frm.doc.custom_bom_items) {\r\n            const specs_row = frm.add_child('custom_specs');\r\n            specs_row.item_code = bom_item.item_code || '';\r\n            specs_row.grade = bom_item.custom_grade || '';\r\n            specs_row.country_of_origin = bom_item.custom_country_of_origin || '';\r\n            specs_row.merch_color = bom_item.custom_merch_color || '';\r\n            specs_row.item_group = bom_item.item_group || '';\r\n            specs_row.qty = bom_item.qty || 0;\r\n            specs_row.uom = bom_item.uom || '';\r\n            specs_row.rate = bom_item.rate || 0;\r\n        }\r\n\r\n        frm.refresh_field('custom_specs');\r\n    }\r\n});\r\n\r\nfunction set_custom_bom_items_fields_read_only(frm) {\r\n    if (frm.fields_dict.custom_bom_items?.grid) {\r\n        const readOnlyFields = [\r\n            'qty',\r\n            'item_code',\r\n            'custom_item_group',\r\n            'uom',\r\n            'custom_stone_treatment',\r\n            'custom_grade',\r\n            'custom_cut',\r\n            'custom_setting_type',\r\n            'custom_sku_metal_weight',\r\n            'custom_merch_color__attribute',\r\n            'custom_sku_weight',\r\n            'custom_avg_carat_weight',\r\n            'custom_stone_pieces'\r\n        ];\r\n\r\n        readOnlyFields.forEach(field => {\r\n            frm.fields_dict.custom_bom_items.grid.update_docfield_property(field, 'read_only', 1);\r\n        });\r\n\r\n        ['rate', 'custom_supplier'].forEach(field => {\r\n            frm.fields_dict.custom_bom_items.grid.update_docfield_property(\r\n                field,\r\n                'read_only',\r\n                frm.doc.custom_automated ? 1 : 0\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction initialize_base_qty(frm) {\r\n        if (frm.doc.__islocal){\r\n            return\r\n        }\r\n        (frm.doc.custom_bom_items || []).forEach(row => {\r\n            if (!row.base_qty && row.custom_quantity) {\r\n                row.base_qty = row.custom_quantity;\r\n            }\r\n            if (!row.custom_quantity && row.base_qty) {\r\n                row.custom_quantity = row.base_qty;\r\n            }\r\n            if (!row.custom_quantity && !row.base_qty) {\r\n                row.custom_quantity = 1;\r\n                row.base_qty = 1;\r\n            }\r\n        });\r\n}\r\n\r\n\r\n// frappe.ui.form.on('Sales Order Item', {\r\n//     item_code(frm, cdt, cdn) {\r\n//         const row = locals[cdt][cdn];\r\n//         if (!row.item_code) return;\r\n\r\n//         frappe.call({\r\n//             method: \"frappe.client.get_list\",\r\n//             args: {\r\n//                 doctype: \"BOM\",\r\n//                 filters: {\r\n//                     item: row.item_code,\r\n//                     // is_default: 1,\r\n//                     // docstatus: 1\r\n//                 },\r\n//                 limit_page_length: 1,\r\n//                 fields: [\"name\"]\r\n//             },\r\n//             callback(response) {\r\n//                 const bom = response.message?.[0];\r\n//                 if (bom) {\r\n//                     frm.set_value(\"custom_item_bom\", bom.name);\r\n//                 }\r\n//             }\r\n//         });\r\n\r\n//         frappe.db.get_doc('Item', row.item_code).then(item => {\r\n//             row.description = item.description;\r\n//             frm.fields_dict.items.grid.refresh();\r\n//         });\r\n//     },\r\n\r\n//     bom_no(frm, cdt, cdn) {\r\n//         const row = locals[cdt][cdn];\r\n//         if (!row.bom_no) return;\r\n\r\n//         frappe.db.get_value(\"BOM\", row.bom_no, \"docstatus\").then(({ message }) => {\r\n//             if (message?.docstatus !== 2) {\r\n//                 frm.set_value(\"custom_item_bom\", row.bom_no);\r\n//             }\r\n//         });\r\n//     }\r\n// });\r\n\r\nfrappe.ui.form.on('BOM Item', {\r\n\r\n    custom_avg_carat_weight(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        const new_weight = row.custom_avg_carat_weight ? row.custom_avg_carat_weight * 0.85 : 0;\r\n        frappe.model.set_value(cdt, cdn, 'custom_sku_weight', new_weight);\r\n    },\r\n\r\n    qty(frm, cdt, cdn) {\r\n        update_bom_item_amount(cdt, cdn);\r\n    },\r\n\r\n    rate(frm, cdt, cdn) {\r\n        update_bom_item_amount(cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction update_bom_item_amount(cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    frappe.model.set_value(cdt, cdn, 'amount', (row.qty || 0) * (row.rate || 0));\r\n}\r\n\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.288263",
  "module": "espresso",
  "name": "Progress Bar",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            show_progress_bar(frm);\r\n        } else {\r\n            if (frm.fields_dict.custom_progress_status) {\r\n                frm.fields_dict.custom_progress_status.$wrapper.html(\"\");\r\n            }\r\n        }\r\n    },\r\n    before_save: function(frm) {\r\n        update_custom_item_details(frm);\r\n    },\r\n        onload: function(frm) {\r\n        update_custom_item_details(frm);\r\n    },\r\n    \r\n    custom_item_group_to_filter_items: function(frm) {\r\n        update_custom_item_details(frm);\r\n    },\r\n\r\n    items_on_form_rendered: function(frm) {\r\n        update_custom_item_details(frm);\r\n    }\r\n});\r\n\r\n\r\nasync function update_custom_item_details(frm) {\r\n    let html = \"\";\r\n    let show_field = false;\r\n    const mainStone = frm.doc.custom_main_stone || \"\";\r\n\r\n    const firstItem = (frm.doc.items || [])[0];\r\n    if (!firstItem) {\r\n        frm.set_df_property('custom_item_details', 'hidden', 1);\r\n        return;\r\n    }\r\n\r\n    const itemCode = firstItem.item_code;\r\n    const itemGroup = firstItem.item_group;\r\n    let parentGroup = \"\";\r\n\r\n    try {\r\n        const res = await frappe.db.get_value(\"Item Group\", itemGroup, \"parent_item_group\");\r\n        parentGroup = res?.message?.parent_item_group;\r\n    } catch (err) {\r\n        console.error(\"Error getting parent_item_group for\", itemGroup, err);\r\n    }\r\n\r\n    const vendorId = firstItem.custom_vendor_product_id;\r\n    const customerSku = firstItem.custom_customer_sku;\r\n\r\n    if ((itemGroup === \"SKU\" || parentGroup === \"SKU\") && (vendorId || customerSku)) {\r\n        show_field = true;\r\n\r\n        let imageUrl = \"\";\r\n        try {\r\n            const res = await frappe.db.get_value(\"Item\", itemCode, \"image\");\r\n            imageUrl = res?.message?.image;\r\n        } catch (err) {\r\n            console.warn(\"No image found for item:\", itemCode);\r\n        }\r\n\r\n        html += `<div style=\"margin-bottom:15px; padding-bottom:10px;\">`;\r\n        if (imageUrl) {\r\n            html += `<img src=\"${imageUrl}\" alt=\"${itemCode}\" style=\"margin-top:8px; max-height:140px;\"><br>`;\r\n        }\r\n        if (vendorId) {\r\n            html += `<div style=\"padding-top:6px;\"><strong>Vendor ID:</strong> ${vendorId}</div>`;\r\n        }\r\n        if (customerSku) {\r\n            html += `<div style=\"padding-top:6px;\"><strong>Customer SKU:</strong> ${customerSku}</div>`;\r\n        }\r\n        if (mainStone) {\r\n            html += `<div style=\"padding-top:6px;\"><strong>Main Stone:</strong> ${mainStone}</div>`;\r\n        }\r\n        html += `</div>`;\r\n    }\r\n\r\n    if (show_field) {\r\n        frm.set_df_property('custom_item_details', 'options', html);\r\n        frm.set_df_property('custom_item_details', 'hidden', 0);\r\n    } else {\r\n        frm.set_df_property('custom_item_details', 'hidden', 1);\r\n    }\r\n\r\n    frm.refresh_field('custom_item_details');\r\n}\r\n\r\nfunction show_progress_bar(frm) {\r\n    const steps = ['Sales Order', 'Delivery Note', 'Sales Invoice', 'Payment Entry'];\r\n    let currentStep = 0;\r\n\r\n    if (frm.doc.payment_status === 'Paid') {\r\n        currentStep = 3;\r\n    } else if (frm.doc.per_billed >= 100) {\r\n        currentStep = 2;\r\n    } else if (frm.doc.per_delivered >= 100) {\r\n        currentStep = 1;\r\n    } else {\r\n        currentStep = 0;\r\n    }\r\n\r\n    let progressHTML = `<div style=\"display: flex; justify-content: space-between; align-items: center; margin: 20px 0; position: relative;\">`;\r\n\r\n    steps.forEach((step, index) => {\r\n        const isCompleted = index <= currentStep;\r\n\r\n        if (index > 0) {\r\n            progressHTML += `\r\n                <div style=\"\r\n                    flex-grow: 1;\r\n                    height: 2px;\r\n                    background-color: ${index <= currentStep ? '#007bff' : '#ccc'};\r\n                \"></div>\r\n            `;\r\n        }\r\n\r\n        progressHTML += `\r\n            <div style=\"text-align: center; position: relative;\">\r\n                <div style=\"\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-radius: 50%;\r\n                    background-color: ${isCompleted ? '#007bff' : '#ccc'};\r\n                    margin: 0 auto;\r\n                    position: relative;\r\n                    z-index: 1;\r\n                \"></div>\r\n                <div style=\"\r\n                    margin-top: 6px;\r\n                    font-size: 12px;\r\n                    color: ${isCompleted ? '#007bff' : '#666'};\r\n                    font-weight: ${isCompleted ? '600' : 'normal'};\r\n                \">${step}</div>\r\n            </div>\r\n        `;\r\n    });\r\n\r\n    progressHTML += `</div>`;\r\n\r\n    if (frm.fields_dict.custom_progress_status) {\r\n        frm.fields_dict.custom_progress_status.$wrapper.html(progressHTML);\r\n    }\r\n}\r\n\r\nfrappe.ui.form.on('Sales Order', {\r\n    refresh: function(frm) {\r\n        updateBOMTotals(frm);\r\n    },\r\n    custom_bom_items_add: function(frm) {\r\n        updateBOMTotals(frm);\r\n    },\r\n    custom_bom_items_remove: function(frm) {\r\n        updateBOMTotals(frm);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('BOM Item', {\r\n    qty: function(frm) {\r\n        updateBOMTotals(frm);\r\n    },\r\n    custom_selling_amount: function(frm) {\r\n        updateBOMTotals(frm);\r\n    }\r\n});\r\n\r\nfunction updateBOMTotals(frm) {\r\n    const items = frm.doc.custom_bom_items || [];\r\n    const row_count = items.length;\r\n\r\n    if (!row_count) return;\r\n\r\n    let total_selling = 0;\r\n\r\n    items.forEach(row => {\r\n        total_selling += flt(row.custom_selling_amount || 0);\r\n    });\r\n\r\n    if (frm.doc.customer) {\r\n        frappe.db.get_value(\"Customer\", frm.doc.customer, \"default_currency\", (customerData) => {\r\n            const currency = customerData.default_currency;\r\n\r\n            frappe.db.get_value(\"Currency\", currency, \"symbol\", (currencyData) => {\r\n                const symbol = currencyData.symbol;\r\n\r\n                if (frm.fields_dict.custom_bom_item_total?.$wrapper) {\r\n                    frm.fields_dict.custom_bom_item_total.$wrapper.html(`\r\n                        <div style=\"padding: 8px;\">\r\n                            <b>Total BOM Items:</b> ${row_count}<br>\r\n                            <b>Selling Amount:</b> ${symbol} ${total_selling.toFixed(2)}\r\n                        </div>\r\n                    `);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.250099",
  "module": "espresso",
  "name": "BOM Item Description Update",
  "script": "// Complete BOM Client Script\r\n// Go to: Setup > Customization > Client Script > New\r\n// DocType: BOM\r\n// Script Type: Form\r\n\r\nfrappe.ui.form.on('BOM', {\r\n    setup: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn]\r\n        frappe.call({\r\n            method: \"get_country_of_origin\",\r\n            args: {\r\n                gemstone: row.custom_gemstone\r\n            },\r\n            callback: function(r) {\r\n                if (r.data) {\r\n                    const allowed_countries = r.data.map(entry => entry[1]);\r\n                    let unique_countries = [...new Set(allowed_countries)];\r\n                    console.log(unique_countries);\r\n                    cur_frm.fields_dict.items.grid.update_docfield_property(\r\n                        'custom_country_of_origin',\r\n                        'options',\r\n                        unique_countries\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    onload: function(frm) {\r\n        // Set query for item filter\r\n        frm.set_query('item', function() {\r\n            if (frm.doc.custom_sku_filter) {\r\n                return {\r\n                    filters: {\r\n                        item_group: 'SKU'\r\n                    }\r\n                };\r\n            } else {\r\n                return {}; \r\n            }\r\n        });\r\n\r\n        // Set country of origin field requirements\r\n        frm.fields_dict.items.grid.get_field('custom_country_of_origin').reqd = false;\r\n\r\n        // Add default items for new BOM\r\n        if (frm.is_new()) {\r\n            frm.clear_table('items');\r\n\r\n            const default_items = ['CPF', 'Setting', 'Plating'];\r\n\r\n            default_items.forEach(item_code => {\r\n                let row = frm.add_child('items');\r\n                row.item_code = item_code;\r\n                row.qty = 1;\r\n\r\n                frappe.db.get_value('Item', item_code, 'stock_uom')\r\n                    .then(r => {\r\n                        if (r && r.message) {\r\n                            row.uom = r.message.stock_uom;\r\n                            row.rate = r.message.valuation_rate;\r\n                            row.custom_item_group = r.message.item_group;\r\n                            frm.refresh_field('items');\r\n                        }\r\n                    });\r\n            });\r\n        }\r\n    },\r\n\r\n    custom_sku_filter: function(frm) {\r\n        frm.fields_dict['item'].get_query = function() {\r\n            if (frm.doc.custom_sku_filter) {\r\n                return {\r\n                    filters: {\r\n                        item_group: 'SKU'\r\n                    }\r\n                };\r\n            } else {\r\n                return {};\r\n            }\r\n        };\r\n        frm.refresh_field('item');\r\n    },\r\n\r\n    refresh: function(frm) {\r\n        if (!frm.is_new()) {\r\n            // Add spec integration buttons\r\n            add_spec_integration_buttons(frm);\r\n        \r\n        }\r\n    },\r\n\r\n    validate: function(frm) {\r\n            let has_error = false;\r\n            const required_groups = [\"Stone\", \"Pearl\", \"Bead\"];\r\n    \r\n            (frm.doc.items || []).forEach(row => {\r\n                if (\r\n                    required_groups.includes(row.custom_item_group) &&\r\n                    row.custom_gemstone &&\r\n                    !row.custom_country_of_origin\r\n                ) {\r\n                    has_error = true;\r\n                    frappe.msgprint(`Please enter Country of Origin for gemstone \"${row.custom_gemstone}\" in item \"${row.item_name}\".`);\r\n                }\r\n    \r\n                // Stone-specific validations\r\n                if (row.custom_item_group === \"Stone\") {\r\n                    if (row.uom === \"Carat\" && (!row.custom_avg_carat_weight || row.custom_avg_carat_weight === 0)) {\r\n                        frappe.throw(`Row ${row.idx}: \"Avg Carat Weight\" is required when UOM is Carat for Stone items.`);\r\n                    }\r\n    \r\n                    if (row.uom === \"Piece\" && (!row.custom_stone_pieces || row.custom_stone_pieces === 0)) {\r\n                        frappe.throw(`Row ${row.idx}: \"Stone Pieces\" is required when UOM is Piece for the Stone items.`);\r\n                    }\r\n                }\r\n            });\r\n    \r\n            if (has_error) frappe.validated = false;\r\n        }\r\n    });\r\n\r\n// BOM Item Event Handlers\r\nfrappe.ui.form.on('BOM Item', {\r\n    custom_gemstone: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        if (row.custom_gemstone) {\r\n            let row = locals[cdt][cdn];\r\n            frappe.call({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: row.custom_gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.data) {\r\n                        const allowed_countries = r.data.map(entry => entry[1]);\r\n                        let unique_countries = [...new Set(allowed_countries)];\r\n                        console.log(unique_countries);\r\n                        cur_frm.fields_dict.items.grid.update_docfield_property(\r\n                            'custom_country_of_origin',\r\n                            'options',\r\n                            unique_countries\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n\r\n            frappe.db.get_doc(\"Gemstones\", row.custom_gemstone).then(gemstone => {\r\n                const allowed_countries = gemstone.country_of_origin.map(co => co.country);\r\n                frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n                frm.fields_dict[\"items\"].grid.refresh();\r\n            });\r\n\r\n            // Set requirement for country of origin\r\n            const required_groups = [\"Stone\", \"Pearl\", \"Bead\"];\r\n            const is_required = required_groups.includes(row.custom_item_group) && !!row.custom_gemstone;\r\n            frappe.meta.get_docfield(\"BOM Item\", \"custom_country_of_origin\", frm.doc.name).reqd = is_required;\r\n            frm.fields_dict.items.grid.refresh();\r\n        } else {\r\n            frappe.meta.get_docfield(\"BOM Item\", \"custom_country_of_origin\").get_query = function() {\r\n                return {};\r\n            };\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n            frm.fields_dict[\"items\"].grid.refresh();\r\n        }\r\n\r\n        // Update description from spec\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_country_of_origin: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        if (row.custom_gemstone) {\r\n            let row = locals[cdt][cdn];\r\n            \r\n            frappe.call({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: row.custom_gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.data) {\r\n                        const allowed_countries = r.data.map(entry => entry[1]);\r\n                        let unique_countries = [...new Set(allowed_countries)];\r\n                        cur_frm.fields_dict.items.grid.update_docfield_property(\r\n                            'custom_country_of_origin',\r\n                            'options',\r\n                            unique_countries\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n\r\n            frappe.db.get_doc(\"Gemstones\", row.custom_gemstone).then(gemstone => {\r\n                const allowed_countries = gemstone.country_of_origin.map(co => co.country);\r\n                frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n                frm.fields_dict[\"items\"].grid.refresh();\r\n            });\r\n        } else {\r\n            frappe.meta.get_docfield(\"BOM Item\", \"custom_country_of_origin\").get_query = function() {\r\n                return {};\r\n            };\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n            frm.fields_dict[\"items\"].grid.refresh();\r\n        }\r\n\r\n        // Update description from spec\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    form_render: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        frappe.call({\r\n            method: \"get_country_of_origin\",\r\n            args: {\r\n                gemstone: row.custom_gemstone\r\n            },\r\n            callback: function(r) {\r\n                if (r.data) {\r\n                    const allowed_countries = r.data.map(entry => entry[1]);\r\n                    let unique_countries = [...new Set(allowed_countries)];\r\n                    console.log(unique_countries)\r\n                    cur_frm.fields_dict.items.grid.update_docfield_property(\r\n                        'custom_country_of_origin',\r\n                        'options',\r\n                        unique_countries\r\n                    );\r\n                }\r\n            }\r\n        });\r\n        \r\n        if (row.custom_coutry) {\r\n            frm.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_coutry)\r\n        }\r\n\r\n        // Calculate qty for stones\r\n        calculate_qty_for_stones(frm, cdt, cdn);\r\n        \r\n        // Update description from spec\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_coutry: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        if (row.custom_coutry) {\r\n            frm.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_coutry)\r\n        }\r\n    },\r\n\r\n    item_code: function(frm, cdt, cdn) {\r\n        setTimeout(() => update_bom_item_description_from_spec(frm, cdt, cdn), 300);\r\n    },\r\n\r\n    // Calculation handlers\r\n    custom_stone_pieces: function(frm, cdt, cdn) {\r\n        calculate_ext_qty_and_weight(frm, cdt, cdn);\r\n        calculate_qty_for_stones(frm, cdt, cdn);\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    qty: function(frm, cdt, cdn) {\r\n        calculate_ext_qty_and_weight(frm, cdt, cdn);\r\n        calculate_selling_amount(cdt, cdn);\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_metal_weight: function(frm, cdt, cdn) {\r\n        calculate_ext_qty_and_weight(frm, cdt, cdn);\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_ext_qty_required: function(frm, cdt, cdn) {\r\n        calculate_net_balance(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_oh: function(frm, cdt, cdn) {\r\n        calculate_net_balance(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_selling_rate: function(frm, cdt, cdn) {\r\n        calculate_selling_amount(cdt, cdn);\r\n    },\r\n\r\n    custom_avg_carat_weight: function(frm, cdt, cdn) {\r\n        calculate_qty_for_stones(frm, cdt, cdn);\r\n        const row = locals[cdt][cdn];\r\n        if (row.custom_item_group === \"Stone\" && row.uom === \"Carat\") {\r\n            frappe.model.set_value(cdt, cdn, 'qty', row.custom_avg_carat_weight || 0);\r\n        }\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    uom: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n\r\n        frm.fields_dict.items.grid.toggle_reqd('custom_avg_carat_weight', false, cdn);\r\n        frm.fields_dict.items.grid.toggle_reqd('custom_stone_pieces', false, cdn);\r\n\r\n        if (row.custom_item_group === \"Stone\") {\r\n            if (row.uom === \"Carat\") {\r\n                frm.fields_dict.items.grid.toggle_reqd('custom_avg_carat_weight', true, cdn);\r\n                frappe.model.set_value(cdt, cdn, 'qty', row.custom_avg_carat_weight || 0);\r\n            } else if (row.uom === \"Piece\") {\r\n                frm.fields_dict.items.grid.toggle_reqd('custom_stone_pieces', true, cdn);\r\n                frappe.model.set_value(cdt, cdn, 'qty', row.custom_stone_pieces || 0);\r\n            }\r\n        }\r\n\r\n        calculate_qty_for_stones(frm, cdt, cdn);\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_item_group: function(frm, cdt, cdn) {\r\n        calculate_qty_for_stones(frm, cdt, cdn);\r\n        update_bom_item_description_from_spec(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\n// ============ DESCRIPTION FUNCTIONS - UPDATED FOR BOM ITEM SPEC ============\r\n\r\n// Core description function that fetches from BOM Item Spec\r\nfunction update_bom_item_description_from_spec(frm, cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n    if (!row || !row.name) return;\r\n\r\n    console.log(\"Generating description from BOM Item Spec fields...\");\r\n\r\n    // Get parent BOM name\r\n    let bom_name = null;\r\n    if (frm && frm.doc) {\r\n        bom_name = frm.doc.name;\r\n    } else {\r\n        bom_name = row.parent;\r\n    }\r\n\r\n    if (!bom_name) {\r\n        console.log(\"Cannot determine BOM name, falling back to basic description\");\r\n        build_basic_description(frm, cdt, cdn, row);\r\n        return;\r\n    }\r\n\r\n    // Get BOM Item Spec for this BOM Item\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'BOM Item Spec',\r\n            filters: {\r\n                'bom': bom_name,\r\n                'bom_item_id': row.name\r\n            },\r\n            fields: [\r\n                'name', 'item', 'item_group', 'gemstone', 'stone_treatments', \r\n                'grade', 'cut', 'setting_type', 'merch_color_attribute', \r\n                'stone_pieces', 'country_of_origin', 'sku_carat_weight', \r\n                'avg_carat_weight', 'avg_metal_weight', 'sku_metal_weight',\r\n                'length', 'weight_per_piece', 'metal_group'\r\n            ],\r\n            limit: 1\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                const spec = r.message[0];\r\n                build_description_from_spec(frm, cdt, cdn, row, spec);\r\n            } else {\r\n                // Fallback to basic item info if no spec exists\r\n                build_basic_description(frm, cdt, cdn, row);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction build_description_from_spec(frm, cdt, cdn, row, spec) {\r\n    let parts = [];\r\n\r\n    // Use BOM Item Spec fields instead of custom fields\r\n    if (row.item_name) parts.push(`Item Name: ${row.item_name}`);\r\n    if (spec.item_group) parts.push(`Item Group: ${spec.item_group}`);\r\n    if (spec.gemstone) parts.push(`Gemstone: ${spec.gemstone}`);\r\n    //if (spec.stone_treatment) parts.push(`Treatment: ${spec.stone_treatment}`);\r\n\t// Handle stone_treatments multi-select table\r\n    if (spec.stone_treatments && spec.stone_treatments.length > 0) {\r\n        const treatments = spec.stone_treatments.map(t => t.stone_treatment).filter(t => t).join(', ');\r\n        if (treatments) {\r\n            parts.push(`Stone Treatments: ${treatments}`);\r\n        }\r\n    }\r\n    if (spec.grade) parts.push(`Grade: ${spec.grade}`);\r\n    if (spec.cut) parts.push(`Cut: ${spec.cut}`);\r\n    if (spec.setting_type) parts.push(`Setting Type: ${spec.setting_type}`);\r\n    if (spec.merch_color_attribute) parts.push(`Merch Color: ${spec.merch_color_attribute}`);\r\n    if (spec.stone_pieces) parts.push(`Pieces: ${spec.stone_pieces}`);\r\n    if (spec.country_of_origin) parts.push(`Country: ${spec.country_of_origin}`);\r\n    if (spec.sku_carat_weight) parts.push(`SKU Weight: ${spec.sku_carat_weight}`);\r\n    if (spec.avg_carat_weight) parts.push(`Avg Carat: ${spec.avg_carat_weight}`);\r\n    if (spec.avg_metal_weight) parts.push(`Metal Weight: ${spec.avg_metal_weight}`);\r\n    if (spec.sku_metal_weight) parts.push(`SKU Metal Weight: ${spec.sku_metal_weight}`);\r\n    if (spec.length) parts.push(`Length: ${spec.length}`);\r\n    if (spec.weight_per_piece) parts.push(`Weight/Piece: ${spec.weight_per_piece}`);\r\n    if (spec.metal_group) parts.push(`Metal Group: ${spec.metal_group}`);\r\n\r\n    const full_description = parts.join(' | ');\r\n\r\n    console.log(\"Setting description to:\", full_description);\r\n    frappe.model.set_value(cdt, cdn, 'description', full_description);\r\n    \r\n    if (frm && frm.fields_dict && frm.fields_dict[\"items\"]) {\r\n        frm.fields_dict[\"items\"].grid.refresh_row(cdn);\r\n    }\r\n}\r\n\r\nfunction build_basic_description(frm, cdt, cdn, row) {\r\n    // Fallback when no BOM Item Spec exists\r\n    let parts = [];\r\n    \r\n    if (row.item_name) parts.push(`Item Name: ${row.item_name}`);\r\n    if (row.item_code) parts.push(`Item Code: ${row.item_code}`);\r\n    \r\n    const basic_description = parts.join(' | ');\r\n    \r\n    console.log(\"Setting basic description to:\", basic_description);\r\n    frappe.model.set_value(cdt, cdn, 'description', basic_description);\r\n    \r\n    if (frm && frm.fields_dict && frm.fields_dict[\"items\"]) {\r\n        frm.fields_dict[\"items\"].grid.refresh_row(cdn);\r\n    }\r\n}\r\n\r\n// BOM Description from Specs\r\nfunction update_bom_description_from_specs(frm) {\r\n    if (!frm.doc.name) {\r\n        frappe.msgprint('Please save the BOM first');\r\n        return;\r\n    }\r\n\r\n    frappe.show_alert({message: \"Updating BOM description from specs...\", indicator: \"blue\"});\r\n\r\n    // Get all BOM Item Specs for this BOM\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'BOM Item Spec',\r\n            filters: {'bom': frm.doc.name},\r\n            fields: [\r\n                'name', 'bom_item_id', 'item', 'item_group', 'gemstone', 'stone_treatment', \r\n                'merch_color_attribute', 'country_of_origin', 'cut', 'stone_pieces', 'setting_type', \r\n                'grade', 'avg_carat_weight', 'sku_carat_weight', 'metal_group', 'sku_metal_weight', \r\n                'avg_metal_weight', 'finding_pieces', 'length', 'weight_per_piece', 'length_uom', 'total_weight'\r\n            ]\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                build_bom_description_from_specs(frm, r.message);\r\n            } else {\r\n                // Fallback to BOM Item descriptions if no specs\r\n                build_bom_description_from_items(frm);\r\n            }\r\n        },\r\n        error: function(err) {\r\n            console.error(\"Error fetching BOM Item Specs:\", err);\r\n            frappe.msgprint(\"Error fetching specifications. Please try again.\");\r\n        }\r\n    });\r\n}\r\n\r\nfunction build_bom_description_from_specs(frm, bom_item_specs) {\r\n    let parts = [];\r\n    \r\n    // Add main BOM info\r\n    if (frm.doc.item_name) parts.push(`<b>${frm.doc.item_name}</b>`);\r\n    if (frm.doc.item_group) parts.push(`Item Group: ${frm.doc.item_group}`);\r\n    \r\n    // Group specs by item type for better organization\r\n    let stone_specs = [];\r\n    let metal_specs = [];\r\n    let finding_specs = [];\r\n    let other_specs = [];\r\n    \r\n    bom_item_specs.forEach(function(spec) {\r\n        if (spec.gemstone || spec.stone_pieces || spec.avg_carat_weight) {\r\n            stone_specs.push(spec);\r\n        } else if (spec.metal_group || spec.sku_metal_weight || spec.avg_metal_weight) {\r\n            metal_specs.push(spec);\r\n        } else if (spec.finding_pieces || spec.length || spec.weight_per_piece) {\r\n            finding_specs.push(spec);\r\n        } else {\r\n            other_specs.push(spec);\r\n        }\r\n    });\r\n    \r\n    // Add stone specifications\r\n    if (stone_specs.length > 0) {\r\n        let stone_desc = stone_specs.map(spec => {\r\n            let stone_parts = [];\r\n            if (spec.gemstone) stone_parts.push(spec.gemstone);\r\n            if (spec.cut) stone_parts.push(spec.cut);\r\n            if (spec.merch_color_attribute) stone_parts.push(spec.merch_color_attribute);\r\n            if (spec.grade) stone_parts.push(`Grade ${spec.grade}`);\r\n            if (spec.stone_pieces) stone_parts.push(`${spec.stone_pieces} pcs`);\r\n            if (spec.avg_carat_weight) stone_parts.push(`${spec.avg_carat_weight}ct`);\r\n            if (spec.country_of_origin) stone_parts.push(`(${spec.country_of_origin})`);\r\n            return stone_parts.join(' ');\r\n        }).filter(desc => desc.trim()).join(', ');\r\n        \r\n        if (stone_desc) parts.push(`Stones: ${stone_desc}`);\r\n    }\r\n    \r\n    // Add metal specifications\r\n    if (metal_specs.length > 0) {\r\n        let metal_desc = metal_specs.map(spec => {\r\n            let metal_parts = [];\r\n            if (spec.metal_group) metal_parts.push(spec.metal_group);\r\n            if (spec.avg_metal_weight) metal_parts.push(`${spec.avg_metal_weight}g`);\r\n            else if (spec.sku_metal_weight) metal_parts.push(`${spec.sku_metal_weight}g`);\r\n            return metal_parts.join(' ');\r\n        }).filter(desc => desc.trim()).join(', ');\r\n        \r\n        if (metal_desc) parts.push(`Metal: ${metal_desc}`);\r\n    }\r\n    \r\n    // Add finding/chain specifications\r\n    if (finding_specs.length > 0) {\r\n        let finding_desc = finding_specs.map(spec => {\r\n            let finding_parts = [];\r\n            if (spec.finding_pieces) finding_parts.push(`${spec.finding_pieces} findings`);\r\n            if (spec.length && spec.length_uom) finding_parts.push(`${spec.length}${spec.length_uom}`);\r\n            else if (spec.length) finding_parts.push(`${spec.length} length`);\r\n            if (spec.weight_per_piece) finding_parts.push(`${spec.weight_per_piece}g/pc`);\r\n            if (spec.total_weight) finding_parts.push(`${spec.total_weight}g total`);\r\n            return finding_parts.join(' ');\r\n        }).filter(desc => desc.trim()).join(', ');\r\n        \r\n        if (finding_desc) parts.push(`Findings: ${finding_desc}`);\r\n    }\r\n    \r\n    // Add other specifications\r\n    if (other_specs.length > 0) {\r\n        let other_desc = other_specs.map(spec => {\r\n            return spec.item || 'Component';\r\n        }).filter(desc => desc.trim()).join(', ');\r\n        \r\n        if (other_desc) parts.push(`Components: ${other_desc}`);\r\n    }\r\n    \r\n    // Add setting type if available\r\n    let setting_types = bom_item_specs.map(spec => spec.setting_type).filter(st => st);\r\n    if (setting_types.length > 0) {\r\n        let unique_settings = [...new Set(setting_types)];\r\n        parts.push(`Setting: ${unique_settings.join(', ')}`);\r\n    }\r\n    \r\n    // Add stone treatment if available\r\n    let treatments = bom_item_specs.map(spec => spec.stone_treatment).filter(st => st);\r\n    if (treatments.length > 0) {\r\n        let unique_treatments = [...new Set(treatments)];\r\n        parts.push(`Treatment: ${unique_treatments.join(', ')}`);\r\n    }\r\n    \r\n    // Update BOM description\r\n    let new_description = parts.join(' | ');\r\n    frm.set_value('description', new_description);\r\n    \r\n    frappe.show_alert({\r\n        message: __('BOM description updated from specifications'),\r\n        indicator: 'green'\r\n    });\r\n}\r\n\r\nfunction build_bom_description_from_items(frm) {\r\n    // Fallback: build description from BOM Items when no specs exist\r\n    let parts = [];\r\n    \r\n    if (frm.doc.item_name) parts.push(`<b>${frm.doc.item_name}</b>`);\r\n    if (frm.doc.item_group) parts.push(`Item Group: ${frm.doc.item_group}`);\r\n    \r\n    // Get unique item groups from BOM items\r\n    let item_groups = [];\r\n    let item_names = [];\r\n    \r\n    if (frm.doc.items) {\r\n        frm.doc.items.forEach(function(item) {\r\n            let item_group = item.custom_item_group || item.item_group;\r\n            if (item_group && !item_groups.includes(item_group)) {\r\n                item_groups.push(item_group);\r\n            }\r\n            \r\n            if (item.item_name && !item_names.includes(item.item_name)) {\r\n                item_names.push(item.item_name);\r\n            }\r\n        });\r\n    }\r\n    \r\n    if (item_groups.length > 0) {\r\n        parts.push(`Contains: ${item_groups.join(', ')}`);\r\n    }\r\n    \r\n    if (item_names.length > 0 && item_names.length <= 5) {\r\n        parts.push(`Items: ${item_names.slice(0, 5).join(', ')}`);\r\n    }\r\n    \r\n    let new_description = parts.join(' | ');\r\n    frm.set_value('description', new_description);\r\n    \r\n    frappe.show_alert({\r\n        message: __('BOM description updated from item details'),\r\n        indicator: 'blue'\r\n    });\r\n}\r\n\r\n// ============ SPEC INTEGRATION FUNCTIONS ============\r\n\r\nfunction add_spec_integration_buttons(frm) {\r\n    // Add refresh description button\r\n    frm.add_custom_button(__('Refresh BOM Description'), function() {\r\n        update_bom_description_from_specs(frm);\r\n    }, __(\"Specs\"));\r\n    // Button to refresh all BOM Item descriptions from their specs\r\n    frm.add_custom_button(__('Refresh All Item Descriptions from Specs'), function() {\r\n        update_all_bom_item_descriptions_from_specs(frm.doc.name);\r\n    }, __(\"Specs\"));\r\n    \r\n    // Button to create specs for items that don't have them\r\n    frm.add_custom_button(__('Create Missing Specs'), function() {\r\n        create_missing_bom_item_specs(frm);\r\n    }, __(\"Specs\"));\r\n    \r\n    // Button to view all specs for this BOM\r\n    frm.add_custom_button(__('View All Specs'), function() {\r\n        view_all_bom_item_specs(frm.doc.name);\r\n    }, __(\"Specs\"));\r\n}\r\n\r\nfunction update_all_bom_item_descriptions_from_specs(bom_name) {\r\n    if (!bom_name) {\r\n        frappe.msgprint('BOM name is required');\r\n        return;\r\n    }\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'BOM Item Spec',\r\n            filters: {'bom': bom_name},\r\n            fields: [\r\n                'name', 'bom_item_id', 'item', 'item_group', 'gemstone', 'stone_treatments', \r\n                'grade', 'cut', 'setting_type', 'merch_color_attribute', \r\n                'stone_pieces', 'country_of_origin', 'sku_carat_weight', \r\n                'avg_carat_weight', 'avg_metal_weight', 'sku_metal_weight',\r\n                'length', 'weight_per_piece', 'metal_group'\r\n            ]\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                let updated_count = 0;\r\n                const total_specs = r.message.length;\r\n                \r\n                frappe.show_alert({\r\n                    message: `Updating ${total_specs} BOM Item descriptions...`,\r\n                    indicator: \"blue\"\r\n                });\r\n                \r\n                r.message.forEach((spec, index) => {\r\n                    setTimeout(() => {\r\n                        const description = build_description_from_spec_data(spec);\r\n                        \r\n                        frappe.call({\r\n                            method: 'frappe.client.set_value',\r\n                            args: {\r\n                                doctype: 'BOM Item',\r\n                                name: spec.bom_item_id,\r\n                                fieldname: 'description',\r\n                                value: description\r\n                            },\r\n                            callback: function() {\r\n                                updated_count++;\r\n                                if (updated_count === total_specs) {\r\n                                    frappe.show_alert({\r\n                                        message: `Updated ${updated_count} BOM Item descriptions from specs`,\r\n                                        indicator: \"green\"\r\n                                    });\r\n                                    \r\n                                    // Refresh the current form\r\n                                    cur_frm.refresh_field('items');\r\n                                }\r\n                            }\r\n                        });\r\n                    }, index * 100);\r\n                });\r\n            } else {\r\n                frappe.msgprint('No BOM Item Specs found for this BOM');\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction build_description_from_spec_data(spec) {\r\n    let parts = [];\r\n\r\n    if (spec.item) parts.push(`Item: ${spec.item}`);\r\n    if (spec.item_group) parts.push(`Item Group: ${spec.item_group}`);\r\n    if (spec.gemstone) parts.push(`Gemstone: ${spec.gemstone}`);\r\n    //if (spec.stone_treatment) parts.push(`Treatment: ${spec.stone_treatment}`);\r\n\t// Handle stone_treatments multi-select table\r\n    if (spec.stone_treatments && spec.stone_treatments.length > 0) {\r\n        const treatments = spec.stone_treatments.map(t => t.stone_treatment).filter(t => t).join(', ');\r\n        if (treatments) {\r\n            parts.push(`Stone Treatments: ${treatments}`);\r\n        }\r\n    }\r\n    if (spec.grade) parts.push(`Grade: ${spec.grade}`);\r\n    if (spec.cut) parts.push(`Cut: ${spec.cut}`);\r\n    if (spec.setting_type) parts.push(`Setting Type: ${spec.setting_type}`);\r\n    if (spec.merch_color_attribute) parts.push(`Merch Color: ${spec.merch_color_attribute}`);\r\n    if (spec.stone_pieces) parts.push(`Pieces: ${spec.stone_pieces}`);\r\n    if (spec.country_of_origin) parts.push(`Country: ${spec.country_of_origin}`);\r\n    if (spec.sku_carat_weight) parts.push(`SKU Weight: ${spec.sku_carat_weight}`);\r\n    if (spec.avg_carat_weight) parts.push(`Avg Carat: ${spec.avg_carat_weight}`);\r\n    if (spec.avg_metal_weight) parts.push(`Metal Weight: ${spec.avg_metal_weight}`);\r\n    if (spec.sku_metal_weight) parts.push(`SKU Metal Weight: ${spec.sku_metal_weight}`);\r\n    if (spec.length) parts.push(`Length: ${spec.length}`);\r\n    if (spec.weight_per_piece) parts.push(`Weight/Piece: ${spec.weight_per_piece}`);\r\n    if (spec.metal_group) parts.push(`Metal Group: ${spec.metal_group}`);\r\n\r\n    return parts.join(' | ');\r\n}\r\n\r\nfunction create_missing_bom_item_specs(frm) {\r\n    if (!frm.doc.items || frm.doc.items.length === 0) {\r\n        frappe.msgprint('No BOM Items found');\r\n        return;\r\n    }\r\n    \r\n    // Get existing specs\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'BOM Item Spec',\r\n            filters: {'bom': frm.doc.name},\r\n            fields: ['bom_item_id']\r\n        },\r\n        callback: function(r) {\r\n            const existing_specs = r.message ? r.message.map(spec => spec.bom_item_id) : [];\r\n            \r\n            // Find BOM Items without specs\r\n            const items_without_specs = frm.doc.items.filter(item => \r\n                !existing_specs.includes(item.name)\r\n            );\r\n            \r\n            if (items_without_specs.length === 0) {\r\n                frappe.msgprint('All BOM Items already have specs');\r\n                return;\r\n            }\r\n            \r\n            frappe.show_alert({\r\n                message: `Creating specs for ${items_without_specs.length} items...`,\r\n                indicator: \"blue\"\r\n            });\r\n            \r\n            let created_count = 0;\r\n            \r\n            items_without_specs.forEach((item, index) => {\r\n                setTimeout(() => {\r\n                    create_spec_for_bom_item(frm.doc.name, item).then(() => {\r\n                        created_count++;\r\n                        if (created_count === items_without_specs.length) {\r\n                            frappe.show_alert({\r\n                                message: `Created ${created_count} BOM Item Specs`,\r\n                                indicator: \"green\"\r\n                            });\r\n                        }\r\n                    });\r\n                }, index * 200);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n// REPLACE the create_spec_for_bom_item function with this corrected version:\r\n\r\nfunction create_spec_for_bom_item(bom_name, bom_item) {\r\n    return new Promise((resolve, reject) => {\r\n        \r\n        const spec_doc = {\r\n            doctype: 'BOM Item Spec',\r\n            bom: bom_name,\r\n            bom_item_id: bom_item.name,\r\n            item: bom_item.item_code,\r\n            \r\n            // Map custom fields if they exist\r\n            item_group: bom_item.custom_item_group,\r\n            gemstone: bom_item.custom_gemstone,\r\n            grade: bom_item.custom_grade,\r\n            cut: bom_item.custom_cut,\r\n            setting_type: bom_item.custom_setting_type,\r\n            merch_color_attribute: bom_item.custom_merch_color__attribute,\r\n            stone_pieces: bom_item.custom_stone_pieces,\r\n            country_of_origin: bom_item.custom_country_of_origin,\r\n            avg_carat_weight: bom_item.custom_avg_carat_weight,\r\n            sku_carat_weight: bom_item.custom_sku_weight,\r\n            metal_group: bom_item.custom_metal_group,\r\n            avg_metal_weight: bom_item.custom_metal_weight,\r\n            sku_metal_weight: bom_item.custom_sku_metal_weight,\r\n            length: bom_item.custom_length,\r\n            weight_per_piece: bom_item.custom_weight_perpiece\r\n        };\r\n        \r\n        // Handle stone_treatment conversion: single field → multi-select table\r\n        if (bom_item.custom_stone_treatment) {\r\n            spec_doc.stone_treatments = [\r\n                {\r\n                    stone_treatment: bom_item.custom_stone_treatment\r\n                }\r\n            ];\r\n        }\r\n        \r\n        frappe.call({\r\n            method: 'frappe.client.insert',\r\n            args: {\r\n                doc: spec_doc\r\n            },\r\n            callback: function(insert_r) {\r\n                if (insert_r.message) {\r\n                    console.log(`Created spec: ${insert_r.message.name}`);\r\n                    resolve(insert_r.message);\r\n                } else {\r\n                    reject('Failed to create spec');\r\n                }\r\n            },\r\n            error: function(err) {\r\n                console.error('Error creating spec:', err);\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction view_all_bom_item_specs(bom_name) {\r\n    frappe.route_options = {\r\n        'bom': bom_name\r\n    };\r\n    frappe.set_route('List', 'BOM Item Spec');\r\n}\r\n\r\n// ============ CALCULATION FUNCTIONS ============\r\n\r\nfunction calculate_ext_qty_and_weight(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    const stonePieces = flt(row.custom_stone_pieces);\r\n    const qty = flt(row.qty);\r\n    const metalWeight = flt(row.custom_metal_weight);\r\n\r\n    const extQty = stonePieces * qty;\r\n    const skuWeight = metalWeight * 0.8;\r\n\r\n    frappe.model.set_value(cdt, cdn, 'custom_ext_qty_required', extQty);\r\n    frappe.model.set_value(cdt, cdn, 'custom_sku_metal_weight', skuWeight);\r\n\r\n    calculate_net_balance(frm, cdt, cdn);\r\n}\r\n\r\nfunction calculate_net_balance(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    const extQty = flt(row.custom_ext_qty_required);\r\n    const onHand = flt(row.custom_oh);\r\n    const netBalance = extQty - onHand;\r\n\r\n    frappe.model.set_value(cdt, cdn, 'custom_net_balance_required', netBalance);\r\n}\r\n\r\nfunction calculate_qty_for_stones(frm, cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n\r\n    let new_qty = 0;\r\n\r\n    if (row.custom_item_group === \"Stone\") {\r\n        if (row.uom === \"Carat\") {\r\n            new_qty = flt(row.custom_avg_carat_weight);\r\n        } else {\r\n            new_qty = flt(row.custom_stone_pieces);\r\n        }\r\n    } else if (row.custom_item_group === \"Pearl\") {\r\n        new_qty = flt(row.custom_avg_carat_weight);\r\n    }\r\n\r\n    if (new_qty && flt(row.qty) !== new_qty) {\r\n        frappe.model.set_value(cdt, cdn, 'qty', new_qty);\r\n    }\r\n}\r\n\r\n\r\nfunction calculate_selling_amount(cdt, cdn) {\r\n    let row = locals[cdt][cdn];\r\n    if (row.qty && row.custom_selling_rate) {\r\n        row.custom_selling_amount = row.qty * row.custom_selling_rate;\r\n        frappe.model.set_value(cdt, cdn, 'custom_selling_amount', row.custom_selling_amount);\r\n    }\r\n}\r\n\r\nfunction get_uom_for_group(group) {\r\n    if ([\"Stone\", \"Pearl\", \"Bead\"].includes(group)) return 'Carat';\r\n    if (group === \"Metal\") return 'Gram';\r\n    return 'Piece';\r\n}\r\n\r\nfrappe.ui.form.on('BOM', {\r\n    onload_post_render: function(frm) {\r\n        update_bom_item_uoms(frm);\r\n    },\r\n    refresh: function(frm) {\r\n        update_bom_item_uoms(frm);\r\n    }\r\n});\r\n\r\nfunction update_bom_item_uoms(frm) {\r\n    (frm.doc.items || []).forEach(row => {\r\n        row.uom = get_uom_for_group(row.custom_item_group);\r\n    });\r\n    frm.refresh_field('items');\r\n}\r\n\r\nfrappe.ui.form.on('BOM Item', {\r\n    custom_item_group: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        const uom = get_uom_for_group(row.custom_item_group);\r\n        frappe.model.set_value(cdt, cdn, 'uom', uom);\r\n    }\r\n});\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.121594",
  "module": "espresso",
  "name": "Progress Bar in Purchase Order",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    refresh: function(frm) {\r\n        const steps = [\r\n            { name: 'Purchase Order', condition: frm.doc.docstatus === 1 },\r\n            { name: 'Purchase Receipt', condition: frm.doc.per_received > 0 },\r\n            { name: 'Purchase Invoice', condition: frm.doc.per_billed > 0 },\r\n            { name: 'Payment Entry', condition: frm.doc.status === 'Paid' }\r\n        ];\r\n\r\n        let progressHTML = `\r\n            <div style=\"display: flex; align-items: center; justify-content: space-between; margin: 20px 0; position: relative;\">\r\n        `;\r\n\r\n        steps.forEach((step, index) => {\r\n            const isActive = step.condition;\r\n            const dotColor = isActive ? '#3498db' : '#ccc';\r\n            const textColor = isActive ? '#000' : '#888';\r\n\r\n            progressHTML += `\r\n                <div style=\"flex: 1; text-align: center; position: relative;\">\r\n                    <div style=\"\r\n                        width: 16px;\r\n                        height: 16px;\r\n                        border-radius: 50%;\r\n                        background-color: ${dotColor};\r\n                        margin: 0 auto;\r\n                        position: relative;\r\n                        z-index: 2;\r\n                    \"></div>\r\n                    <div style=\"margin-top: 8px; font-size: 12px; color: ${textColor}; white-space: nowrap;\">${step.name}</div>\r\n                    ${index < steps.length - 1 ? `\r\n                        <div style=\"\r\n                            position: absolute;\r\n                            top: 8px;\r\n                            left: 50%;\r\n                            width: 100%;\r\n                            height: 2px;\r\n                            background-color: #ccc;\r\n                            z-index: 1;\r\n                        \"></div>` : ''}\r\n                </div>\r\n            `;\r\n        });\r\n\r\n        progressHTML += '</div>';\r\n\r\n        frm.fields_dict.custom_progress_status.$wrapper.html(progressHTML);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customers Order Sheets",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.472536",
  "module": "espresso",
  "name": "Ship Date formula (SK)",
  "script": "frappe.ui.form.on('Customer Order Sheet Item', {\n    eta(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.eta) {\n            let eta_date = frappe.datetime.str_to_obj(row.eta);\n            row.ship_date = frappe.datetime.obj_to_str(\n                frappe.datetime.add_days(eta_date, -21)\n            );\n        } else {\n            row.ship_date = null;\n        }\n        frm.refresh_field('items');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customers Order Sheets",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.499049",
  "module": "espresso",
  "name": "Customer Order Sheet Items - Amount calculation (SK)",
  "script": "frappe.ui.form.on('Customer Order Sheet Item', {\n    qty(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        row.amount = (row.qty || 0) * (row.rate || 0);\n        frm.refresh_field('items');\n    },\n\n    rate(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        row.amount = (row.qty || 0) * (row.rate || 0);\n        frm.refresh_field('items');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.174449",
  "module": "espresso",
  "name": "Customer Order Sheet Items - Add Image in List view (SK)",
  "script": "frappe.ui.form.on('Customer Order Sheet Item', {\n    item_code(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.item_code) {\n            frappe.db.get_value(\"Item\", row.item_code, \"image\", (r) => {\n                if (r.image) {\n                    row.item_image_preview = `<img src=\"${r.image}\" style=\"height: 40px\">`;\n                    frm.refresh_field(\"items\");\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.654788",
  "module": "espresso",
  "name": "Customer Worksheet",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    \r\n    setup:function(frm,cdt,cdn){\r\n    let row = locals[cdt][cdn]\r\n    frappe.call ({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: row.custom_gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.data) {\r\n                         const allowed_countries = r.data.map(entry => entry[1]);\r\n                         let unique_countries = [...new Set(allowed_countries)];\r\n                         console.log(unique_countries);\r\n                         cur_frm.fields_dict.bom_items.grid.update_docfield_property(\r\n                                'custom_country_of_origin',\r\n                                'options',\r\n                                  unique_countries\r\n                            );\r\n                       \r\n                    }\r\n                }\r\n            });\r\n    },\r\n    // refresh: function(frm) {\r\n    // frm.set_value('show_all', 0);   \r\n    // frm.set_value('bom_id', '');    \r\n    // },,\r\n    onload: function(frm) {\r\n        frm.set_query('bom_id', () => {\r\n            const item_codes = (frm.doc.customer_worksheet_items || []).map(row => row.item_code);\r\n            if (!item_codes.length) return {};\r\n\r\n            return {\r\n                filters: {\r\n                    item: ['in', item_codes],\r\n                    is_active: 1,\r\n                    is_default: 1\r\n                }\r\n            };\r\n        });\r\n    },\r\n    item_group: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n\r\n        if ([\"Stone\", \"Pearl\", \"Bead\"].includes(row.item_group)) {\r\n            frappe.model.set_value(cdt, cdn, 'default_stock_uom', 'Carat');\r\n        } else if (row.item_group === \"Metal\") {\r\n            frappe.model.set_value(cdt, cdn, 'default_stock_uom', 'Gram');\r\n        } else {\r\n            frappe.model.set_value(cdt, cdn, 'default_stock_uom', 'Piece');\r\n        }\r\n    },\r\n\r\n\r\n     bom_id: function(frm) {\r\n        toggle_bom_total_html(frm);\r\n        const bomId = frm.doc.bom_id;\r\n\r\n        if (!bomId) {\r\n            frm.doc.customer_bom_items = (frm.doc.customer_bom_items || []).filter(row => row.bom_no !== frm.__last_bom_id);\r\n            frm.refresh_field(\"customer_bom_items\");\r\n            return;\r\n        }\r\n\r\n        frm.__last_bom_id = bomId;\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'BOM',\r\n                name: bomId\r\n            },\r\n            callback: function(r) {\r\n                if (!r.message || !r.message.items) return;\r\n\r\n                frm.clear_table('customer_bom_items');\r\n                r.message.items.forEach(function(item) {\r\n                    let row = frm.add_child('customer_bom_items');\r\n                    row.item_code = item.item_code;\r\n                    row.item_name = item.item_name;\r\n                    row.bom_no = bomId;\r\n                    row.qty = item.qty || 1;\r\n                    row.uom = item.uom;\r\n                    row.rate = item.rate || 0;\r\n                    row.amount = item.amount || 0;\r\n                    row.description = item.description;\r\n                    row.item_group = item.custom_item_group || '';\r\n                    row.custom_item_group = item.custom_item_group;\r\n                    row.custom_selling_rate = item.custom_selling_rate || '';\r\n                    row.custom_selling_amount = item.custom_selling_amount || '';\r\n                    row.custom_gemstone = item.custom_gemstone;\r\n                    row.custom_stone_treatment = item.custom_stone_treatment;\r\n                    row.custom_merch_color__attribute = item.custom_merch_color__attribute;\r\n                    row.custom_country_of_origin = item.custom_country_of_origin;\r\n                    row.custom_grade = item.custom_grade;\r\n                    row.custom_stone_pieces = item.custom_stone_pieces;\r\n                    row.custom_avg_carat_weight = item.custom_avg_carat_weight;\r\n                    row.custom_sku_carat_weight = item.custom_sku_carat_weight;\r\n                    row.custom_cut = item.custom_cut;\r\n                    row.custom_setting_type = item.custom_setting_type;\r\n                    row.custom_metal_weight = item.custom_metal_weight;\r\n                    row.custom_sku_metal_weight = item.custom_sku_metal_weight;\r\n                    row.custom_metal_group = item.custom_metal_group;\r\n                    row.custom_sku_weight = item.custom_sku_weight;\r\n                    row.custom_ext_qty_required = item.custom_ext_qty_required;\r\n                    row.custom_oh = item.custom_oh;\r\n                    row.custom_net_balance_required = item.custom_net_balance_required;\r\n                    row.custom_our_responsibility = item.custom_our_responsibility;\r\n                });\r\n\r\n                frm.refresh_field('customer_bom_items');\r\n            }\r\n        });\r\n    },\r\n    \r\n     show_all: function(frm) {\r\n        if (!frm.doc.show_all) {\r\n            frm.clear_table('customer_bom_items');\r\n            frm.set_value('bom_id', null);\r\n            frm.refresh_field('customer_bom_items');\r\n            return;\r\n        }\r\n    \r\n        frm.clear_table('customer_bom_items');\r\n    \r\n        \r\n        const uniqueItemCodes = [...new Set((frm.doc.customer_worksheet_items || []).map(row => row.item_code))];\r\n    \r\n        const bomFetchPromises = uniqueItemCodes.map(item_code => {\r\n            return frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'BOM',\r\n                    filters: {\r\n                        item: item_code,\r\n                        is_active: 1,\r\n                        is_default: 1,\r\n                        // docstatus: 1\r\n                    },\r\n                    limit_page_length: 1,\r\n                    order_by: 'creation desc'\r\n                }\r\n            });\r\n        });\r\n    \r\n        Promise.all(bomFetchPromises).then(results => {\r\n            const bomCalls = [];\r\n    \r\n            results.forEach(bomList => {\r\n                if (bomList.message && bomList.message.length > 0) {\r\n                    const bomName = bomList.message[0].name;\r\n                    bomCalls.push(\r\n                        frappe.call({\r\n                            method: 'frappe.client.get',\r\n                            args: {\r\n                                doctype: 'BOM',\r\n                                name: bomName\r\n                            }\r\n                        })\r\n                    );\r\n                }\r\n            });\r\n    \r\n            Promise.all(bomCalls).then(bomResults => {\r\n                const addedItems = new Set(); \r\n    \r\n                bomResults.forEach(res => {\r\n                    if (res.message && res.message.items) {\r\n                        res.message.items.forEach(item => {\r\n                            const uniqueKey = `${res.message.name}::${item.item_code}`;\r\n                            if (addedItems.has(uniqueKey)) return;\r\n    \r\n                            let row = frm.add_child('customer_bom_items');\r\n                            row.item_code = item.item_code;\r\n                            row.item_name = item.item_name;\r\n                            row.custom_item_group = item.custom_item_group;\r\n                            row.bom_no = res.message.name;\r\n                            row.custom_our_responsibility = item.custom_our_responsibility;\r\n                            row.qty = item.qty;\r\n                            row.uom = item.uom;\r\n                            row.rate = item.rate;\r\n                            row.amount = item.amount || 0;\r\n                            row.custom_selling_rate = item.custom_selling_rate || 0;\r\n                            row.custom_selling_amount = item.custom_selling_amount || 0;\r\n                            row.custom_gemstone = item.custom_gemstone;\r\n                            row.custom_stone_treatment = item.custom_stone_treatment;\r\n                            row.custom_merch_color__attribute = item.custom_merch_color__attribute;\r\n                            row.custom_country_of_origin = item.custom_country_of_origin;\r\n                            row.custom_avg_carat_weight = item.custom_avg_carat_weight;\r\n                            row.custom_sku_weight = item.custom_sku_weight;\r\n                            row.custom_grade = item.custom_grade;\r\n                            row.custom_cut = item.custom_cut;\r\n                            row.custom_setting_type = item.custom_setting_type;\r\n                            row.custom_stone_pieces = item.custom_stone_pieces;\r\n                            row.custom_metal_weight = item.custom_metal_weight;\r\n                            row.custom_sku_metal_weight = item.custom_sku_metal_weight;\r\n                            row.custom_metal_group = item.custom_metal_group;\r\n                            row.description = item.description;\r\n    \r\n                            addedItems.add(uniqueKey);\r\n                        });\r\n                    }\r\n                });\r\n    \r\n                frm.refresh_field('customer_bom_items');\r\n            });\r\n        });\r\n    }\r\n});\r\n\r\nfunction toggle_bom_total_html(frm) {\r\n    const show = !!frm.doc.bom_id;\r\n\r\n    if (frm.fields_dict.bom_item_total && frm.fields_dict.bom_item_total.$wrapper) {\r\n        frm.fields_dict.bom_item_total.$wrapper.toggle(show);\r\n    }\r\n}\r\n\r\n\r\nfrappe.ui.form.on('Customer Worksheet', {\r\n    onload: function(frm) {\r\n        update_total_items(frm);\r\n    },\r\n\r\n\r\n    customer_worksheet_items_add: function(frm) {\r\n        update_total_items(frm);\r\n    },\r\n\r\n    customer_worksheet_items_remove: function(frm) {\r\n        update_total_items(frm);\r\n    },\r\n\r\n    validate: function(frm) {\r\n        update_total_items(frm);\r\n    }\r\n});\r\n\r\n\r\n\r\nfunction update_total_items(frm) {\r\n    const items = frm.doc.customer_worksheet_items || [];\r\n\r\n    const totalItems = items.length;\r\n    const totalBOMs = items.filter(item => item.default_bom).length;\r\n    frm.set_value('total_items', totalItems);\r\n    frm.set_value('total_boms', totalBOMs);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// ===============Calculation=============\r\n\r\nfrappe.ui.form.on('Customer Worksheet', {\r\n    onload_post_render: function(frm) {\r\n        calculate_total_qty(frm);\r\n    },\r\n\r\n    validate: function(frm) {\r\n        calculate_total_qty(frm);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Customer Worksheet Items', {\r\n    qty: function(frm, cdt, cdn) {\r\n        calculate_total_qty(frm);\r\n        update_amount(frm, cdt, cdn);\r\n    },\r\n\r\n    rate: function(frm, cdt, cdn) {\r\n        update_amount(frm, cdt, cdn);\r\n    },\r\n\r\n    customer_worksheet_items_add: calculate_total_qty,\r\n    customer_worksheet_items_remove: calculate_total_qty\r\n});\r\n\r\nfunction update_amount(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    row.amount = flt(row.qty) * flt(row.rate);\r\n    refresh_field('amount', row.name, row.parentfield);\r\n}\r\n\r\nfunction calculate_total_qty(frm) {\r\n    let total = 0;\r\n    (frm.doc.customer_worksheet_items || []).forEach(row => {\r\n        total += flt(row.qty);\r\n    });\r\n    frm.set_value('total_qty', total);\r\n}\r\n\r\nfrappe.ui.form.on('Customer Worksheet BOM Items', {\r\n\r\n    \r\n    custom_stone_pieces: calculate_qty_and_all_items,\r\n    qty: calculate_all_items,\r\n    rate: calculate_all_items,\r\n    custom_metal_weight: calculate_qty_and_all_items,\r\n    custom_avg_carat_weight: calculate_qty_and_all_items,\r\n    uom: calculate_qty_and_all_items,\r\n    custom_item_group: calculate_qty_and_all_items,\r\n    custom_ext_qty_required: calculate_net_balance_items,\r\n    custom_oh: calculate_net_balance_items,\r\n    custom_selling_rate: calculate_all_items, \r\n\r\n\r\n    custom_gemstone: function(frm, cdt, cdn) {\r\n        update_country_of_origin_options_items(frm, cdt, cdn);\r\n    },\r\n\r\n    custom_country_of_origin: function(frm, cdt, cdn) {\r\n        update_country_of_origin_options_items(frm, cdt, cdn);\r\n    },\r\n\r\n    form_render: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        update_country_of_origin_options_items(frm, cdt, cdn);\r\n        if (row.custom_coutry) {\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_coutry);\r\n        }\r\n    },\r\n\r\n    custom_coutry: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        if (row.custom_coutry) {\r\n            frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_coutry);\r\n        }\r\n    }\r\n});\r\n\r\nfunction calculate_qty_and_all_items(frm, cdt, cdn) {\r\n    calculate_qty_items(frm, cdt, cdn);\r\n    calculate_all_items(frm, cdt, cdn);\r\n}\r\n\r\nfunction calculate_qty_items(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    let new_qty = 0;\r\n\r\n    const item_group = (row.custom_item_group || \"\").trim();\r\n    const uom = (row.uom || \"\").toLowerCase();\r\n\r\n    if (item_group === \"Stone\") {\r\n        if (uom === \"carat\") {\r\n            new_qty = flt(row.custom_avg_carat_weight);\r\n        } else {\r\n            new_qty = flt(row.custom_stone_pieces);\r\n        }\r\n    } else if (item_group === \"Pearl\") {\r\n        new_qty = flt(row.custom_avg_carat_weight);\r\n    } else if (item_group === \"Metal\") {\r\n        new_qty = flt(row.custom_metal_weight);\r\n    }\r\n\r\n    if (flt(row.qty) !== flt(new_qty)) {\r\n        frappe.model.set_value(cdt, cdn, 'qty', new_qty);\r\n    }\r\n}\r\n\r\nfunction calculate_all_items(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    const qty = flt(row.qty);\r\n    const pieces = flt(row.custom_stone_pieces);\r\n    const weight = flt(row.custom_metal_weight);\r\n    const rate = flt(row.rate);\r\n    const sellingRate = flt(row.custom_selling_rate);\r\n    const sellingAmount = sellingRate * qty;\r\n\r\n    const onHand = flt(row.custom_oh);\r\n    const avgCarat = flt(row.custom_avg_carat_weight);\r\n    const uom = (row.uom || \"\").toLowerCase();\r\n\r\n    const extQty = pieces * qty;\r\n    const skuWeight = weight * 0.8;\r\n    const netBalance = extQty - onHand;\r\n\r\n    const amount = rate * qty;\r\n\r\n    if (flt(row.custom_ext_qty_required) !== extQty)\r\n        frappe.model.set_value(cdt, cdn, 'custom_ext_qty_required', extQty);\r\n\r\n    if (flt(row.custom_sku_metal_weight) !== skuWeight)\r\n        frappe.model.set_value(cdt, cdn, 'custom_sku_metal_weight', skuWeight);\r\n\r\n    if (flt(row.custom_net_balance_required) !== netBalance)\r\n        frappe.model.set_value(cdt, cdn, 'custom_net_balance_required', netBalance);\r\n\r\n    if (flt(row.amount) !== amount)\r\n        frappe.model.set_value(cdt, cdn, 'amount', amount);\r\n\r\n    if (flt(row.custom_selling_amount) !== sellingAmount)\r\n        frappe.model.set_value(cdt, cdn, 'custom_selling_amount', sellingAmount);\r\n}\r\n\r\n\r\n\r\n\r\nfunction calculate_net_balance_items(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    const extQty = flt(row.custom_ext_qty_required);\r\n    const onHand = flt(row.custom_oh);\r\n    const netBalance = extQty - onHand;\r\n\r\n    frappe.model.set_value(cdt, cdn, 'custom_net_balance_required', netBalance);\r\n}\r\n\r\nfunction update_country_of_origin_options_items(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    const grid = frm.fields_dict[\"customer_bom_items\"].grid;\r\n\r\n    if (!row.custom_gemstone) {\r\n        frappe.meta.get_docfield(\"Customer Worksheet BOM Items\", \"custom_country_of_origin\").get_query = () => ({});\r\n        frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n        grid.refresh();\r\n        return;\r\n    }\r\n\r\n    frappe.call({\r\n        method: \"get_country_of_origin\",\r\n        args: {\r\n            gemstone: row.custom_gemstone\r\n        },\r\n        callback: function (r) {\r\n            if (r.data) {\r\n                const countries = [...new Set(r.data.map(entry => entry[1]))];\r\n                grid.update_docfield_property(\"custom_country_of_origin\", \"options\", countries);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfrappe.ui.form.on('Customer Worksheet', {\r\n    item_name: update_description,\r\n    item_group: update_description,\r\n    gst_hsn_code: update_description,\r\n    brand: update_description,\r\n    custom_customer_sku: update_description,\r\n    default_stock_uom: update_description,\r\n    custom_vendor_product_id: update_description,\r\n\r\n    custom_gemstone: update_description,\r\n    custom_shape: update_description,\r\n    custom_composition: update_description,\r\n    custom_form: update_description,\r\n    custom_dimensions: update_description,\r\n    custom_color: update_description,\r\n\r\n    refresh: function(frm) {\r\n        update_description(frm);\r\n        toggle_bom_total_html(frm);\r\n    }\r\n});\r\n\r\nfunction update_description(frm) {\r\n    let parts = [];\r\n    let std_desc = frm.doc.description || \"\";\r\n    let lastPipeIndex = std_desc.lastIndexOf('|');\r\n    let additional_desc;\r\n\r\n    if (lastPipeIndex !== -1) {\r\n        additional_desc = std_desc.slice(lastPipeIndex + 1).trim();\r\n    } else {\r\n        additional_desc = std_desc.trim();\r\n    }\r\n\r\n    if (frm.doc.item_name) parts.push(`<b>${frm.doc.item_name}</b>`);\r\n    if (frm.doc.item_group) parts.push(`Item Group: ${frm.doc.item_group}`);\r\n    if (frm.doc.gst_hsn_code) parts.push(`HSN/SAC: ${frm.doc.gst_hsn_code}`);\r\n    if (frm.doc.brand) parts.push(`Brand: ${frm.doc.brand}`);\r\n    if (frm.doc.custom_customer_sku) parts.push(`Customer SKU: ${frm.doc.custom_customer_sku}`);\r\n    if (frm.doc.stock_uom) parts.push(`Stock UOM: ${frm.doc.default_stock_uom}`);\r\n    if (frm.doc.custom_vendor_product_id) parts.push(`Vendor Product ID: ${frm.doc.custom_vendor_product_id}`);\r\n\r\n    if (frm.doc.custom_gemstone) parts.push(`Gemstone: ${frm.doc.custom_gemstone}`);\r\n    if (frm.doc.custom_shape) parts.push(`Shape: ${frm.doc.custom_shape}`);\r\n    if (frm.doc.custom_composition) parts.push(`Composition: ${frm.doc.custom_composition}`);\r\n    if (frm.doc.custom_form) parts.push(`Form: ${frm.doc.custom_form}`);\r\n    if (frm.doc.custom_dimensions) parts.push(`Dimensions: ${frm.doc.custom_dimensions}`);\r\n    if (frm.doc.custom_color) parts.push(`Color: ${frm.doc.custom_color}`);\r\n\r\n    frm.set_value(\"description\", parts.join(\" | \"));\r\n    frm.refresh_field(\"description\");\r\n}\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Customer Worksheet BOM Creator Items', {\r\n    custom_item_group: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n\r\n        if ([\"Stone\", \"Pearl\", \"Bead\"].includes(row.custom_item_group)) {\r\n            frappe.model.set_value(cdt, cdn, 'uom', 'Carat');\r\n        } else if (row.custom_item_group === \"Metal\") {\r\n            frappe.model.set_value(cdt, cdn, 'uom', 'Gram');\r\n        } else {\r\n            frappe.model.set_value(cdt, cdn, 'uom', 'Piece');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.393826",
  "module": "espresso",
  "name": "Customer WorkSheet Automation",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    refresh(frm) {\r\n        toggle_create_so_button(frm);\r\n        ['customer_bom_items'].forEach(field => {\r\n            frm.clear_table(field);\r\n            frm.refresh_field(field);\r\n        });\r\n\r\n    },\r\n\r\n    insert_vendor(frm) {\r\n        const { factory_vendor, delivery_date, order_type } = frm.doc;\r\n\r\n        if (!factory_vendor && !order_type && !delivery_date) {\r\n            return frappe.msgprint(__('Please fill at least one of: Factory Vendor, Order Type, or Delivery Date.'));\r\n        }\r\n\r\n        update_child_table(frm, 'customer_bom_items', row => {\r\n            if (factory_vendor) row.custom_supplier = factory_vendor;\r\n        });\r\n\r\n        update_child_table(frm, 'customer_worksheet_items', row => {\r\n            if (delivery_date) row.eta = delivery_date;\r\n            if (order_type) row.order_type = order_type;\r\n        });\r\n    },\r\n    // onload(frm) {\r\n    //     frm.fields_dict.sales_order.df.options = 'Sales Order';\r\n    //     frm.fields_dict.sales_order.df.only_select = 1;\r\n    //     frm.fields_dict.sales_order.refresh();\r\n    // },\r\n\r\n    // before_save(frm) {\r\n    //     [ 'customer_bom_items'].forEach(field => {\r\n    //         frm.clear_table(field);\r\n    //         frm.refresh_field(field);\r\n    //     });\r\n    //     frm.set_value('show_all', 0);\r\n    //     frm.set_value('bom_id', '')\r\n    // },\r\n\r\n    clear_values(frm) {\r\n        frm.set_value({\r\n            factory_vendor: null,\r\n            order_type: null,\r\n            delivery_date: null\r\n        });\r\n\r\n        ['customer_bom_items', 'customer_worksheet_items'].forEach(table => {\r\n            update_child_table(frm, table, row => {\r\n                if (table === 'customer_bom_items') row.custom_supplier = null;\r\n                else {\r\n                    row.order_type = null;\r\n                    row.eta = null;\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    fetch_item_with_bom: function(frm) {\r\n        const raw_items = (frm.doc.customer_worksheet_items || []).filter(row => !row.default_bom);\r\n    \r\n        const unique_items_map = {};\r\n        const items_without_bom = [];\r\n    \r\n        raw_items.forEach(row => {\r\n            if (!unique_items_map[row.item_code]) {\r\n                unique_items_map[row.item_code] = true;\r\n                items_without_bom.push(row);\r\n            }\r\n        });\r\n    \r\n        if (items_without_bom.length === 0) {\r\n            frappe.msgprint(\"All items already have a BOM set in 'Default BOM'.\");\r\n            return;\r\n        }\r\n    \r\n        if (items_without_bom.length === 1) {\r\n            frm.set_value(\"finished_goods_item\", items_without_bom[0].item_code);\r\n            return;\r\n        }\r\n    \r\n        const fields = items_without_bom.map((item, i) => ({\r\n            fieldname: `item_${i}`,\r\n            label: `${item.item_code} : ${item.item_name}`,\r\n            fieldtype: 'Check',\r\n            default: 0\r\n        }));\r\n    \r\n        const dialog = new frappe.ui.Dialog({\r\n            title: \"Select One Item (No BOM)\",\r\n            fields: fields,\r\n            primary_action_label: \"Insert to Finished Goods\",\r\n            primary_action(values) {\r\n                const selected = items_without_bom.filter((item, i) => values[`item_${i}`]);\r\n    \r\n                if (selected.length > 0) {\r\n                    frm.set_value(\"finished_goods_item\", selected[0].item_code);\r\n                } else {\r\n                    frappe.msgprint(\"No item selected.\");\r\n                }\r\n    \r\n                dialog.hide();\r\n            }\r\n        });\r\n    \r\n        dialog.show();\r\n    \r\n        setTimeout(() => {\r\n            items_without_bom.forEach((item, i) => {\r\n                const $field = dialog.fields_dict[`item_${i}`].$wrapper.find('input[type=\"checkbox\"]');\r\n                $field.on('change', function () {\r\n                    if ($(this).is(':checked')) {\r\n                        items_without_bom.forEach((_, j) => {\r\n                            if (j !== i) {\r\n                                dialog.fields_dict[`item_${j}`].set_value(0);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }, 100);\r\n    }\r\n\r\n,\r\n\r\n    update_bom_changes: async function(frm) {\r\n        const bom_id = frm.doc.bom_id;\r\n\r\n        if (!bom_id) {\r\n            frappe.msgprint(\"Please select an existing BOM to update.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"BOM\",\r\n                    name: bom_id\r\n                }\r\n            });\r\n\r\n            const bom_doc = response.message;\r\n\r\n            if (bom_doc.docstatus === 1) {\r\n                frappe.msgprint({\r\n                    title: \"BOM is Submitted\",\r\n                    message: \"This BOM is submitted and cannot be updated. Please create a new BOM.\",\r\n                    indicator: \"red\"\r\n                });\r\n                return;\r\n            }\r\n\r\n            bom_doc.items = frm.doc.customer_bom_items.map(row => ({\r\n                item_code: row.item_code,\r\n                item_name: row.item_name,\r\n                qty: row.qty || 1,\r\n                uom: row.uom,\r\n                rate: row.rate || 0,\r\n                amount: row.amount || 0,\r\n                description: row.description,\r\n                custom_item_group: row.custom_item_group || '',\r\n                custom_selling_amount: row.custom_selling_amount || '',\r\n                custom_gemstone: row.custom_gemstone,\r\n                custom_stone_treatment: row.custom_stone_treatment,\r\n                custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n                custom_country_of_origin: row.custom_country_of_origin,\r\n                custom_grade: row.custom_grade,\r\n                custom_stone_pieces: row.custom_stone_pieces,\r\n                custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n                custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n                custom_cut: row.custom_cut,\r\n                custom_setting_type: row.custom_setting_type,\r\n                custom_metal_weight: row.custom_metal_weight,\r\n                custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n                custom_metal_group: row.custom_metal_group,\r\n                custom_selling_rate: row.custom_selling_rate,\r\n                custom_sku_weight: row.custom_sku_weight,\r\n                custom_ext_qty_required: row.custom_ext_qty_required,\r\n                custom_oh: row.custom_oh,\r\n                custom_net_balance_required: row.custom_net_balance_required,\r\n                custom_our_responsibility: row.custom_our_responsibility,\r\n                custom_bom_id : row.bom_no\r\n            }));\r\n\r\n            await frappe.call({\r\n                method: \"frappe.client.save\",\r\n                args: {\r\n                    doc: bom_doc\r\n                }\r\n            });\r\n\r\n            frappe.msgprint({\r\n                title: \"BOM Updated\",\r\n                message: `BOM <a href=\"/app/bom/${bom_doc.name}\" target=\"_blank\">${bom_doc.name}</a> has been updated.`,\r\n                indicator: 'green'\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error(\"BOM update error:\", error);\r\n            frappe.msgprint(\"Error while updating BOM.\");\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nfunction toggle_create_so_button(frm) {\r\n    const items = frm.doc.customer_worksheet_items || [];\r\n    const all_have_sales_orders = items.length > 0 && items.every(row => !!row.sales_order_no);\r\n\r\n    frm.remove_custom_button('Create Sales Order');\r\n\r\n    if (!all_have_sales_orders) {\r\n        frm.add_custom_button('Create Sales Order', () => handle_sales_order_creation(frm));\r\n    }\r\n}\r\n\r\n\r\nfunction insertToFinishedGoods(frm, selectedItems) {\r\n  console.log(\"Inserting to Finished Goods:\", selectedItems); \r\n  selectedItems.forEach(item => {\r\n    const child = frm.add_child('finished_goods_item'); \r\n    child.item_code = item.item_code;\r\n    child.item_name = item.item_name;\r\n  });\r\n  frm.refresh_field('finished_goods_item');\r\n}\r\n\r\nfunction update_child_table(frm, table, updateFn) {\r\n    const grid = frm.fields_dict[table].grid;\r\n    const selected_rows = grid.get_selected_children();\r\n    if (selected_rows.length) {\r\n        selected_rows.forEach(updateFn);\r\n        frm.refresh_field(table);\r\n    }\r\n}\r\n\r\nfunction handle_sales_order_creation(frm) {\r\n    const all_items = frm.doc.customer_worksheet_items || [];\r\n    const bom_items = frm.doc.custom_bom_items || [];\r\n\r\n    const items = all_items.filter(i => !i.sales_order);\r\n\r\n    if (!items.length) {\r\n        frappe.msgprint('All items already have Sales Orders.');\r\n        return;\r\n    }\r\n\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Select Items to Create Sales Orders',\r\n        size: 'large',\r\n        fields: [{ fieldtype: 'HTML', fieldname: 'items_html' }],\r\n        primary_action_label: 'Create',\r\n        primary_action: () => process_sales_order_dialog(frm, dialog, items, bom_items)\r\n    });\r\n\r\n    dialog.fields_dict.items_html.$wrapper.html(render_items_table(items));\r\n    dialog.show();\r\n}\r\n\r\nfunction render_items_table(items) {\r\n    const grouped = {};\r\n    items.forEach(item => {\r\n        if (!grouped[item.item_code]) {\r\n            grouped[item.item_code] = {\r\n                ...item,\r\n                count: 1,\r\n                total_qty: parseFloat(item.qty) || 0\r\n            };\r\n        } else {\r\n            grouped[item.item_code].count += 1;\r\n            grouped[item.item_code].total_qty += parseFloat(item.qty) || 0;\r\n        }\r\n    });\r\n\r\n    const unique_items = Object.values(grouped);\r\n\r\n    return `\r\n        <div style=\"max-height: 300px; overflow-y: auto;\">\r\n            <table class=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th><th>Item Code</th><th>Item Name</th>\r\n                        <th>Qty</th><th>Item Group</th><th>Order Type</th><th>Rows/Size</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    ${unique_items.map((item, i) => `\r\n                        <tr>\r\n                            <td><input type=\"checkbox\" class=\"so-item-checkbox\" data-code=\"${item.item_code}\" checked></td>\r\n                            <td>${item.item_code}</td>\r\n                            <td>${item.item_name}</td>\r\n                            <td>${item.total_qty}</td>\r\n                            <td>${item.item_group || ''}</td>\r\n                            <td>${item.order_type || ''}</td>\r\n                            <td>${item.count}</td>\r\n                        </tr>\r\n                    `).join('')}\r\n                </tbody>\r\n            </table>\r\n        </div>`;\r\n}\r\n\r\nfunction process_sales_order_dialog(frm, dialog, all_items, bom_items) {\r\n    const selected_codes = [];\r\n    dialog.fields_dict.items_html.$wrapper.find('.so-item-checkbox:checked').each(function () {\r\n        const code = $(this).data('code');\r\n        selected_codes.push(code);\r\n    });\r\n\r\n    if (!selected_codes.length) {\r\n        return frappe.msgprint('Please select at least one item.');\r\n    }\r\n\r\n    const selected_items = all_items.filter(item => selected_codes.includes(item.item_code));\r\n\r\n    for (const item of selected_items) {\r\n        if (!item.order_type) {\r\n            return frappe.msgprint(`Order Type is missing for item: ${item.item_code}`);\r\n        }\r\n    }\r\n\r\n    dialog.hide();\r\n\r\n    const sales_order_names = [];\r\n\r\n    const sized_items = selected_items.filter(i => i.size);\r\n    const unsized_items = selected_items.filter(i => !i.size);\r\n\r\n    let i = 0;\r\n\r\n    const next_unsized = () => {\r\n        if (i < unsized_items.length) {\r\n            create_sales_order(frm, [unsized_items[i++]], bom_items, sales_order_names, next_unsized);\r\n        } else {\r\n            show_sales_orders(sales_order_names);\r\n        }\r\n    };\r\n\r\n    if (sized_items.length) {\r\n        create_sales_order(frm, sized_items, bom_items, sales_order_names, next_unsized);\r\n    } else {\r\n        next_unsized();\r\n    }\r\n}\r\n\r\n\r\nasync function create_sales_order(frm, items_list, bom_items, sales_order_names, callback) {\r\n    const company = await frappe.db.get_value(\"Company\", frm.doc.company, \"abbr\");\r\n    const abbr = company.message.abbr;\r\n    const warehouse = `Stores - ${abbr}`;\r\n\r\n    let groupedItems = {};\r\n    for (const item of items_list) {\r\n        if (!groupedItems[item.item_code]) {\r\n            groupedItems[item.item_code] = [];\r\n        }\r\n        groupedItems[item.item_code].push(item);\r\n    }\r\n\r\n    for (const [item_code, grouped_list] of Object.entries(groupedItems)) {\r\n        const so_doc = {\r\n            doctype: \"Sales Order\",\r\n            customer: frm.doc.customer,\r\n            custom_department: frm.doc.department,\r\n            factory_vendor: frm.doc.custom_factory_vendor,\r\n            company: frm.doc.company,\r\n            transaction_date: frappe.datetime.nowdate(),\r\n            custom_sales_order_type: grouped_list[0].order_type,\r\n            custom_factory_vendor: frm.doc.factory_vendor,\r\n            custom_stone_vendor: frm.doc.stone_vendor,\r\n            custom_other_vendor: frm.doc.other_vendor,\r\n            items: [],\r\n            custom_bom_items: []\r\n        };\r\n\r\n        const bomItemPromises = [];\r\n        let is_first_item = true;\r\n\r\n        for (const item of grouped_list) {\r\n            const matching_bom = bom_items.find(b =>\r\n                b.item_code === item.item_code &&\r\n                (!item.size || b.custom_size === item.size)\r\n            );\r\n\r\n            so_doc.items.push({\r\n                item_code: item.item_code,\r\n                item_name: item.item_name,\r\n                uom: item.uom,\r\n                custom_size: item.size,\r\n                bom_no: item.default_bom,\r\n                custom_customer_worksheet_no: frm.doc.name,\r\n                rate: item.rate,\r\n                delivery_date: item.eta,\r\n                image_view: item.image_view,\r\n                custom_product_image: item.image_view,\r\n                custom_supporting_documents: frm.doc.supporting_documents,\r\n                qty: matching_bom ? matching_bom.qty : item.qty,\r\n                warehouse: warehouse,\r\n                bom: matching_bom ? matching_bom.bom_no : item.default_bom,\r\n                custom_item_bom: item.default_bom || (matching_bom ? matching_bom.bom_no : null),\r\n                custom_our_responsibility: matching_bom ? matching_bom.our_responsibility : null\r\n            });\r\n\r\n            if (is_first_item && item.default_bom) {\r\n                so_doc.custom_item_bom = item.default_bom;\r\n\r\n                const bomPromise = frappe.db.get_doc('BOM', item.default_bom).then(doc => {\r\n                    doc.items.forEach(bomItem => {\r\n                        so_doc.custom_bom_items.push({\r\n                            item_code: bomItem.item_code,\r\n                            item_name: bomItem.item_name,\r\n                            qty: bomItem.qty || 1,\r\n                            uom: bomItem.uom,\r\n                            rate: bomItem.rate || 0,\r\n                            amount: bomItem.amount || 0,\r\n                            description: bomItem.description,\r\n                            custom_item_group: bomItem.custom_item_group || '',\r\n                            custom_selling_amount: bomItem.custom_selling_amount || '',\r\n                            custom_gemstone: bomItem.custom_gemstone,\r\n                            custom_stone_treatment: bomItem.custom_stone_treatment,\r\n                            custom_merch_color__attribute: bomItem.custom_merch_color__attribute,\r\n                            custom_country_of_origin: bomItem.custom_country_of_origin,\r\n                            custom_grade: bomItem.custom_grade,\r\n                            custom_stone_pieces: bomItem.custom_stone_pieces,\r\n                            custom_avg_carat_weight: bomItem.custom_avg_carat_weight,\r\n                            custom_sku_carat_weight: bomItem.custom_sku_carat_weight,\r\n                            custom_cut: bomItem.custom_cut,\r\n                            custom_setting_type: bomItem.custom_setting_type,\r\n                            custom_metal_weight: bomItem.custom_metal_weight,\r\n                            custom_sku_metal_weight: bomItem.custom_sku_metal_weight,\r\n                            custom_metal_group: bomItem.custom_metal_group,\r\n                            custom_selling_rate: bomItem.custom_selling_rate,\r\n                            custom_sku_weight: bomItem.custom_sku_weight,\r\n                            custom_ext_qty_required: bomItem.custom_ext_qty_required,\r\n                            custom_oh: bomItem.custom_oh,\r\n                            custom_net_balance_required: bomItem.custom_net_balance_required,\r\n                            custom_our_responsibility: bomItem.custom_our_responsibility  \r\n                        });\r\n                    });\r\n                });\r\n\r\n                bomItemPromises.push(bomPromise);\r\n                is_first_item = false;\r\n            }\r\n        }\r\n\r\n        await Promise.all(bomItemPromises);\r\n\r\n        await frappe.call({\r\n            method: \"frappe.client.insert\",\r\n            args: { doc: so_doc },\r\n            callback: r => {\r\n                if (r.message) {\r\n                    const sales_order_name = r.message.name;\r\n                    sales_order_names.push(sales_order_name);\r\n\r\n                    if (frm.doc.supporting_documents) {\r\n                        frappe.call({\r\n                            method: \"frappe.client.insert\",\r\n                            args: {\r\n                                doc: {\r\n                                    doctype: \"File\",\r\n                                    file_url: frm.doc.supporting_documents,\r\n                                    attached_to_doctype: \"Sales Order\",\r\n                                    attached_to_name: sales_order_name\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    grouped_list.forEach(item => {\r\n                        const matching_rows = frm.doc.customer_worksheet_items.filter(i =>\r\n                            i.item_code === item.item_code &&\r\n                            (i.size === item.size || !item.size) &&\r\n                            i.qty === item.qty\r\n                        );\r\n                        matching_rows.forEach(row => {\r\n                            row.sales_order_no = sales_order_name;\r\n                        });\r\n                    });\r\n\r\n                    frm.refresh_field('customer_worksheet_items');\r\n                    toggle_create_so_button(frm);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    callback(); \r\n}\r\n\r\n\r\nfunction show_sales_orders(order_names) {\r\n    frappe.confirm(\r\n        'Sales Orders created. View Sales Orders now?',\r\n        () => frappe.set_route(\"List\", \"Sales Order\"),\r\n        () => {\r\n            frappe.msgprint({\r\n                title: __('Sales Orders Created'),\r\n                indicator: 'green',\r\n                message: order_names.map(name =>\r\n                    `<a href=\"/app/sales-order/${name}\" target=\"_blank\">${name}</a>`\r\n                ).join('<br>')\r\n            });\r\n        }\r\n    );\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "d_k_memo",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.446801",
  "module": "espresso",
  "name": "download_button_2_for_dkmemo",
  "script": "frappe.listview_settings['d_k_memo'] = {\r\n    // Add all required fields\r\n    add_fields: [\"aws_url\", \"record_id\", \"file_attachment\", \"aws_url_2\"],\r\n    \r\n    // Format both aws_url and aws_url_2 fields as buttons\r\n    formatters: {\r\n        aws_url: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_MEMO/7/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        },\r\n        \r\n        aws_url_2: function(value, df, doc) {\r\n            let finalUrl;\r\n            // Check if import field exists and has a value\r\n            if (doc.file_attachment) {\r\n                finalUrl = \"https://mcgi.iwexinfomatics.com/\" + doc.file_attachment;\r\n            } else {\r\n                // Get the value from record_id field\r\n                let rid = doc.record_id || \"\";\r\n                // Use the original URL structure for aws_url_2\r\n                finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_D_K_MEMO/8/\" + rid;\r\n            }\r\n            if (finalUrl) {\r\n                return `<button class=\"btn btn-xs btn-info\" \r\n                            onclick=\"window.open('${finalUrl}', '_blank'); \r\n                            event.stopPropagation();\r\n                            return false;\">\r\n                            Download</button>`;\r\n            } else {\r\n                return `<span>No URL</span>`;\r\n            }\r\n        }\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.248245",
  "module": "espresso",
  "name": "Item List Description update2",
  "script": "frappe.ui.form.on('Item', {\r\n    custom_gemstone: update_description,\r\n    custom_form: update_description,\r\n    custom_composition: update_description,\r\n    custom_dimensions: update_description,\r\n    custom_shape: update_description,\r\n    custom_metal_group: update_description,\r\n    custom_purity_multiplier: update_description,\r\n    custom_clasp: update_description,\r\n    custom_extender: update_description,\r\n    custom_diamond_cut: update_description,\r\n    custom_chain_length: update_description,\r\n    custom_chain_length_unit: update_description,\r\n    custom_finding_group: update_description,\r\n    custom_finding_type: update_description,\r\n    custom_plating_group: update_description,\r\n    custom_metal_purity_plating: update_description,\r\n    custom_plating_thickness: update_description,\r\n    custom_thickness_unit_of_measure: update_description,\r\n\r\n    item_name: update_description,\r\n    item_group: update_description,\r\n    gst_hsn_code: update_description,\r\n    custom_customer_sku: update_description,\r\n    custom_vendor_product_id: update_description,\r\n    custom_color: update_description,\r\n    custom_material_id:update_description,\r\n    // stock_uom: update_description,\r\n    // image: update_description,\r\n    //description_section: update_description, QUES - Commented. Field deleted ??\r\n\r\n    refresh: function(frm) {\r\n        update_description(frm);\r\n    }\r\n});\r\n\r\nfunction update_description(frm) {\r\n    let parts = [];\r\n    let std_desc = frm.doc.description || \"\";\r\n    let lastPipeIndex = std_desc.lastIndexOf('|');\r\n    let additional_desc;\r\n    \r\n    if (lastPipeIndex !== -1) {\r\n            // Extract text after the last '|'\r\n            additional_desc = std_desc.slice(lastPipeIndex + 1).trim();\r\n        } else {\r\n            // No '|' found, use the whole description\r\n            additional_desc = std_desc.trim();\r\n        }\r\n    \r\n    // Add new fields to the description\r\n    if (frm.doc.item_name) parts.push(`<b>${frm.doc.item_name}</b>`);\r\n    if (frm.doc.item_group) parts.push(`Item Group: ${frm.doc.item_group}`);\r\n    if (frm.doc.custom_material_id) parts.push(`Material ID: ${frm.doc.custom_material_id}`);\r\n    if (frm.doc.gst_hsn_code) parts.push(`HSN/SAC: ${frm.doc.gst_hsn_code}`);\r\n    if (frm.doc.custom_customer_sku) parts.push(`Customer SKU: ${frm.doc.custom_customer_sku}`);\r\n    if (frm.doc.custom_vendor_product_id) parts.push(`Vendor Product ID: ${frm.doc.custom_vendor_product_id}`);\r\n    if (frm.doc.custom_color) parts.push(`Color: ${frm.doc.custom_color}`);\r\n    // if (frm.doc.stock_uom) parts.push(`Stock UOM: ${frm.doc.stock_uom}`);\r\n    // if (frm.doc.image) parts.push(`Image: ${frm.doc.image}`);\r\n    // if (frm.doc.description_section) parts.push(`Description Section: ${frm.doc.description_section}`);\r\n    // if (frm.doc.description) parts.push(`Description: ${frm.doc.description}`);\r\n\r\n    // Add the previous fields (custom ones)\r\n    if (frm.doc.custom_gemstone) parts.push(`Gemstone: ${frm.doc.custom_gemstone}`);\r\n    if (frm.doc.custom_form) parts.push(`Form: ${frm.doc.custom_form}`);\r\n    if (frm.doc.custom_composition) parts.push(`Composition: ${frm.doc.custom_composition}`);\r\n    if (frm.doc.custom_dimensions) parts.push(`Dimensions: ${frm.doc.custom_dimensions}`);\r\n    if (frm.doc.custom_shape) parts.push(`Shape: ${frm.doc.custom_shape}`);\r\n    if (frm.doc.custom_metal_group) parts.push(`Metal Group: ${frm.doc.custom_metal_group}`);\r\n    if (frm.doc.custom_purity_multiplier) parts.push(`Purity Multiplier: ${frm.doc.custom_purity_multiplier}`);\r\n    if (frm.doc.custom_clasp) parts.push(`Clasp: ${frm.doc.custom_clasp}`);\r\n    if (frm.doc.custom_extender) parts.push(`Extender: ${frm.doc.custom_extender}`);\r\n    if (frm.doc.custom_diamond_cut) parts.push(`Diamond Cut: ${frm.doc.custom_diamond_cut}`);\r\n    if (frm.doc.custom_chain_length) parts.push(`Chain Length: ${frm.doc.custom_chain_length}`);\r\n    // if (frm.doc.custom_chain_length_unit) parts.push(`Unit: ${frm.doc.custom_chain_length_unit}`);\r\n    // if (frm.doc.custom_finding_group) parts.push(`Finding Group: ${frm.doc.custom_finding_group}`);\r\n    if (frm.doc.custom_finding_type) parts.push(`Finding Type: ${frm.doc.custom_finding_type}`);\r\n    if (frm.doc.custom_plating_group) parts.push(`Plating Group: ${frm.doc.custom_plating_group}`);\r\n    if (frm.doc.custom_metal_purity_plating) parts.push(`Metal Purity Plating: ${frm.doc.custom_metal_purity_plating}`);\r\n    if (frm.doc.custom_plating_thickness) parts.push(`Plating Thickness: ${frm.doc.custom_plating_thickness}`);\r\n    if (frm.doc.custom_thickness_unit_of_measure) parts.push(`Thickness UOM: ${frm.doc.custom_thickness_unit_of_measure}`);\r\n\r\n    frm.set_value(\"description\", parts.join(\" | \"));\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "import",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.344444",
  "module": "espresso",
  "name": "download_button_for_import_form",
  "script": "frappe.ui.form.on('import', {\r\n    refresh: function(frm) {\r\n        let finalUrl = \"\";\r\n\r\n        // Build the URL based on field values\r\n        if (frm.doc.file_attachment) {\r\n            finalUrl = \"https://mcgi.iwexinfomatics.com/\" + frm.doc.file_attachment;\r\n        } else if (frm.doc.record_id) {\r\n            let rid = frm.doc.record_id;\r\n            finalUrl = \"https://qqmknlv29e.execute-api.us-east-1.amazonaws.com/presigned_url_of_migrated_data_qb?bucket_name=it-teambucket2&auth_token=b5wnpp_tv9_0_bjrzupxbqymqnadq2rsabe86kkjkr3&object_path=FileAttachments-Quickbase/Vouchers/_DBID_TABLE_1/6/\" + rid;\r\n        }\r\n\r\n        // Add button if a valid URL exists\r\n        if (finalUrl) {\r\n            let btn = frm.add_custom_button(__('🔗 Open Attachment'), function() {\r\n                window.open(finalUrl, '_blank');\r\n            });\r\n\r\n            // Style the button (optional, for extra control)\r\n            $(btn).removeClass('btn-default').addClass('btn-info');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.835700",
  "module": "espresso",
  "name": "Add Custom Inter-company Sales Order Button",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    refresh: function(frm) {\r\n        // Only show for submitted POs\r\n        if (frm.doc.docstatus === 1) {\r\n            // Hide the standard inter-company button from the Create dropdown\r\n            setTimeout(function() {\r\n                // This is a more reliable way to find and hide dropdown items\r\n                $('.dropdown-menu .dropdown-item:contains(\"Inter Company Sales Order\")').hide();\r\n                \r\n                // Also try to hide by data attribute if the above doesn't work\r\n                $('.dropdown-menu [data-label=\"Inter Company Sales Order\"]').parent().hide();\r\n                \r\n                // Hide any similar items like \"Internal Sales Order\" too\r\n                $('.dropdown-menu .dropdown-item:contains(\"Internal Sales Order\")').hide();\r\n            }, 500); // Give more time for the dropdown menu to be rendered\r\n            \r\n            // Check if inter-company sales order doesn't exist or was cancelled\r\n            frappe.db.get_value('Sales Order', {\r\n                'inter_company_order_reference': frm.doc.name\r\n            }, ['name', 'docstatus'], function(r) {\r\n                // If no SO exists or the SO was cancelled (docstatus=2), show the button\r\n                if (!r || !r.name || r.docstatus === 2) {\r\n                    // Only show button for group company suppliers\r\n                    if (is_group_company_supplier(frm)) {\r\n                        // Add button directly to the Create dropdown\r\n                        frm.add_custom_button(__('Create Inter-Company Sales Order'), function() {\r\n                            create_multi_currency_inter_company_so(frm);\r\n                        }, __('Create'));\r\n                    }\r\n                } else if (r && r.name) {\r\n                    // Add button to view the existing SO\r\n                    frm.add_custom_button(__('View Inter-Company Sales Order'), function() {\r\n                        frappe.set_route('Form', 'Sales Order', r.name);\r\n                    }, __('View'));\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Check if supplier is a group company where inter-company transaction should be created\r\n * @param {Object} frm - Form object\r\n * @returns {Boolean} - True if this is a group company supplier\r\n */\r\nfunction is_group_company_supplier(frm) {\r\n    // Define your group companies here\r\n    const group_companies = [\"MCGI\", \"D&K\", \"BBJ\", \"D&K Global\"];\r\n    \r\n    // Check supplier name\r\n    if (group_companies.includes(frm.doc.supplier)) {\r\n        return true;\r\n    }\r\n    \r\n    // Check supplier group if defined\r\n    if (frm.doc.supplier_group === \"Group Companies\") {\r\n        return true;\r\n    }\r\n    \r\n    // Check if this is a stone PO which needs an inter-company transaction\r\n    if (frm.doc.custom_is_stone_po === 1 || \r\n        (frm.doc.custom_purchase_order_type && \r\n         frm.doc.custom_purchase_order_type === \"Stone\")) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\n/**\r\n * Create multi-currency inter-company sales order\r\n * @param {Object} frm - Form object\r\n */\r\nfunction create_multi_currency_inter_company_so(frm) {\r\n    frappe.confirm(\r\n        __('Do you want to create an Inter-Company Sales Order for {0}?', [frm.doc.name]),\r\n        function() {\r\n            frappe.call({\r\n                method: 'create_multi_currency_intercompany_sales_order',  // Match your server script API method name\r\n                args: {\r\n                    'purchase_order_name': frm.doc.name\r\n                },\r\n                freeze: true,\r\n                freeze_message: __(\"Creating Sales Order...\"),\r\n                callback: function(r) {\r\n                    console.log(\"API Response:\", r);\r\n                    \r\n                    // Check for explicit error\r\n                    if (r.exc) {\r\n                        frappe.msgprint({\r\n                            title: __('Error'),\r\n                            indicator: 'red',\r\n                            message: __('Error creating Sales Order: {0}', [r.exc])\r\n                        });\r\n                        return;\r\n                    }\r\n                    \r\n                    // Handle various response formats\r\n                    let sales_order_name = '';\r\n                    if (r.message) {\r\n                        if (typeof r.message === 'string') {\r\n                            sales_order_name = r.message;\r\n                        } else if (r.message.sales_order) {\r\n                            sales_order_name = r.message.sales_order;\r\n                        }\r\n                    }\r\n                    \r\n                    if (sales_order_name) {\r\n                        frappe.show_alert({\r\n                            message: __('Sales Order {0} created', [sales_order_name]),\r\n                            indicator: 'green'\r\n                        }, 5);\r\n                        \r\n                        // Ask if user wants to view the created SO\r\n                        frappe.confirm(\r\n                            __('Sales Order {0} has been created. Do you want to view it?', [sales_order_name]),\r\n                            function() {\r\n                                frappe.set_route('Form', 'Sales Order', sales_order_name);\r\n                            },\r\n                            function() {\r\n                                frm.reload_doc();\r\n                            }\r\n                        );\r\n                    } else {\r\n                        frappe.show_alert({\r\n                            message: __('Sales Order created successfully'),\r\n                            indicator: 'green'\r\n                        }, 5);\r\n                        frm.reload_doc();\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    frappe.msgprint({\r\n                        title: __('Error'),\r\n                        indicator: 'red',\r\n                        message: __('Error in API call: {0}', [err.statusText || \"Unknown error\"])\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    );\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.145684",
  "module": "espresso",
  "name": "Place MCGI Stone Order in Quickbase",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    on_submit: function(frm) {\r\n        // Check if this is an inter-company sales order\r\n        if (frm.doc.inter_company_order_reference && frm.doc.custom_sales_order_type == \"Stone\" && frm.doc.company == \"MCGI\") {\r\n            // Call the function to create a Quickbase trigger directly\r\n            create_quickbase_trigger_direct(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction create_quickbase_trigger_direct(frm) {\r\n    // Prepare the payload for Quickbase with hardcoded values\r\n    const payload = {\r\n        \"to\": \"bu3naihjq\",  // The Quickbase trigger table ID\r\n        \"data\": [\r\n            {\r\n                \"6\": {  // Field ID for Sales Order\r\n                    \"value\": \"3\"\r\n                },\r\n                \"14\": {  // Field ID for Purchase Order\r\n                    \"value\": \"3.0\"\r\n                },\r\n                \"7\": {  // Field ID for Date\r\n                    \"value\": \"[[\\\"name\\\", \\\"=\\\", \\\"\" + frm.doc.name +\"\\\"], [\\\"company\\\", \\\"=\\\", \\\"MCGI\\\"]]\"\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    \r\n    // Show a message that we're creating a trigger\r\n    frappe.show_alert({\r\n        message: __(\"Creating Quickbase trigger...\"),\r\n        indicator: 'blue'\r\n    }, 3);\r\n    \r\n    // Make the direct API call\r\n    $.ajax({\r\n        url: \"https://api.quickbase.com/v1/records\",\r\n        type: \"POST\",\r\n        contentType: \"application/json\",\r\n        headers: {\r\n            \"QB-Realm-Hostname\": \"jewelry.quickbase.com\",\r\n            \"Authorization\": \"QB-USER-TOKEN b75cz2_tv9_0_bdw4b63bksngicch3ftaxvdi5gg\"\r\n        },\r\n        data: JSON.stringify(payload),\r\n        success: function(response) {\r\n            frappe.show_alert({\r\n                message: __(\"Quickbase trigger created successfully\"),\r\n                indicator: 'green'\r\n            }, 5);\r\n            \r\n            console.log(\"Quickbase response:\", response);\r\n        },\r\n        error: function(xhr, status, error) {\r\n            frappe.show_alert({\r\n                message: __(\"Failed to create Quickbase trigger: \" + (xhr.responseJSON?.message || error)),\r\n                indicator: 'red'\r\n            }, 5);\r\n            \r\n            console.error(\"Quickbase error:\", xhr.responseText);\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.774508",
  "module": "espresso",
  "name": "Autofill Item Code",
  "script": "frappe.ui.form.on('Item', {\r\n    onload: function(frm) {\r\n        // Check if it's a new item and custom_abbr is not empty\r\n        if (frm.is_new() && frm.doc.custom_abbr) {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n    \r\n    item_group: function(frm) {\r\n        // When item group changes, regenerate item code if custom_abbr exists\r\n        if (frm.doc.custom_abbr) {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n    \r\n    custom_abbr: function(frm) {\r\n        // When custom_abbr changes, generate item code\r\n        if (frm.doc.custom_abbr) {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n        before_save: function(frm) {\r\n        if (frm.doc.custom_abbr) {\r\n            generate_item_code(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction generate_item_code(frm) {\r\n    let abbr = frm.doc.custom_abbr;\r\n\r\n    if (!abbr) return;\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            filters: [\r\n                [\"item_group\", \"=\", frm.doc.item_group],\r\n                [\"item_code\", \"like\", abbr + \"-%\"]\r\n            ],\r\n            fields: [\"item_code\"],\r\n            order_by: \"item_code desc\",\r\n            limit_page_length: 1\r\n        },\r\n        callback: function(r) {\r\n            let new_sequence = \"001\";\r\n            \r\n            if (r.message && r.message.length > 0) {\r\n                let last_item_code = r.message[0].item_code;\r\n                let last_sequence = last_item_code.split('-')[1];\r\n                let next_sequence = parseInt(last_sequence) + 1;\r\n                new_sequence = String(next_sequence).padStart(3, '0');\r\n            }\r\n\r\n            let new_item_code = `${abbr}-${new_sequence}`;\r\n\r\n            frm.set_value('item_code', new_item_code).then(() => {\r\n                frm.set_value('item_name', '');\r\n            });\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.553347",
  "module": "espresso",
  "name": "Split PO",
  "script": "// frappe.ui.form.on('Purchase Order', {\r\n//     refresh(frm) {\r\n//         frm.add_custom_button('Test Button', () => {\r\n//             frappe.msgprint(\"Working!\");\r\n//         });\r\n//     }\r\n// });\r\n\r\n\r\n\r\nfrappe.ui.form.on('Purchase Order', {\r\n    refresh(frm) {\r\n        if (!frm.is_new()) {\r\n            frm.add_custom_button('Split PO', () => {\r\n                open_split_po_dialog(frm);\r\n            });\r\n        }\r\n         if ([0, 1].includes(frm.doc.docstatus)) {\r\n            frm.add_custom_button(__('Sales Order'), function () {\r\n                const items = frm.doc.items || [];\r\n\r\n                const sales_orders = [...new Set(\r\n                    items\r\n                        .map(row => row.sales_order)\r\n                        .filter(Boolean)\r\n                )];\r\n\r\n                if (sales_orders.length === 0) {\r\n                    frappe.msgprint(\"No related Sales Order found in any item.\");\r\n                } else if (sales_orders.length === 1) {\r\n                    frappe.set_route(\"Form\", \"Sales Order\", sales_orders[0]);\r\n                } else {\r\n                    frappe.prompt(\r\n                        [\r\n                            {\r\n                                label: \"Select Sales Order\",\r\n                                fieldname: \"sales_order\",\r\n                                fieldtype: \"Select\",\r\n                                options: sales_orders,\r\n                                reqd: 1\r\n                            }\r\n                        ],\r\n                        (values) => {\r\n                            frappe.set_route(\"Form\", \"Sales Order\", values.sales_order);\r\n                        },\r\n                        \"Open Related Sales Order\",\r\n                        \"Open\"\r\n                    );\r\n                }\r\n            }, __('View'));\r\n        }       \r\n    }\r\n});\r\n\r\nfunction open_split_po_dialog(frm) {\r\n    const supplier = frm.doc.supplier;\r\n\r\n    const items_data = frm.doc.items.map(item => ({\r\n        item_code: item.item_code || '',\r\n        qty: item.qty || 0,\r\n        selected_qty: 0,\r\n        balance_qty: item.qty || 0\r\n    }));\r\n\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Select Items for PO',\r\n        size: 'large',\r\n        fields: [\r\n            {\r\n                label: 'Supplier',\r\n                fieldname: 'supplier',\r\n                fieldtype: 'Link',\r\n                options: 'Supplier',\r\n                reqd: 1,\r\n                default: supplier\r\n                // read_only: 1\r\n            },\r\n            {\r\n                label: 'Items',\r\n                fieldname: 'items_table',\r\n                fieldtype: 'Table',\r\n                cannot_add_rows: true,\r\n                in_place_edit: true,\r\n                fields: [\r\n                    {\r\n                        label: 'Item Code',\r\n                        fieldname: 'item_code',\r\n                        fieldtype: 'Data',\r\n                        read_only: 1,\r\n                        in_list_view: 1\r\n                    },\r\n                    {\r\n                        label: 'Total Qty',\r\n                        fieldname: 'qty',\r\n                        fieldtype: 'Float',\r\n                        read_only: 1,\r\n                        in_list_view: 1\r\n                    },\r\n                    {\r\n                        label: 'Selected Qty',\r\n                        fieldname: 'selected_qty',\r\n                        fieldtype: 'Float',\r\n                        in_list_view: 1\r\n                    },\r\n                    {\r\n                        label: 'Balance Qty',\r\n                        fieldname: 'balance_qty',\r\n                        fieldtype: 'Float',\r\n                        read_only: 1,\r\n                        in_list_view: 1\r\n                    }\r\n                ]\r\n            },\r\n    {\r\n        fieldtype: 'HTML',\r\n        options: '<div style=\"margin: 10px 0; font-weight: bold;text-align:center;\">Select items to split by entering quantities in the <u>Selected Qty</u> fields.</div>'\r\n    }\r\n        ],\r\n        primary_action_label: 'Proceed',\r\n        primary_action(values) {\r\n            const selected_items = values.items_table.filter(row => row.selected_qty > 0);\r\n\r\n            if (!selected_items.length) {\r\n                frappe.msgprint(__('Please enter selected quantity for at least one item.'));\r\n                return;\r\n            }\r\n            selected_items.forEach(dialog_item => {\r\n                const original_row = frm.doc.items.find(item => item.item_code === dialog_item.item_code);\r\n                if (original_row) {\r\n                    original_row.qty = dialog_item.balance_qty;\r\n                }\r\n            });            \r\n            frm.dirty();\r\n            frm.save();\r\n            frm.refresh_field('items');\r\n            \r\n            frappe.call({\r\n            method: 'frappe.client.insert',\r\n            args: {\r\n                doc: {\r\n                    doctype: 'Purchase Order',\r\n                    supplier: values.supplier,\r\n                    schedule_date: frm.doc.schedule_date,\r\n                    transaction_date: frappe.datetime.get_today(),\r\n                    set_warehouse: frm.doc.set_warehouse,\r\n                    items: selected_items.map(item => {\r\n                        const original_item = frm.doc.items.find(orig => orig.item_code === item.item_code);\r\n                        return {\r\n                            item_code: item.item_code,\r\n                            qty: item.selected_qty,\r\n                            schedule_date: frm.doc.schedule_date,\r\n                            po_reference: frm.doc.name,\r\n                            sales_order: original_item?.sales_order || frm.doc.sales_order,\r\n                            uom: original_item?.uom,\r\n                            rate: original_item?.rate,\r\n                            stock_uom: original_item?.stock_uom,\r\n                            description: original_item?.description\r\n                        };\r\n                    }),\r\n                }\r\n            },\r\n            callback: (r) => {\r\n                if (!r.exc) {\r\n                    const message = `New Purchase Order <a href=\"/app/purchase-order/${r.message.name}\">${r.message.name}</a> created.`;\r\n            \r\n                    const custom_dialog = new frappe.ui.Dialog({\r\n                        title: \"Success\",\r\n                        fields: [\r\n                            {\r\n                                fieldtype: \"HTML\",\r\n                                options: `<div style=\"padding: 10px;\">${message}</div>`\r\n                            }\r\n                        ],\r\n                        primary_action_label: \"Close\",\r\n                        primary_action() {\r\n                            custom_dialog.hide();\r\n                        }\r\n                    });\r\n            \r\n                    custom_dialog.show();\r\n            \r\n                    setTimeout(() => {\r\n                        custom_dialog.hide();\r\n                    }, 30000);\r\n            \r\n                    dialog.hide();\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n\r\n    dialog.fields_dict.items_table.df.data = items_data;\r\n    dialog.fields_dict.items_table.grid.refresh();\r\n    \r\n    const grid = dialog.fields_dict['items_table'].grid;\r\n\r\n    grid.wrapper.on('change', 'input[data-fieldname=\"selected_qty\"]', function (e) {\r\n    const row_idx = $(this).closest('.grid-row').data('idx') - 1;\r\n    const row = dialog.fields_dict.items_table.df.data[row_idx];\r\n\r\n    const total_qty = parseFloat(row.qty) || 0;\r\n    const raw_val = $(this).val().replace(/,/g, ''); \r\n    const selected_qty = parseFloat(raw_val) || 0;\r\n\r\n    if (selected_qty > total_qty) {\r\n        frappe.msgprint(__('Selected Qty cannot be greater than Total Qty.'));\r\n        row.selected_qty = 0;\r\n        row.balance_qty = total_qty;\r\n        dialog.fields_dict.items_table.grid.refresh();\r\n        return;\r\n    }\r\n\r\n    row.balance_qty = total_qty - selected_qty;\r\n    dialog.fields_dict.items_table.grid.refresh();\r\n});\r\n\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Metal Cost",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.216000",
  "module": "espresso",
  "name": "Metal Cost",
  "script": "frappe.ui.form.on('Metal Cost', {\n    date(frm) {\n        if (frm.doc.date) {\n            frm.set_value('series', 'MC ' + frm.doc.date + ' ' + frm.doc.time);\n        }\n    },\n\n    onload(frm) {\n        if (frm.is_new() && frm.doc.date && !frm.doc.series) {\n            frm.set_value('series', 'MC ' + frm.doc.date + ' ' + frm.doc.time);\n        }\n    },\n\n    validate(frm) {\n        frm.set_value('total_metals', frm.doc.metals ? frm.doc.metals.length : 0);\n    }\n});\n\nfrappe.ui.form.on('Metal Rate', {\n    metal(frm, cdt, cdn) {\n        update_total_metals(frm);\n    },\n    rate(frm, cdt, cdn) {\n        update_total_metals(frm);\n    },\n    metal_rates_remove(frm) {\n        update_total_metals(frm);\n    }\n});\n\n// Utility function to update total_metals\nfunction update_total_metals(frm) {\n    frm.set_value('total_metals', frm.doc.metal_rates ? frm.doc.metal_rates.length : 0);\n}\n\n\nfrappe.ui.form.on('Metal Cost Item', {\n    rate_per_ounce(frm, cdt, cdn) {\n        let child = locals[cdt][cdn];\n        if (child.rate_per_ounce) {\n            // 1 Troy Ounce = 31.10348 grams\n            let rate_per_gram = child.rate_per_ounce / 31.10348;\n            rate_per_gram = Math.round(rate_per_gram * 100) / 100; // round to 2 decimal places\n\n            frappe.model.set_value(cdt, cdn, 'rate_per_gram', rate_per_gram);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.062259",
  "module": "espresso",
  "name": "Sales Order BOM Download button",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    setup: function(frm) {\r\n        frm.get_docfield(\"custom_bom_items\").allow_bulk_edit = 1;\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.184101",
  "module": "espresso",
  "name": "Customer Worksheet Creation",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    validate: function(frm) {\r\n        if (!frm.doc.supporting_documents) {\r\n            frappe.msgprint({\r\n                title: __('Warning'),\r\n                message: __('Attach the Worksheet File before Save.'),\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n    },\r\n    onload(frm) {\r\n        set_default_boms(frm);\r\n\r\n        // setTimeout(() => bind_search_button(frm), 300);\r\n        // \r\n    },\r\n\r\n    // before_save(frm) {\r\n    //     set_default_boms(frm);\r\n\r\n    //     // setTimeout(() => bind_search_button(frm), 300);\r\n    // },\r\n    search(frm) {\r\n        bind_search_logic(frm);\r\n    },\r\n\r\n    item_code: function (frm) {\r\n        if (frm.doc.item_code) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Item\",\r\n                    name: frm.doc.item_code\r\n                },\r\n                callback: function (r) {\r\n                    if (r.message) {\r\n                        let item = r.message;\r\n                        let child = frm.add_child(\"customer_worksheet_items\");\r\n                        child.item_code = item.name;\r\n                        child.item_name = item.item_name;\r\n                        child.item_group = item.item_group;\r\n                        frm.refresh_field(\"customer_worksheet_items\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\nitem_name: function (frm) {\r\n    if (frm.doc.new_item && frm.doc.item_name) {\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Item\",\r\n                filters: {\r\n                    item_name: frm.doc.item_name\r\n                },\r\n                fields: [\"item_code\", \"item_name\", \"item_group\", \"description\", \"stock_uom\"],\r\n                limit_page_length: 10\r\n            },\r\n            callback: function (r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    frm.__matched_items = r.message;\r\n\r\n                    let rows = r.message.map((item, index) => `\r\n                        <tr data-index=\"${index}\">\r\n                            <td>${frappe.utils.escape_html(item.item_code)}</td>\r\n                            <td>${frappe.utils.escape_html(item.item_name)}</td>\r\n                            <td>${frappe.utils.escape_html(item.item_group)}</td>\r\n                            <td>\r\n                                <div class=\"dropdown-icon\" data-index=\"${index}\">\r\n                                    &#x25BC;\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class=\"desc-row\" id=\"desc-${index}\" style=\"display:none; background:#f9f9f9;\">\r\n                            <td colspan=\"4\" style=\"padding: 10px;\">\r\n                                <b>Description:</b><br>\r\n                                ${frappe.utils.escape_html(item.description || 'No description')}\r\n                            </td>\r\n                        </tr>\r\n                    `).join('');\r\n\r\n                    let html = `\r\n                        <div style=\"max-height: 300px; overflow-y: auto;\">\r\n                            <table class=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Item Code</th>\r\n                                        <th>Item Name</th>\r\n                                        <th>Item Group</th>\r\n                                        <th>Details</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>${rows}</tbody>\r\n                            </table>\r\n                        </div>\r\n                    `;\r\n\r\n                    let d = new frappe.ui.Dialog({\r\n                        title: 'This Item Name already exists',\r\n                        fields: [\r\n                            {\r\n                                fieldtype: 'HTML',\r\n                                fieldname: 'items_html',\r\n                                options: html\r\n                            }\r\n                        ],\r\n                        primary_action_label: 'Insert First Match',\r\n                        primary_action: async function () {\r\n                            d.hide();\r\n                        \r\n                            const matched = frm.__matched_items?.[0];\r\n                        \r\n                            if (matched) {\r\n                                const bom = await frappe.db.get_value('BOM', { item: matched.item_code, is_default: 1 }, 'name');\r\n\r\n                                const child = frappe.model.add_child(frm.doc, \"Customer Worksheet Items\", \"customer_worksheet_items\");\r\n                                child.item_code = matched.item_code;\r\n                                child.item_name = matched.item_name;\r\n                                child.item_group = matched.item_group;\r\n                                child.uom = matched.stock_uom;\r\n                                child.description = matched.description;\r\n                        \r\n                                if (bom && bom.message && bom.message.name) {\r\n                                    child.default_bom = bom.message.name;\r\n                                }\r\n                        \r\n                                frm.refresh_field(\"customer_worksheet_items\");\r\n                                frappe.msgprint(__('Existing item inserted into worksheet.'));\r\n                            }\r\n                        }\r\n\r\n                    });\r\n\r\n                    d.show();\r\n\r\n                    const customStyle = `\r\n                        <style>\r\n                            .dropdown-icon {\r\n                                width: 32px;\r\n                                height: 32px;\r\n                                background-color: #f1f1f1;\r\n                                border-radius: 50%;\r\n                                display: flex;\r\n                                align-items: center;\r\n                                justify-content: center;\r\n                                cursor: pointer;\r\n                                font-size: 14px;\r\n                                transition: background 0.2s ease;\r\n                                margin: auto;\r\n                            }\r\n                            .dropdown-icon:hover {\r\n                                background-color: #e0e0e0;\r\n                            }\r\n                        </style>\r\n                    `;\r\n                    $(d.$wrapper).append(customStyle);\r\n\r\n                    setTimeout(() => {\r\n                        d.$wrapper.find('.dropdown-icon').on('click', function () {\r\n                            const index = $(this).data('index');\r\n                            const $descRow = d.$wrapper.find(`#desc-${index}`);\r\n                            $descRow.toggle();\r\n                            const isVisible = $descRow.is(':visible');\r\n                            $(this).html(isVisible ? '&#x25B2;' : '&#x25BC;'); // ▲ ▼\r\n                        });\r\n                    }, 100);\r\n                }\r\n            }\r\n        });\r\n    }\r\n},\r\n    item_group: async function (frm) {\r\n        if (!frm.doc.item_group) return;\r\n\r\n        if (frm.__last_selected_item_group === frm.doc.item_group && frm.__popup_shown_once) return;\r\n\r\n        frm.__last_selected_item_group = frm.doc.item_group;\r\n        frm.__popup_shown_once = true;\r\n\r\n        setTimeout(() => {\r\n            frm.__popup_shown_once = false;\r\n        }, 5000);\r\n\r\n        if (frm.doc.new_item === 1) return;\r\n\r\n        frappe.confirm(\r\n            'Creating a New Item?',\r\n            async () => await frm.set_value('new_item', 1),\r\n            async () => await frm.set_value('new_item', 0)\r\n        );\r\n\r\n        const observer = new MutationObserver(() => {\r\n            const $modal = $('.modal:visible .modal-dialog');\r\n            const $body = $('.modal:visible .modal-body');\r\n            if ($modal.length) $modal.css({ 'max-width': '400px', 'width': '100%' });\r\n            if ($body.length) $body.css({ 'font-size': '16px', 'color': 'black', 'text-align': 'center' });\r\n            if ($modal.length || $body.length) observer.disconnect();\r\n        });\r\n        observer.observe(document.body, { childList: true, subtree: true });\r\n    },\r\n\r\nrefresh: function (frm) {\r\n    set_default_boms(frm);\r\n    frm.__created_items = [];\r\n    frm.__inserted_items = [];\r\n    frm.fields_dict.item_status.$wrapper.html(\"\");\r\n\r\n    frm.fields_dict.create_insert.$wrapper.find('button').on('click', async function () {\r\n        update_description(frm);\r\n\r\n        const item_group = frm.doc.item_group;\r\n        if (!item_group) {\r\n            frappe.msgprint(\"Item Group is missing.\");\r\n            return;\r\n        }\r\n\r\n        const getShortCode = (name) => {\r\n            const words = name.trim().split(/\\s+/);\r\n            if (words.length === 1) return name.slice(0, 3).toUpperCase();\r\n            return words.map(w => w[0]).join('').toUpperCase().slice(0, 4);\r\n        };\r\n\r\n        const item_group_prefix = getShortCode(item_group);\r\n\r\n        let item_code_response = await frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Item\",\r\n                filters: [[\"item_code\", \"like\", item_group_prefix + \"-%\"]],\r\n                fields: [\"name\"],\r\n                limit_page_length: 1000\r\n            }\r\n        });\r\n\r\n        let existing_codes = item_code_response.message.map(d => d.name);\r\n        let max_number = 0;\r\n        existing_codes.forEach(code => {\r\n            let parts = code.split(\"-\");\r\n            if (parts.length === 2 && parts[0] === item_group_prefix) {\r\n                let num = parseInt(parts[1]);\r\n                if (!isNaN(num) && num > max_number) max_number = num;\r\n            }\r\n        });\r\n\r\n        let next_number = max_number + 1;\r\n        const new_item_code = `${item_group_prefix}-${String(next_number).padStart(4, '0')}`;\r\n\r\n        const r = await frappe.call({\r\n            method: \"frappe.client.insert\",\r\n            args: {\r\n                doc: {\r\n                    doctype: \"Item\",\r\n                    item_code: new_item_code,\r\n                    item_name: frm.doc.item_name || \"\",\r\n                    gst_hsn_code: frm.doc.gst_hsn_code,\r\n                    item_group: item_group,\r\n                    brand: frm.doc.brand,\r\n                    description: frm.doc.description,\r\n                    custom_customer_sku: frm.doc.custom_customer_sku,\r\n                    stock_uom: frm.doc.default_stock_uom,\r\n                    custom_vendor_product_id: frm.doc.custom_vendor_product_id,\r\n                    custom_gemstone: frm.doc.custom_gemstone,\r\n                    custom_sub_type: frm.doc.custom_sub_type,\r\n                    custom_shape: frm.doc.custom_shape,\r\n                    custom_form: frm.doc.custom_form,\r\n                    custom_metal_group: frm.doc.custom_metal_group,\r\n                    custom_composition: frm.doc.custom_composition,\r\n                    custom_dimensions: frm.doc.custom_dimensions,\r\n                    custom_finding_group: frm.doc.custom_finding_group,\r\n                    custom_finding_type: frm.doc.custom_finding_type,\r\n                    custom_plating_group: frm.doc.custom_plating_group,\r\n                    custom_plating_thickness: frm.doc.custom_plating_thickness,\r\n                    custom_metal_purity_plating: frm.doc.custom_metal_purity_plating,\r\n                    custom_thickness_unit_of_measure: frm.doc.custom_thickness_unit_of_measure\r\n                }\r\n            }\r\n        });\r\n\r\n        if (r.message) {\r\n            const created_code = r.message.name;\r\n\r\n            const d = new frappe.ui.Dialog({\r\n                title: 'Item Created',\r\n                fields: [{\r\n                    fieldtype: 'HTML',\r\n                    options: `Item <b><a href=\"/app/item/${created_code}\" target=\"_blank\">${created_code}</a></b> created and inserted successfully.`\r\n                }],\r\n                primary_action_label: 'Next',\r\n                primary_action() {\r\n                    d.hide();\r\n\r\n                    const imageDialog = new frappe.ui.Dialog({\r\n                        title: 'Attach Image to Item',\r\n                        fields: [{\r\n                            label: 'Item Image',\r\n                            fieldname: 'item_image',\r\n                            fieldtype: 'Attach Image',\r\n                            reqd: true\r\n                        }],\r\n                        primary_action_label: 'Upload',\r\n                        primary_action: async function () {\r\n                            const values = imageDialog.get_values();\r\n                            if (!values || !values.item_image) {\r\n                                frappe.msgprint({\r\n                                    title: __('Warning'),\r\n                                    message: __('Please attach an image before continuing.'),\r\n                                    indicator: 'orange'\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            await frappe.call({\r\n                                method: \"frappe.client.set_value\",\r\n                                args: {\r\n                                    doctype: \"Item\",\r\n                                    name: created_code,\r\n                                    fieldname: \"image\",\r\n                                    value: values.item_image\r\n                                },\r\n                                callback: function () {\r\n                                    imageDialog.hide();\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    imageDialog.show();\r\n                }\r\n            });\r\n\r\n            d.show();\r\n\r\n            frappe.db.get_value('Item', created_code, 'description').then(r => {\r\n                const description = r.message.description || \"\";\r\n                frm.add_child(\"customer_worksheet_items\", {\r\n                    item_code: created_code,\r\n                    item_name: created_code,\r\n                    item_group: item_group,\r\n                    description: description\r\n                });\r\n                frm.refresh_field(\"customer_worksheet_items\");\r\n            });\r\n\r\n            if (!frm.__created_items) frm.__created_items = [];\r\n            frm.__created_items.push(created_code);\r\n\r\n            const itemCreatorFields = [\r\n                \"item_group\", \"item_name\", \"item_code_id\", \"gst_hsn_code\", \"brand\", \"stock_uom\",\r\n                \"custom_vendor_product_id\", \"custom_gemstone\", \"custom_shape\", \"custom_form\",\r\n                \"custom_metal_group\", \"custom_composition\", \"custom_dimensions\", \"custom_finding_group\",\r\n                \"custom_finding_type\", \"custom_plating_group\", \"custom_plating_thickness\",\r\n                \"custom_metal_purity_plating\", \"custom_thickness_unit_of_measure\", \"custom_customer_sku\",\r\n                \"description\"\r\n            ];\r\n\r\n            itemCreatorFields.forEach(field => frm.set_value(field, \"\"));\r\n            frm.set_df_property(\"item_group\", \"read_only\", 0);\r\n            frm.set_df_property(\"item_name\", \"read_only\", 0);\r\n\r\n            update_item_status(frm);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n,\r\n    before_save: function(frm) {\r\n        const fields_to_clear = [\r\n            'item_group',\r\n            'gst_hsn_code',\r\n            'item_name',\r\n            'custom_customer_sku',\r\n            'item_code_id',\r\n            'custom_vendor_product_id',\r\n            'default_stock_uom',\r\n            'custom_gemstone',\r\n            'custom_form',\r\n            'custom_shape',\r\n            'custom_composition',\r\n            'custom_dimensions',\r\n            'custom_metal_group',\r\n            'custom_purity_multiplier',\r\n            'custom_clasp',\r\n            'custom_extender',\r\n            'custom_diamond_cut',\r\n            'custom_chain_length',\r\n            'custom_chain_length_unit',\r\n            'custom_finding_group',\r\n            'custom_plating_group',\r\n            'custom_metal_purity_plating',\r\n            'custom_plating_thickness',\r\n            'custom_thickness_unit_of_measure',\r\n            'custom_sub_type',\r\n            'custom_color'\r\n        ];\r\n\r\n        fields_to_clear.forEach(field => frm.set_value(field, null));\r\n    },\r\n    \r\n   clear_search: function (frm) {\r\n        const fields_to_clear = [\r\n        'item_group','gst_hsn_code','item_name','custom_customer_sku','item_code_id','custom_vendor_product_id','default_stock_uom','custom_gemstone','custom_form','custom_shape','custom_composition','custom_dimensions','custom_metal_group','custom_purity_multiplier','custom_clasp','custom_extender','custom_diamond_cut','custom_chain_length','custom_chain_length_unit','custom_finding_group','custom_plating_group','custom_metal_purity_plating','custom_plating_thickness','custom_thickness_unit_of_measure','custom_sub_type', 'custom_color'\r\n        ];\r\n\r\n        fields_to_clear.forEach(field => frm.set_value(field, ''));\r\n        frm.set_value('new_item', 0);\r\n\r\n\r\n    }\r\n});\r\n\r\nfunction update_item_status(frm) {\r\n    const created = frm.__created_items || [];\r\n    const inserted = frm.__inserted_items || [];\r\n\r\n    const lastCreated = created.at(-1);\r\n    const insertCount = inserted.length;\r\n\r\n    let html = `<div style=\"padding: 8px 0; line-height: 1.6;\">`;\r\n\r\n    if (lastCreated) {\r\n        html += `<span style=\"color: green;\">Item Created:</span> ${frappe.utils.escape_html(lastCreated)}<br>`;\r\n    }\r\n\r\n    if (insertCount > 0) {\r\n        html += `<span style=\"color: blue;\">Items Inserted:</span> ${insertCount}`;\r\n    }\r\n\r\n    html += `</div>`;\r\n\r\n    frm.fields_dict.item_status.$wrapper.html(html);\r\n}\r\n\r\n\r\n\r\n// ===============Customer Worksheet Items =====================\r\n\r\nfrappe.ui.form.on('Customer Worksheet Items', {\r\n    customer_worksheet_items_add(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n\r\n        row.order_type = frm.doc.order_type;\r\n\r\n        if (frm.doc.company) {\r\n            frappe.db.get_value('Company', frm.doc.company, 'abbr')\r\n                .then(r => {\r\n                    if (r.message) {\r\n                        const abbr = r.message.abbr;\r\n                        row.delivery_warehouse = `Stores - ${abbr}`;\r\n                        frm.refresh_field('customer_worksheet_items');\r\n                    }\r\n                });\r\n        } else {\r\n            row.delivery_warehouse = '';\r\n        }\r\n\r\n        frm.refresh_field('customer_worksheet_items');\r\n    },\r\n    item_code(frm, cdt, cdn) {\r\n        frappe.after_ajax(() => {\r\n            set_default_boms(frm);\r\n        });\r\n    }\r\n\r\n});\r\n\r\nfunction get_default_bom(item_code) {\r\n    return frappe.call({\r\n        method: \"frappe.client.get_value\",\r\n        args: {\r\n            doctype: \"BOM\",\r\n            filters: {\r\n                item: item_code,\r\n                docstatus: [\"in\", [0, 1]],\r\n                is_default: 1\r\n            },\r\n            fieldname: [\"name\", \"item\"]\r\n        }\r\n    }).then(res => res.message);\r\n}\r\n\r\nfunction set_default_boms(frm) {\r\n    const rows = frm.doc.customer_worksheet_items || [];\r\n\r\n    const promises = rows.map(row => {\r\n        if (row.item_code && !row.default_bom) {\r\n            return get_default_bom(row.item_code).then(bom => {\r\n                if (bom) {\r\n                    row.default_bom = bom.name;\r\n                } else {\r\n                    row.default_bom = '';\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    Promise.all(promises).then(() => {\r\n        frm.refresh_field('customer_worksheet_items');\r\n    });\r\n}\r\n\r\n\r\nasync function bind_search_logic(frm) {\r\n    let {\r\n        item_group,\r\n        item_name,\r\n        item_code,\r\n        custom_vendor_product_id,\r\n        custom_customer_sku\r\n    } = frm.doc;\r\n\r\n    if (!item_group && !item_name && !item_code && !custom_vendor_product_id && !custom_customer_sku) {\r\n        frappe.msgprint(__('Please fill at least one of the search fields.'));\r\n        return;\r\n    }\r\n\r\n    let filters = {};\r\n    if (item_group) filters[\"item_group\"] = item_group;\r\n    if (item_name) filters[\"item_name\"] = [\"like\", `%${item_name}%`];\r\n    if (item_code) filters[\"name\"] = [\"like\", `%${item_code}%`];\r\n    if (custom_vendor_product_id) filters[\"custom_vendor_product_id\"] = [\"like\", `%${custom_vendor_product_id}%`];\r\n    if (custom_customer_sku) filters[\"custom_customer_sku\"] = [\"like\", `%${custom_customer_sku}%`];\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            filters: filters,\r\n            fields: [\"name\", \"item_name\", \"item_group\", \"description\", \"stock_uom\"]\r\n        },\r\n        callback: function (r) {\r\n            if (r.message && r.message.length > 0) {\r\n                frm.__matched_items = r.message;\r\n\r\n                let rows = r.message.map((item, index) => `\r\n                    <tr data-index=\"${index}\">\r\n                        <td><input type=\"checkbox\" class=\"item-select\" data-index=\"${index}\"></td>\r\n                        <td>${frappe.utils.escape_html(item.name)}</td>\r\n                        <td>${frappe.utils.escape_html(item.item_name)}</td>\r\n                        <td>${frappe.utils.escape_html(item.item_group)}</td>\r\n                        <td>\r\n                            <button class=\"btn btn-sm toggle-desc\" data-index=\"${index}\" style=\"background:none; border:none;\">\r\n                                ▼\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"desc-row\" id=\"desc-${index}\" style=\"display:none; background:#f9f9f9;\">\r\n                        <td colspan=\"5\">\r\n                            <b>Description:</b><br>\r\n                            ${frappe.utils.escape_html(item.description || 'No description')}\r\n                        </td>\r\n                    </tr>\r\n                `).join('');\r\n\r\n                let html = `\r\n                    <div style=\"max-height: 300px; overflow-y: auto;\">\r\n                        <table class=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Select</th>\r\n                                    <th>Item Code</th>\r\n                                    <th>Item Name</th>\r\n                                    <th>Item Group</th>\r\n                                    <th>Details</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>${rows}</tbody>\r\n                        </table>\r\n                    </div>\r\n                `;\r\n\r\n                let d = new frappe.ui.Dialog({\r\n                    title: 'Matching Items Found',\r\n                    fields: [\r\n                        {\r\n                            fieldtype: 'HTML',\r\n                            fieldname: 'items_html',\r\n                            options: html\r\n                        }\r\n                    ],\r\n                    primary_action_label: 'Insert Selected Items',\r\n                    primary_action: async function () {\r\n                        const selectedIndexes = [];\r\n                        d.$wrapper.find('.item-select:checked').each(function () {\r\n                            selectedIndexes.push($(this).data('index'));\r\n                        });\r\n\r\n                        if (selectedIndexes.length === 0) {\r\n                            frappe.msgprint(__('Please select at least one item to insert.'));\r\n                            return;\r\n                        }\r\n\r\n                        for (const index of selectedIndexes) {\r\n                            const matched = frm.__matched_items[index];\r\n                            if (!matched) continue;\r\n\r\n                            let bom = await frappe.db.get_value('BOM', { item: matched.name, is_default: 1 }, 'name');\r\n\r\n                            const child = frappe.model.add_child(frm.doc, \"Customer Worksheet Items\", \"customer_worksheet_items\");\r\n                            child.item_code = matched.name;\r\n                            child.item_name = matched.item_name;\r\n                            child.item_group = matched.item_group;\r\n                            child.uom = matched.stock_uom;\r\n                            child.description = matched.description;\r\n\r\n                            if (bom?.message?.name) {\r\n                                child.default_bom = bom.message.name;\r\n                            }\r\n                        }\r\n\r\n                        frm.refresh_field(\"customer_worksheet_items\");\r\n                        d.hide();\r\n                        frappe.msgprint({\r\n                            message: '<span style=\"color:green; font-weight:400;\">Items Inserted Successfully into Worksheet</span>',\r\n                            indicator: 'green'\r\n                        });\r\n                    }\r\n                });\r\n\r\n                d.show();\r\n\r\n                setTimeout(() => {\r\n                    d.$wrapper.find('.toggle-desc').on('click', function () {\r\n                        const index = $(this).data('index');\r\n                        const $descRow = d.$wrapper.find(`#desc-${index}`);\r\n                        $descRow.toggle();\r\n                        const isVisible = $descRow.is(':visible');\r\n                        $(this).text(isVisible ? '▲' : '▼');\r\n                    });\r\n                }, 100);\r\n            } else {\r\n                frm.__matched_items = [];\r\n                frappe.msgprint({\r\n                    title: __('No Match Found'),\r\n                    message: __('No matching item exists. Please create a new item.'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.736499",
  "module": "espresso",
  "name": "Fetch BOM from Quickbase",
  "script": "// Client Script for Item - Add QuickBase BOM Sync Button (SKU Items Only)\r\nfrappe.ui.form.on('Item', {\r\n    refresh: function(frm) {\r\n        // Check if item has SKU item group or its descendants before showing buttons\r\n        if (frm.doc.name && frm.doc.item_group) {\r\n            check_item_group_and_show_buttons(frm);\r\n        }\r\n    },\r\n    \r\n    item_group: function(frm) {\r\n        // Refresh buttons when Item Group changes\r\n        if (frm.doc.name && frm.doc.item_group) {\r\n            check_item_group_and_show_buttons(frm);\r\n        }\r\n    },\r\n    \r\n    custom_customer_sku: function(frm) {\r\n        // Refresh buttons when Customer SKU changes\r\n        frm.trigger('refresh');\r\n    }\r\n});\r\n\r\nfunction check_item_group_and_show_buttons(frm) {\r\n    // Check if the item group is \"SKU\" or a descendant of \"SKU\"\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Item Group',\r\n            name: frm.doc.item_group\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                const current_item_group = r.message;\r\n\t\t\t\t if (frm.doc.custom_customer_sku && frm.doc.custom_customer_sku.trim() != '') {\r\n\t\t\t\t\tcheck_if_sku_descendant(frm, current_item_group);\r\n\t\t\t\t }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction check_if_sku_descendant(frm, current_item_group) {\r\n    // First check if current item group is \"SKU\"\r\n    if (current_item_group.name === \"SKU\") {\r\n        show_quickbase_buttons(frm);\r\n        return;\r\n    }\r\n    \r\n    // Get the \"SKU\" item group to check if current item group is its descendant\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Item Group',\r\n            name: 'SKU'\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                const sku_item_group = r.message;\r\n                \r\n                // Check if current item group is a descendant of SKU using nested set model\r\n                // In ERPNext, if lft > parent.lft AND rgt < parent.rgt, then it's a descendant\r\n                if (current_item_group.lft > sku_item_group.lft && \r\n                    current_item_group.rgt < sku_item_group.rgt) {\r\n                    show_quickbase_buttons(frm);\r\n                } else {\r\n                    // Remove any existing QuickBase buttons if item group doesn't qualify\r\n                    remove_quickbase_buttons(frm);\r\n                }\r\n            } else {\r\n                // SKU item group doesn't exist, check manually by traversing parent chain\r\n                check_parent_chain_for_sku(frm, current_item_group);\r\n            }\r\n        },\r\n        error: function() {\r\n            // SKU item group doesn't exist, check manually by traversing parent chain\r\n            check_parent_chain_for_sku(frm, current_item_group);\r\n        }\r\n    });\r\n}\r\n\r\nfunction check_parent_chain_for_sku(frm, current_item_group) {\r\n    // Recursive function to check if any parent in the chain is \"SKU\"\r\n    if (!current_item_group.parent_item_group || current_item_group.parent_item_group === \"All Item Groups\") {\r\n        // Reached root without finding SKU\r\n        remove_quickbase_buttons(frm);\r\n        return;\r\n    }\r\n    \r\n    if (current_item_group.parent_item_group === \"SKU\") {\r\n        show_quickbase_buttons(frm);\r\n        return;\r\n    }\r\n    \r\n    // Continue checking parent\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Item Group',\r\n            name: current_item_group.parent_item_group\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                check_parent_chain_for_sku(frm, r.message);\r\n            } else {\r\n                remove_quickbase_buttons(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction show_quickbase_buttons(frm) {\r\n    // Remove existing buttons first to avoid duplicates\r\n    remove_quickbase_buttons(frm);\r\n    \r\n    // Add custom button for QuickBase BOM sync\r\n    frm.add_custom_button(__('Fetch BOM Data from QB'), function() {\r\n        fetch_bom_data_from_quickbase(frm);\r\n    }, __(\"QuickBase\"));\r\n    \r\n    // Add a button to view existing BOMs\r\n    frm.add_custom_button(__('View BOMs'), function() {\r\n        frappe.set_route('List', 'BOM', {'item': frm.doc.name});\r\n    }, __(\"QuickBase\"));\r\n    \r\n    // Add button to view QB sync history\r\n    frm.add_custom_button(__('Sync History'), function() {\r\n        show_sync_history(frm);\r\n    }, __(\"QuickBase\"));\r\n    \r\n    // Make the button group more prominent\r\n    frm.page.set_inner_btn_group_as_primary(__('QuickBase'));\r\n}\r\n\r\nfunction remove_quickbase_buttons(frm) {\r\n    // Remove QuickBase button group if it exists\r\n    if (frm.custom_buttons && frm.custom_buttons['QuickBase']) {\r\n        frm.page.remove_inner_button(__('Fetch BOM Data from QB'), __('QuickBase'));\r\n        frm.page.remove_inner_button(__('View BOMs'), __('QuickBase'));\r\n        frm.page.remove_inner_button(__('Sync History'), __('QuickBase'));\r\n    }\r\n}\r\n\r\nfunction fetch_bom_data_from_quickbase(frm) {\r\n    // Validate Customer SKU exists\r\n    if (!frm.doc.custom_customer_sku || frm.doc.custom_customer_sku.trim() === '') {\r\n        frappe.msgprint({\r\n            title: __('Missing Customer SKU'),\r\n            message: __('Please enter a Customer SKU before fetching BOM data from QuickBase.'),\r\n            indicator: 'orange'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    // Check if BOMs exist for this item\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'BOM',\r\n            filters: {\r\n                item: frm.doc.name\r\n            },\r\n            fields: ['name', 'is_default', 'docstatus']\r\n        },\r\n        callback: function(r) {\r\n            let existing_boms = r.message || [];\r\n            show_bom_sync_confirmation(frm, existing_boms);\r\n        }\r\n    });\r\n}\r\n\r\nfunction show_bom_sync_confirmation(frm, existing_boms) {\r\n    let message = `\r\n        <div style=\"padding: 15px;\">\r\n            <h4>🔄 Fetch BOM Data from QuickBase</h4>\r\n            <p><strong>Item:</strong> ${frm.doc.item_code} - ${frm.doc.item_name || ''}</p>\r\n            <p><strong>Item Group:</strong> ${frm.doc.item_group}</p>\r\n            <p><strong>Customer SKU:</strong> <code>${frm.doc.custom_customer_sku}</code></p>\r\n            <hr>\r\n    `;\r\n    \r\n    if (existing_boms.length > 0) {\r\n        message += `<p><strong>Existing BOMs for this item:</strong></p><ul>`;\r\n        existing_boms.forEach(bom => {\r\n            let status = bom.docstatus === 1 ? 'Submitted' : bom.docstatus === 0 ? 'Draft' : 'Cancelled';\r\n            let defaultText = bom.is_default ? ' (Default)' : '';\r\n            message += `<li><a href=\"/app/bom/${bom.name}\" target=\"_blank\">${bom.name}</a> - ${status}${defaultText}</li>`;\r\n        });\r\n        message += `</ul>`;\r\n        message += `<p><em>⚠️ Fetching data from QuickBase may update or create new BOM records.</em></p>`;\r\n    } else {\r\n        message += `<p><em>No existing BOMs found for this item. A new BOM may be created based on QuickBase data.</em></p>`;\r\n    }\r\n    \r\n    message += `\r\n            <hr>\r\n            <p>This will create a trigger in QuickBase to fetch the latest BOM data for Customer SKU: <strong>${frm.doc.custom_customer_sku}</strong>. This is working on an experimental basis and the data may be incomplete.</p>\r\n        </div>\r\n    `;\r\n    \r\n    frappe.confirm(\r\n\t\tmessage,\r\n\t\tfunction() {\r\n\t\t\t// Yes button action\r\n\t\t\tcreate_quickbase_bom_sync_trigger(frm);\r\n\t\t},\r\n\t\tfunction() {\r\n\t\t\t// No button action (can be empty or add a small alert)\r\n\t\t\t// frappe.show_alert({message: __(\"BOM sync cancelled\"), indicator: 'orange'}, 2);\r\n\t\t},\r\n\t\t__('Fetch BOM Data')  // Title as 4th parameter\r\n\t);\r\n}\r\n\r\nfunction create_quickbase_bom_sync_trigger(frm) {\r\n    const customer_sku = frm.doc.custom_customer_sku;\r\n    const qb_app = frm.doc.custom_app;\r\n    let custom_query = \"\";\r\n    let qbsync_mapping_id = \"\";\r\n    \r\n    if (qb_app == \"New JD\") {\r\n        custom_query = `{'137'.EX.'${customer_sku}'}`;\r\n        qbsync_mapping_id = \"12\";\r\n    }\r\n    else if (qb_app == \"D&K OMS\") {\r\n        custom_query = `{'136'.EX.'${customer_sku}'}`;\r\n        qbsync_mapping_id = \"4\";\r\n    }\r\n    \r\n    // Prepare the payload for Quickbase trigger\r\n    const payload = {\r\n        \"to\": \"bu3naihjq\",  // The Quickbase trigger table ID\r\n        \"data\": [\r\n            {\r\n                \"6\": {  // Field ID for Related ERPNext Data Sync Table Mapping\r\n                    \"value\": qbsync_mapping_id  // BOM table mapping ID (removed $())\r\n                },\r\n                \"7\": {  // Field ID for Custom Query\r\n                    \"value\": custom_query  // Removed $()\r\n                },\r\n                \"8\": {  // Field ID for Skip (optional)\r\n                    \"value\": \"\"\r\n                },\r\n                \"9\": {  // Field ID for Top (optional)\r\n                    \"value\": \"\"\r\n                },\r\n                \"10\": {  // Field ID for Custom Date/Time From (optional)\r\n                    \"value\": \"\"\r\n                },\r\n                \"11\": {  // Field ID for Custom Date/Time To (optional)\r\n                    \"value\": \"\"\r\n                },\r\n                \"12\": {  // Field ID for Batch # (optional)\r\n                    \"value\": \"\"\r\n                },\r\n                \"13\": {  // Field ID for Ignore Date Ranges?\r\n                    \"value\": true\r\n                },\r\n                \"14\": {  // Field ID for Pipeline Version\r\n                    \"value\": \"2.0\"\r\n                },\r\n                \"28\": {  // Field ID for Trigger Child Data Sync\r\n                    \"value\": \"1\"\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    \r\n    // Show processing message\r\n    frappe.show_alert({\r\n        message: __(\"Creating QuickBase BOM sync trigger for Customer SKU: {0}...\", [customer_sku]),\r\n        indicator: 'blue'\r\n    }, 3);\r\n    \r\n    // Make the API call to create QuickBase trigger\r\n    $.ajax({\r\n        url: \"https://api.quickbase.com/v1/records\",\r\n        type: \"POST\",\r\n        contentType: \"application/json\",\r\n        headers: {\r\n            \"QB-Realm-Hostname\": \"jewelry.quickbase.com\",\r\n            \"Authorization\": \"QB-USER-TOKEN b75cz2_tv9_0_bdw4b63bksngicch3ftaxvdi5gg\"\r\n        },\r\n        data: JSON.stringify(payload),\r\n        success: function(response) {\r\n            frappe.show_alert({\r\n                message: __(\"QuickBase BOM sync trigger created successfully!\"),\r\n                indicator: 'green'\r\n            }, 5);\r\n            \r\n            console.log(\"QuickBase trigger response:\", response);\r\n            \r\n            // Show success dialog with next steps\r\n            frappe.msgprint({\r\n                title: __('BOM Sync Triggered'),\r\n                message: __(`\r\n                    <div style=\"padding: 15px;\">\r\n                        <h4>✅ QuickBase BOM Sync Started</h4>\r\n                        <p><strong>Item:</strong> ${frm.doc.item_code} - ${frm.doc.item_name || ''}</p>\r\n                        <p><strong>Customer SKU:</strong> ${customer_sku}</p>\r\n                        <p><strong>Query:</strong> ${custom_query}</p>\r\n                        <hr>\r\n                        <h5>What happens next:</h5>\r\n                        <ol>\r\n                            <li>QuickBase will process the BOM data for this Customer SKU</li>\r\n                            <li>BOM records will be created/updated in ERPNext</li>\r\n                            <li>You will receive notifications when the sync is complete</li>\r\n                        </ol>\r\n                        <p><em>This usually takes 1-2 minutes to complete.</em></p>\r\n                        <p><a href=\"/app/bom?item=${frm.doc.name}\" target=\"_blank\">📋 View BOMs for this Item</a></p>\r\n                    </div>\r\n                `),\r\n                indicator: 'green'\r\n            });\r\n            \r\n            // Add a comment to track the sync\r\n            add_sync_comment(frm, customer_sku);\r\n        },\r\n        error: function(xhr, status, error) {\r\n            const errorMessage = xhr.responseJSON?.message || error;\r\n            \r\n            frappe.show_alert({\r\n                message: __(\"Failed to create QuickBase BOM sync trigger: {0}\", [errorMessage]),\r\n                indicator: 'red'\r\n            }, 8);\r\n            \r\n            console.error(\"QuickBase error:\", xhr.responseText);\r\n            \r\n            // Show detailed error dialog\r\n            frappe.msgprint({\r\n                title: __('BOM Sync Failed'),\r\n                message: __(`\r\n                    <div style=\"padding: 15px;\">\r\n                        <h4>❌ QuickBase BOM Sync Failed</h4>\r\n                        <p><strong>Item:</strong> ${frm.doc.item_code}</p>\r\n                        <p><strong>Customer SKU:</strong> ${customer_sku}</p>\r\n                        <p><strong>Error:</strong> ${errorMessage}</p>\r\n                        <p><strong>Status:</strong> ${status}</p>\r\n                        <hr>\r\n                        <h5>Troubleshooting:</h5>\r\n                        <ul>\r\n                            <li>Verify the Customer SKU exists in QuickBase</li>\r\n                            <li>Check QuickBase API permissions</li>\r\n                            <li>Contact your system administrator if the problem persists</li>\r\n                        </ul>\r\n                    </div>\r\n                `),\r\n                indicator: 'red'\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction add_sync_comment(frm, customer_sku) {\r\n    // Add a comment to track the sync trigger\r\n    frappe.call({\r\n        method: 'frappe.client.insert',\r\n        args: {\r\n            doc: {\r\n                doctype: 'Comment',\r\n                comment_type: 'Info',\r\n                reference_doctype: 'Item',\r\n                reference_name: frm.doc.name,\r\n                content: `QuickBase BOM sync triggered for Customer SKU: ${customer_sku} at ${frappe.datetime.now_datetime()}`\r\n            }\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                console.log('Sync comment added:', r.message.name);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction show_sync_history(frm) {\r\n    // Show sync history from comments\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Comment',\r\n            filters: {\r\n                reference_doctype: 'Item',\r\n                reference_name: frm.doc.name,\r\n                content: ['like', '%QuickBase BOM sync%']\r\n            },\r\n            fields: ['content', 'creation', 'owner'],\r\n            order_by: 'creation desc',\r\n            limit: 10\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                let history_html = '<div style=\"padding: 15px;\"><h4>📊 QuickBase BOM Sync History</h4>';\r\n                \r\n                r.message.forEach(comment => {\r\n                    history_html += `\r\n                        <div style=\"border-bottom: 1px solid #eee; padding: 10px 0;\">\r\n                            <p><strong>${frappe.datetime.str_to_user(comment.creation)}</strong> by ${comment.owner}</p>\r\n                            <p><em>${comment.content}</em></p>\r\n                        </div>\r\n                    `;\r\n                });\r\n                \r\n                history_html += '</div>';\r\n                \r\n                frappe.msgprint({\r\n                    title: __('Sync History'),\r\n                    message: history_html,\r\n                    wide: true\r\n                });\r\n            } else {\r\n                frappe.msgprint(__('No QuickBase BOM sync history found for this item.'));\r\n            }\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.065622",
  "module": "espresso",
  "name": "Item Spec Display",
  "script": "// Complete Item Form Script - Description Updates & Item Spec Management\r\n// This script handles Item → Item Spec relationship, description updates, and UI management\r\n// For Item Spec → Item updates, see the corresponding Item Spec server script\r\n\r\nfrappe.ui.form.on('Item', {\r\n    // Item Spec link field change\r\n    item_spec: function(frm) {\r\n        update_description(frm);\r\n        toggle_item_spec_display(frm);\r\n    },\r\n    \r\n    // Item fields that are still on Item doctype\r\n    item_name: update_description,\r\n    item_group: update_description,\r\n    gst_hsn_code: update_description,\r\n\r\n    refresh: function(frm) {\r\n        // Add a small delay to ensure form is fully loaded\r\n        setTimeout(() => {\r\n            update_description(frm);\r\n            toggle_item_spec_display(frm);\r\n        }, 100);\r\n    }\r\n});\r\n\r\nfunction toggle_item_spec_display(frm) {\r\n    const item_spec_value = frm.doc.item_spec;\r\n    \r\n    console.log('toggle_item_spec_display called, value:', item_spec_value);\r\n    \r\n    if (!item_spec_value || item_spec_value.trim() === '') {\r\n        // Hide the field when empty\r\n        frm.set_df_property('item_spec', 'hidden', 1);\r\n        frm.refresh_field('item_spec');\r\n        \r\n        // Remove existing buttons\r\n        frm.remove_custom_button(__('Update Item Spec'));\r\n        frm.remove_custom_button(__('Refresh Description'));\r\n        \r\n        // Add the \"Update Item Spec\" button\r\n        const btn = frm.add_custom_button(__('Update Item Spec'), function() {\r\n            console.log('Update Item Spec button clicked');\r\n            \r\n            // Check if Item Spec already exists for this item\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Item Spec',\r\n                    filters: {\r\n                        'item': frm.doc.name\r\n                    },\r\n                    fields: ['name'],\r\n                    limit: 1\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.length > 0) {\r\n                        // Item Spec exists, open it for editing\r\n                        const existing_spec = r.message[0].name;\r\n                        frappe.set_route('Form', 'Item Spec', existing_spec);\r\n                    } else {\r\n                        // Set route options to prefill the new Item Spec form\r\n                        frappe.route_options = {\r\n                            'item': frm.doc.name,\r\n                            'item_name': frm.doc.item_name\r\n                        };\r\n                        \r\n                        // Navigate to NEW Item Spec form\r\n                        frappe.set_route('Form', 'Item Spec', 'new-item-spec-1');\r\n                    }\r\n                },\r\n                error: function(r) {\r\n                    frappe.msgprint(__('Error checking for existing Item Spec: {0}', [r.message || 'Unknown error']));\r\n                }\r\n            });\r\n        });\r\n        \r\n        if (btn) {\r\n            btn.addClass('btn-primary');\r\n        }\r\n        \r\n    } else {\r\n        // Remove the Update Item Spec button since field has value\r\n        frm.remove_custom_button(__('Update Item Spec'));\r\n        \r\n        // Show the field normally when it has content (leave as link)\r\n        frm.set_df_property('item_spec', 'hidden', 0);\r\n        frm.refresh_field('item_spec');\r\n        \r\n        // Add custom button to refresh description from Item Spec\r\n        if (!frm.is_new()) {\r\n            frm.remove_custom_button(__('Refresh Description')); // Remove existing first\r\n            frm.add_custom_button(__('Refresh Description'), function() {\r\n                update_description(frm);\r\n                frappe.show_alert({\r\n                    message: __('Description refreshed from Item Spec'),\r\n                    indicator: 'green'\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction update_description(frm) {\r\n    if (!frm.doc.item_spec) {\r\n        // No Item Spec linked, build description with just Item fields\r\n        build_description_without_spec(frm);\r\n        return;\r\n    }\r\n\r\n    // Fetch the linked Item Spec document\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Item Spec',\r\n            name: frm.doc.item_spec\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                build_description_with_spec(frm, r.message);\r\n            } else {\r\n                build_description_without_spec(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction build_description_with_spec(frm, item_spec) {\r\n    let parts = [];\r\n    let std_desc = frm.doc.description || \"\";\r\n    let lastPipeIndex = std_desc.lastIndexOf('|');\r\n    let additional_desc;\r\n    \r\n    if (lastPipeIndex !== -1) {\r\n        // Extract text after the last '|'\r\n        additional_desc = std_desc.slice(lastPipeIndex + 1).trim();\r\n    } else {\r\n        // No '|' found, use the whole description\r\n        additional_desc = std_desc.trim();\r\n    }\r\n    \r\n    // Add Item fields to the description\r\n    if (frm.doc.item_name) parts.push(`<b>${frm.doc.item_name}</b>`);\r\n    if (frm.doc.item_group) parts.push(`Item Group: ${frm.doc.item_group}`);\r\n    if (frm.doc.gst_hsn_code) parts.push(`HSN/SAC: ${frm.doc.gst_hsn_code}`);\r\n    \r\n    // Add Item Spec fields that were moved from Item\r\n    if (item_spec.material_id) parts.push(`Material ID: ${item_spec.material_id}`);\r\n    if (item_spec.customer_sku) parts.push(`Customer SKU: ${item_spec.customer_sku}`);\r\n    if (item_spec.vendor_product_id) parts.push(`Vendor Product ID: ${item_spec.vendor_product_id}`);\r\n    if (item_spec.color) parts.push(`Color: ${item_spec.color}`);\r\n\r\n    // Add Item Spec fields to the description (without custom_ prefix)\r\n    if (item_spec.gemstone) parts.push(`Gemstone: ${item_spec.gemstone}`);\r\n    if (item_spec.form) parts.push(`Form: ${item_spec.form}`);\r\n    if (item_spec.composition) parts.push(`Composition: ${item_spec.composition}`);\r\n    if (item_spec.dimensions) parts.push(`Dimensions: ${item_spec.dimensions}`);\r\n    if (item_spec.shape) parts.push(`Shape: ${item_spec.shape}`);\r\n    if (item_spec.metal_group) parts.push(`Metal Group: ${item_spec.metal_group}`);\r\n    if (item_spec.purity_multiplier) parts.push(`Purity Multiplier: ${item_spec.purity_multiplier}`);\r\n    if (item_spec.clasp) parts.push(`Clasp: ${item_spec.clasp}`);\r\n    if (item_spec.extender) parts.push(`Extender: ${item_spec.extender}`);\r\n    if (item_spec.diamond_cut) parts.push(`Diamond Cut: ${item_spec.diamond_cut}`);\r\n    if (item_spec.chain_length) parts.push(`Chain Length: ${item_spec.chain_length}`);\r\n    if (item_spec.finding_type) parts.push(`Finding Type: ${item_spec.finding_type}`);\r\n    if (item_spec.plating_group) parts.push(`Plating Group: ${item_spec.plating_group}`);\r\n    if (item_spec.metal_purity_plating) parts.push(`Metal Purity Plating: ${item_spec.metal_purity_plating}`);\r\n    if (item_spec.plating_thickness) parts.push(`Plating Thickness: ${item_spec.plating_thickness}`);\r\n    if (item_spec.thickness_unit_of_measure) parts.push(`Thickness UOM: ${item_spec.thickness_unit_of_measure}`);\r\n\r\n    frm.set_value(\"description\", parts.join(\" | \"));\r\n}\r\n\r\nfunction build_description_without_spec(frm) {\r\n    let parts = [];\r\n    let std_desc = frm.doc.description || \"\";\r\n    let lastPipeIndex = std_desc.lastIndexOf('|');\r\n    let additional_desc;\r\n    \r\n    if (lastPipeIndex !== -1) {\r\n        // Extract text after the last '|'\r\n        additional_desc = std_desc.slice(lastPipeIndex + 1).trim();\r\n    } else {\r\n        // No '|' found, use the whole description\r\n        additional_desc = std_desc.trim();\r\n    }\r\n    \r\n    // Add only Item fields to the description when no Item Spec is linked\r\n    if (frm.doc.item_name) parts.push(`<b>${frm.doc.item_name}</b>`);\r\n    if (frm.doc.item_group) parts.push(`Item Group: ${frm.doc.item_group}`);\r\n    if (frm.doc.gst_hsn_code) parts.push(`HSN/SAC: ${frm.doc.gst_hsn_code}`);\r\n\r\n    frm.set_value(\"description\", parts.join(\" | \"));\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.910284",
  "module": "espresso",
  "name": "BOM Item Spec Display",
  "script": "// Simple BOM Item Spec Solution - Standard Grid Selection\r\n// Document Type: BOM\r\n// Script Type: Form\r\n\r\nfrappe.ui.form.on('BOM', {\r\n    refresh: function(frm) {\r\n        add_update_spec_button(frm);\r\n    }\r\n});\r\n\r\nfunction add_update_spec_button(frm) {\r\n    if (frm.is_new()) return;\r\n    \r\n    // Check if BOM Item Spec column exists\r\n    let grid = frm.fields_dict.items?.grid;\r\n    if (!grid) return;\r\n    \r\n    let has_spec_column = false;\r\n    if (grid.doctype && frappe.meta.get_docfield(grid.doctype, 'bom_item_spec')) {\r\n        has_spec_column = true;\r\n    }\r\n    \r\n    // Only proceed if BOM Item Spec column exists\r\n    if (!has_spec_column) {\r\n        return;\r\n    }\r\n    \r\n    // Remove existing button\r\n    grid.grid_buttons.find('.btn-update-spec').remove();\r\n    \r\n    // Add \"Update Spec\" button to grid toolbar\r\n    let $button = $(`\r\n        <button class=\"btn btn-xs btn-default btn-update-spec\" style=\"margin-left: 10px;\">\r\n            <i class=\"fa fa-edit\"></i> ${__('Update Spec')}\r\n        </button>\r\n    `);\r\n    \r\n    grid.grid_buttons.append($button);\r\n    \r\n    $button.on('click', function() {\r\n        handle_update_spec(frm);\r\n    });\r\n}\r\n\r\nfunction handle_update_spec(frm) {\r\n    let grid = frm.fields_dict.items.grid;\r\n    let selected_items = grid.get_selected_children();\r\n    \r\n    if (selected_items.length === 0) {\r\n        frappe.msgprint(__('Please select at least one item from the BOM items table.'));\r\n        return;\r\n    }\r\n    \r\n    if (selected_items.length === 1) {\r\n        // Single item selected - open directly\r\n        let item = selected_items[0];\r\n        open_item_spec(item, frm.doc.name);\r\n    } else {\r\n        // Multiple items selected - show confirmation\r\n        frappe.confirm(\r\n            __('You have selected {0} items. Do you want to open specifications for all selected items?', [selected_items.length]),\r\n            function() {\r\n                // Open specs for all selected items\r\n                selected_items.forEach(function(item, index) {\r\n                    setTimeout(function() {\r\n                        open_item_spec(item, frm.doc.name);\r\n                    }, index * 300); // Small delay to avoid conflicts\r\n                });\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nfunction open_item_spec(bom_item, bom_name) {\r\n    // Check if BOM Item Spec already exists\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'BOM Item Spec',\r\n            filters: {'bom_item_id': bom_item.name},\r\n            fields: ['name'],\r\n            limit: 1\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                // Open existing spec\r\n                frappe.set_route('Form', 'BOM Item Spec', r.message[0].name);\r\n            } else {\r\n                // Create new spec\r\n\r\n                frappe.route_options = {\r\n                    'bom_item_id': bom_item.name,\r\n                    'bom': bom_name,\r\n                    'item': bom_item.item_code,\r\n                    'item_name': bom_item.item_name || bom_item.description || ''\r\n                };\r\n\t\t\t\t//frappe.new_doc('BOM Item Spec');\r\n\t\t\t\t\r\n                frappe.set_route('Form', 'BOM Item Spec', 'new-bom-item-spec-1');\r\n\r\n\t\t\t\t//create_bom_item_spec_from_bom_item(bom_name, bom_item.name)\r\n            }\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.091639",
  "module": "espresso",
  "name": "Customer RING Functionality",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    refresh: show_ring_button\r\n});\r\n\r\n\r\nfunction show_ring_button(frm) {\r\n    // frm.clear_custom_buttons();\r\n    if ((frm.doc.customer_worksheet_items || []).some(d => ['Ring', 'Set'].includes(d.item_group) && !d.size)) {\r\n        frm.add_custom_button('Add Ring Sizes', () => show_ring_item_table_popup(frm));\r\n    }\r\n}\r\n\r\nfunction show_ring_item_table_popup(frm) {\r\n    const ALLOWED_ITEM_GROUPS = ['Ring', 'Set'];\r\n\r\n    const valid_items = (frm.doc.customer_worksheet_items || []).filter(item =>\r\n        ALLOWED_ITEM_GROUPS.includes(item.item_group) && !item.size\r\n    );\r\n\r\n    if (valid_items.length === 0) {\r\n        frappe.msgprint(__('No Ring/Set items with empty Size found.'));\r\n        return;\r\n    }\r\n\r\n    if (valid_items.length === 1) {\r\n        const selected_item = valid_items[0];\r\n        show_ring_size_dialog(frm, selected_item);\r\n        return;\r\n    }\r\n\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Select Ring/Set Item',\r\n        fields: [\r\n            {\r\n                fieldtype: 'HTML',\r\n                fieldname: 'item_table_html'\r\n            }\r\n        ],\r\n        primary_action_label: 'Proceed',\r\n        primary_action(values) {\r\n            const selected = dialog.$wrapper.find('input[name=\"select_item\"]:checked').val();\r\n\r\n            if (!selected) {\r\n                frappe.msgprint(__('Please select an item.'));\r\n                return;\r\n            }\r\n\r\n            const selected_item = valid_items.find(i => i.name === selected);\r\n            dialog.hide();\r\n\r\n            show_ring_size_dialog(frm, selected_item);\r\n        }\r\n    });\r\n\r\n    const rows_html = valid_items.map(item => `\r\n        <tr>\r\n            <td><input type=\"radio\" name=\"select_item\" value=\"${item.name}\"></td>\r\n            <td>${item.item_code}</td>\r\n            <td>${item.item_name}</td>\r\n            <td>${item.qty}</td>\r\n        </tr>\r\n    `).join('');\r\n\r\n    const table_html = `\r\n        <table class=\"table table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Select</th>\r\n                    <th style=\"width: 100px;\">Item Code</th>\r\n                    <th>Item Name</th>\r\n                    <th>Qty</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                ${rows_html}\r\n            </tbody>\r\n        </table>\r\n    `;\r\n\r\n    dialog.fields_dict.item_table_html.$wrapper.html(table_html);\r\n    dialog.show();\r\n}\r\n\r\nfunction show_ring_size_dialog(frm, item) {\r\n    const ordered_qty = item.qty;\r\n    const size_list = [5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Enter Sizes & Quantities for Ring/Set',\r\n        fields: [\r\n            { fieldtype: 'HTML', fieldname: 'header_section' },\r\n            { fieldtype: 'HTML', fieldname: 'ring_table' }\r\n        ],\r\n        primary_action_label: 'Update',\r\n        primary_action() {\r\n            let data = [];\r\n            let updated_qty = 0;\r\n\r\n            $(dialog.$wrapper).find('.ring-row').each(function () {\r\n                const size = $(this).find('.ring-size').val();\r\n                const qty = parseInt($(this).find('.ring-qty').val()) || 0;\r\n                if (size && qty > 0) {\r\n                    data.push({ size, qty });\r\n                    updated_qty += qty;\r\n                }\r\n            });\r\n\r\n            if (data.length === 0) {\r\n                frappe.msgprint(__('Please enter at least one valid size and quantity.'));\r\n                return;\r\n            }\r\n\r\n            const grid_row = frm.get_field(\"customer_worksheet_items\").grid.grid_rows_by_docname[item.name];\r\n            if (grid_row) grid_row.remove();\r\n\r\n            const base_data = { ...item };\r\n\r\n            data.forEach(row => {\r\n                frm.add_child('customer_worksheet_items', {\r\n                    ...base_data,\r\n                    qty: row.qty,\r\n                    size: row.size,\r\n                    amount: row.qty * item.rate \r\n                });\r\n            });\r\n\r\n            frm.refresh_field('customer_worksheet_items');\r\n            dialog.hide();\r\n        }\r\n    });\r\n\r\n    \r\n    const header_html = `\r\n        <div class=\"row\" style=\"display: flex; gap: 10px;\">\r\n            <div class=\"col\" style=\"background-color:#ffebee; padding: 10px; border-radius: 4px; width: 100%;\">\r\n                <b>Item:</b> ${item.item_code}\r\n                <span style=\"float:right\"><b>Ordered Qty:</b> ${ordered_qty}</span>\r\n            </div>\r\n            <div class=\"col\" style=\"background-color:#e8f5e9; padding: 10px; border-radius: 4px; width: 100%;\">\r\n                <b>Updated Qty:</b> <span class=\"updated-qty\">0</span>\r\n                <span style=\"float:right\"><b>Difference:</b> <span class=\"qty-diff\">${-ordered_qty}</span></span>\r\n            </div>\r\n        </div><br/>\r\n    `;\r\n    dialog.fields_dict.header_section.$wrapper.html(header_html);\r\n\r\n    // Size rows\r\n    const rows_html = size_list.map(size => `\r\n        <div class=\"ring-row\" style=\"display: flex; gap: 10px; margin-bottom: 8px;\">\r\n            <input type=\"text\" class=\"ring-size form-control\" value=\"${size}\" placeholder=\"Size\" style=\"width: 100%;\">\r\n            <input type=\"number\" class=\"ring-qty form-control\" placeholder=\"Enter qty\" style=\"width: 100%;\">\r\n        </div>\r\n    `).join('');\r\n\r\n    dialog.fields_dict.ring_table.$wrapper.html(`\r\n        <div>\r\n            <div style=\"display: flex; font-weight: bold; gap: 10px; margin-bottom: 8px;\">\r\n                <div style=\"width: 100%;\">Size</div>\r\n                <div style=\"width: 100%;\">Order Qty</div>\r\n            </div>\r\n            <div class=\"ring-rows\">\r\n                ${rows_html}\r\n            </div>\r\n            <button type=\"button\" class=\"btn btn-sm btn-secondary add-ring-row\" style=\"margin: 10px 0;\">Add Row</button>\r\n            <div style=\"margin-top:10px; font-size: 12px; color: #996600; background-color: #fff8e1; padding: 8px; border-radius: 4px;\">\r\n                <b>Note:</b> You can edit or add any sizes as needed. Ensure total matches ordered quantity.\r\n            </div>\r\n        </div>\r\n    `);\r\n\r\n    function update_qty_status() {\r\n        let total = 0;\r\n        dialog.$wrapper.find('.ring-qty').each(function () {\r\n            total += parseInt($(this).val()) || 0;\r\n        });\r\n        const diff = total - ordered_qty;\r\n        dialog.$wrapper.find('.updated-qty').text(total);\r\n        dialog.$wrapper.find('.qty-diff').text(diff);\r\n        if (diff === 0) {\r\n            dialog.get_primary_btn().removeClass('btn-disabled').show();\r\n        } else {\r\n            dialog.get_primary_btn().hide();\r\n        }\r\n    }\r\n\r\n    dialog.$wrapper.on('input', '.ring-qty', update_qty_status);\r\n\r\n    dialog.$wrapper.on('click', '.add-ring-row', function () {\r\n        const new_row = `\r\n            <div class=\"ring-row\" style=\"display: flex; gap: 10px; margin-bottom: 8px;\">\r\n                <input type=\"text\" class=\"ring-size form-control\" placeholder=\"Size\" style=\"width: 100%;\">\r\n                <input type=\"number\" class=\"ring-qty form-control\" placeholder=\"Enter qty\" style=\"width: 100%;\">\r\n            </div>\r\n        `;\r\n        dialog.$wrapper.find('.ring-rows').append(new_row);\r\n        update_qty_status();\r\n    });\r\n\r\n    dialog.get_primary_btn().hide();\r\n    dialog.show();\r\n}\r\n\r\n\r\n\r\nfrappe.ui.form.on('Customer Worksheet Items', {\r\n    item_group: show_ring_button,\r\n    customer_worksheet_items_add: show_ring_button\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "ExCustomHTMLBlock",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.091717",
  "module": "espresso",
  "name": "CustomHTMLBlock",
  "script": "//frappe.ui.form.on('ExCustomHTMLBlock', {\n//\trefresh(frm) {\n\t\t// your code here\n//\t}\n//})\nfrappe.ui.form.on('ExCustomHTMLBlock', {\n    onload: function(frm) {\n        frm.fields_dict.training_video.$wrapper.html(`\n            <div style=\"margin: 20px 0;\">\n                <h4>How to Fill This Form</h4>\n                <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eVoRmpDjB-M?si=YP9biwIeEdecEMQ_\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n            </div>\n        `);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM Item Spec",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.876360",
  "module": "espresso",
  "name": "BOM Item Spec Client Script",
  "script": "// BOM Item Spec Client Script - Complete Enhanced Working Version\r\n// Go to: Setup > Customization > Client Script > New\r\n// DocType: BOM Item Spec\r\n// Script Type: Form\r\n\r\n// ============ DEBOUNCE MECHANISM FOR CONCURRENT UPDATES ============\r\n\r\nlet updateTimeout = null;\r\n\r\nfunction debounced_update_parent_bom_item_description(spec_frm) {\r\n    // Don't update if form is not ready or in transitional state\r\n    if (!spec_frm || !spec_frm.doc || spec_frm.is_new() || spec_frm._updating_country_options) {\r\n        return;\r\n    }\r\n    \r\n    // Clear any existing timeout to prevent multiple simultaneous updates\r\n    if (updateTimeout) {\r\n        clearTimeout(updateTimeout);\r\n    }\r\n    \r\n    // Set a new timeout - only update after 800ms of no field changes\r\n    updateTimeout = setTimeout(() => {\r\n        // Double-check form state before updating\r\n        if (spec_frm && spec_frm.doc && !spec_frm._updating_country_options) {\r\n            update_parent_bom_item_description(spec_frm);\r\n        }\r\n        updateTimeout = null;\r\n    }, 800);\r\n}\r\n\r\n\r\n\r\nfrappe.ui.form.on('BOM Item Spec', {\r\n    setup: function(frm) {\r\n        // Initialize country of origin options\r\n        if (frm.doc.gemstone) {\r\n            update_country_of_origin_options(frm);\r\n        }\r\n    },\r\n\r\n    onload: function(frm) {\r\n        // Set initial country of origin requirements\r\n        set_country_of_origin_requirements(frm);\r\n    },\r\n\r\n    // Auto-update parent BOM Item description when spec fields change (debounced)\r\n    gemstone: function(frm) {\r\n        handle_gemstone_change(frm);\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    country_of_origin: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    // Updated: Handle stone_treatments table multi-select\r\n    stone_treatments: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    grade: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    cut: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    setting_type: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    merch_color_attribute: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    stone_pieces: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    avg_carat_weight: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    sku_carat_weight: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    avg_metal_weight: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    sku_metal_weight: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    length: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    weight_per_piece: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    metal_group: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    item_group: function(frm) {\r\n        set_country_of_origin_requirements(frm);\r\n        handle_item_group_requirements(frm);\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n\r\n    uom: function(frm) {\r\n        handle_uom_requirements(frm);\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n\r\n    refresh: function(frm) {\r\n        if (!frm.is_new()) {\r\n            add_spec_utility_buttons(frm);\r\n        }\r\n        \r\n        // Set field requirements based on current values\r\n        set_country_of_origin_requirements(frm);\r\n        handle_uom_requirements(frm);\r\n        \r\n    },\r\n\r\n    validate: function(frm) {\r\n        validate_bom_item_spec(frm);\r\n    },\r\n\r\n    before_save: function(frm) {\r\n        // Add any before save logic here if needed\r\n    },\r\n\r\n    onload_post_render: function(frm) {\r\n        // Add delete warning after form is fully loaded\r\n        if (!frm.is_new()) {\r\n            add_delete_warning(frm);\r\n        }\r\n    }\r\n});\r\n\r\n// Handle stone treatments child table changes\r\nfrappe.ui.form.on('Stone Treatment Multi-select', {\r\n    stone_treatments_add: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    stone_treatments_remove: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    },\r\n    \r\n    stone_treatment: function(frm) {\r\n        debounced_update_parent_bom_item_description(frm);\r\n    }\r\n});\r\n\r\n// ============ GEMSTONE AND COUNTRY OF ORIGIN LOGIC ============\r\n\r\nfunction handle_gemstone_change(frm) {\r\n    if (frm.doc.gemstone) {\r\n        // Update country of origin options based on gemstone\r\n        update_country_of_origin_options(frm);\r\n        \r\n        // Only clear country of origin if it's not already being processed\r\n        if (!frm._updating_country_options) {\r\n            frm._updating_country_options = true;\r\n            setTimeout(() => {\r\n                // Clear current country of origin since options changed\r\n                frm.set_value('country_of_origin', null);\r\n                frm._updating_country_options = false;\r\n            }, 100);\r\n        }\r\n        \r\n        // Set requirement for country of origin\r\n        set_country_of_origin_requirements(frm);\r\n        \r\n        console.log(`Gemstone changed to: ${frm.doc.gemstone}`);\r\n    } else {\r\n        // Clear country of origin options and value\r\n        if (!frm._updating_country_options) {\r\n            frm.set_value('country_of_origin', null);\r\n        }\r\n        set_country_of_origin_requirements(frm);\r\n    }\r\n}\r\n\r\nfunction update_country_of_origin_options(frm) {\r\n    if (!frm.doc.gemstone) return;\r\n\r\n    frappe.call({\r\n        method: \"get_country_of_origin\",\r\n        args: {\r\n            gemstone: frm.doc.gemstone\r\n        },\r\n        callback: function(r) {\r\n            if (r.data) {\r\n                const allowed_countries = r.data.map(entry => entry[1]);\r\n                let unique_countries = [...new Set(allowed_countries)];\r\n                console.log(\"Available countries for\", frm.doc.gemstone, \":\", unique_countries);\r\n                \r\n                // Update field options\r\n                frm.set_df_property('country_of_origin', 'options', unique_countries);\r\n                frm.refresh_field('country_of_origin');\r\n            }\r\n        },\r\n        error: function(err) {\r\n            console.error(\"Error fetching country of origin options:\", err);\r\n        }\r\n    });\r\n\r\n    // Also get from Gemstones doctype as fallback/additional validation\r\n    frappe.db.get_doc(\"Gemstones\", frm.doc.gemstone)\r\n        .then(gemstone => {\r\n            if (gemstone && gemstone.country_of_origin) {\r\n                const allowed_countries = gemstone.country_of_origin.map(co => co.country);\r\n                console.log(\"Gemstone doc countries:\", allowed_countries);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(\"Gemstone document not found or no country data\");\r\n        });\r\n}\r\n\r\nfunction set_country_of_origin_requirements(frm) {\r\n    const required_groups = [\"Stone\", \"Pearl\", \"Bead\"];\r\n    const is_required = frm.doc.item_group && required_groups.includes(frm.doc.item_group) && !!frm.doc.gemstone;\r\n    \r\n    frm.set_df_property('country_of_origin', 'reqd', is_required);\r\n    frm.refresh_field('country_of_origin');\r\n    \r\n    console.log(`Country of origin required: ${is_required} (Item Group: ${frm.doc.item_group || 'undefined'}, Gemstone: ${frm.doc.gemstone || 'undefined'})`);\r\n}\r\n\r\n// ============ ITEM GROUP AND UOM REQUIREMENTS ============\r\n\r\nfunction handle_item_group_requirements(frm) {\r\n    // Set field requirements based on item group\r\n    if (frm.doc.item_group === \"Stone\") {\r\n        frm.set_df_property('stone_pieces', 'reqd', false);\r\n        frm.set_df_property('avg_carat_weight', 'reqd', false);\r\n        \r\n        // UOM-specific requirements will be handled in handle_uom_requirements\r\n        if (frm.doc.uom) {\r\n            handle_uom_requirements(frm);\r\n        }\r\n    } else {\r\n        // For non-stone items, these fields are not required\r\n        frm.set_df_property('stone_pieces', 'reqd', false);\r\n        frm.set_df_property('avg_carat_weight', 'reqd', false);\r\n    }\r\n}\r\n\r\nfunction handle_uom_requirements(frm) {\r\n    // Reset requirements\r\n    frm.set_df_property('avg_carat_weight', 'reqd', false);\r\n    frm.set_df_property('stone_pieces', 'reqd', false);\r\n\r\n    if (frm.doc.item_group === \"Stone\") {\r\n        if (frm.doc.uom === \"Carat\") {\r\n            frm.set_df_property('avg_carat_weight', 'reqd', true);\r\n            // Set qty to avg_carat_weight if available\r\n            if (frm.doc.avg_carat_weight) {\r\n                frm.set_value('qty', frm.doc.avg_carat_weight);\r\n            }\r\n        } else if (frm.doc.uom === \"Piece\") {\r\n            frm.set_df_property('stone_pieces', 'reqd', true);\r\n            // Set qty to stone_pieces if available\r\n            if (frm.doc.stone_pieces) {\r\n                frm.set_value('qty', frm.doc.stone_pieces);\r\n            }\r\n        }\r\n    }\r\n    \r\n    frm.refresh_fields();\r\n}\r\n\r\n// ============ DESCRIPTION UPDATE LOGIC ============\r\n\r\nfunction update_parent_bom_item_description(spec_frm) {\r\n    if (!spec_frm.doc.bom || !spec_frm.doc.bom_item_id) {\r\n        return;\r\n    }\r\n    \r\n    // Check BOM status before updating\r\n    frappe.db.get_value('BOM', spec_frm.doc.bom, 'docstatus')\r\n        .then(r => {\r\n            if (r && r.message && r.message.docstatus !== 0) {\r\n                // Only show alert if user manually clicked update button\r\n                // Don't show for automatic updates\r\n                return;\r\n            }\r\n            \r\n            // Build description from current spec form data\r\n            const description = build_description_from_current_spec(spec_frm.doc);\r\n            \r\n            // Update BOM Item description in database (silently for auto-updates)\r\n            frappe.call({\r\n                method: 'frappe.client.set_value',\r\n                args: {\r\n                    doctype: 'BOM Item',\r\n                    name: spec_frm.doc.bom_item_id,\r\n                    fieldname: 'description',\r\n                    value: description\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        // Refresh only the specific row in parent BOM form if it's open\r\n                        refresh_specific_bom_item_row(spec_frm.doc.bom, spec_frm.doc.bom_item_id);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n}\r\n\r\n\r\nfunction build_description_from_current_spec(spec_doc) {\r\n    let parts = [];\r\n\r\n    // Helper function to format decimal values\r\n    function format_number(value, decimals = 2) {\r\n        if (!value || value === 0) return null;\r\n        return parseFloat(value).toFixed(decimals).replace(/\\.?0+$/, '');\r\n    }\r\n\r\n    // Helper function to format weight with unit\r\n    function format_weight(value, unit = 'g') {\r\n        const formatted = format_number(value);\r\n        return formatted ? `${formatted}${unit}` : null;\r\n    }\r\n\r\n    // Helper function to format carat weight\r\n    function format_carat(value) {\r\n        const formatted = format_number(value);\r\n        return formatted ? `${formatted}ct` : null;\r\n    }\r\n\r\n    // Helper function to format length\r\n    function format_length(value) {\r\n        const formatted = format_number(value, 1);\r\n        return formatted ? `${formatted}mm` : null;\r\n    }\r\n\r\n    // Build description with proper formatting\r\n    if (spec_doc.item) {\r\n        parts.push(`Item: ${spec_doc.item}`);\r\n    }\r\n    \r\n    if (spec_doc.item_group) {\r\n        parts.push(`Item Group: ${spec_doc.item_group}`);\r\n    }\r\n    \r\n    if (spec_doc.gemstone) {\r\n        parts.push(`Gemstone: ${spec_doc.gemstone}`);\r\n    }\r\n    \r\n    // Handle stone_treatments multi-select table\r\n    if (spec_doc.stone_treatments && spec_doc.stone_treatments.length > 0) {\r\n        const treatments = spec_doc.stone_treatments.map(t => t.stone_treatment).filter(t => t).join(', ');\r\n        if (treatments) {\r\n            parts.push(`Stone Treatments: ${treatments}`);\r\n        }\r\n    }\r\n    \r\n    if (spec_doc.grade) {\r\n        parts.push(`Grade: ${spec_doc.grade}`);\r\n    }\r\n    \r\n    if (spec_doc.cut) {\r\n        parts.push(`Cut: ${spec_doc.cut}`);\r\n    }\r\n    \r\n    if (spec_doc.setting_type) {\r\n        parts.push(`Setting Type: ${spec_doc.setting_type}`);\r\n    }\r\n    \r\n    if (spec_doc.merch_color_attribute) {\r\n        parts.push(`Merch Color: ${spec_doc.merch_color_attribute}`);\r\n    }\r\n    \r\n    // Format stone pieces with \"pcs\" unit\r\n    if (spec_doc.stone_pieces) {\r\n        parts.push(`Pieces: ${spec_doc.stone_pieces} pcs`);\r\n    }\r\n    \r\n    if (spec_doc.country_of_origin) {\r\n        parts.push(`Country: ${spec_doc.country_of_origin}`);\r\n    }\r\n    \r\n    // Format weights with proper units and decimal places\r\n    const sku_weight = format_carat(spec_doc.sku_carat_weight);\r\n    if (sku_weight) {\r\n        parts.push(`SKU Weight: ${sku_weight}`);\r\n    }\r\n    \r\n    const avg_carat = format_carat(spec_doc.avg_carat_weight);\r\n    if (avg_carat) {\r\n        parts.push(`Avg Carat: ${avg_carat}`);\r\n    }\r\n    \r\n    const metal_weight = format_weight(spec_doc.avg_metal_weight);\r\n    if (metal_weight) {\r\n        parts.push(`Metal Weight: ${metal_weight}`);\r\n    }\r\n    \r\n    const sku_metal_weight = format_weight(spec_doc.sku_metal_weight);\r\n    if (sku_metal_weight) {\r\n        parts.push(`SKU Metal Weight: ${sku_metal_weight}`);\r\n    }\r\n    \r\n    if (spec_doc.metal_group) {\r\n        parts.push(`Metal Group: ${spec_doc.metal_group}`);\r\n    }\r\n    \r\n    // Format length with mm unit\r\n    const length = format_length(spec_doc.length);\r\n    if (length) {\r\n        parts.push(`Length: ${length}`);\r\n    }\r\n    \r\n    // Format weight per piece\r\n    const weight_per_piece = format_weight(spec_doc.weight_per_piece);\r\n    if (weight_per_piece) {\r\n        parts.push(`Weight/Piece: ${weight_per_piece}`);\r\n    }\r\n\r\n    return parts.join(' | ');\r\n}\r\n\r\nfunction refresh_specific_bom_item_row(bom_name, bom_item_id) {\r\n    // Check if the parent BOM form is currently open and refresh only the specific row\r\n    if (window.cur_frm && window.cur_frm.doc && window.cur_frm.doc.name === bom_name) {\r\n        console.log(`Refreshing specific BOM Item row: ${bom_item_id} in BOM: ${bom_name}`);\r\n        \r\n        // Find the specific row in the items table\r\n        if (window.cur_frm.doc.items) {\r\n            const item_index = window.cur_frm.doc.items.findIndex(item => item.name === bom_item_id);\r\n            if (item_index >= 0) {\r\n                // Refresh only the specific row\r\n                window.cur_frm.fields_dict.items.grid.grid_rows[item_index].refresh();\r\n                console.log(`Refreshed BOM Item row at index: ${item_index}`);\r\n            } else {\r\n                // Fallback: refresh entire items field if specific row not found\r\n                window.cur_frm.refresh_field('items');\r\n                console.log(\"Specific row not found, refreshed entire items table\");\r\n            }\r\n        }\r\n    } else {\r\n        console.log(`Parent BOM form (${bom_name}) is not currently open`);\r\n    }\r\n}\r\n\r\n// ============ UTILITY BUTTONS ============\r\n\r\nfunction add_spec_utility_buttons(frm) {\r\n    // Primary action - most commonly used\r\n    frm.add_custom_button(__('🔄 Fetch from BOM Item'), function() {\r\n        fetch_fields_from_bom_item(frm);\r\n    }).addClass('btn-primary');\r\n    \r\n    // Secondary actions grouped\r\n    frm.add_custom_button(__('Update BOM Item Description'), function() {\r\n        // Use direct update for manual button clicks (not debounced)\r\n        update_parent_bom_item_description(frm);\r\n    }, __('Actions'));\r\n    \r\n    frm.add_custom_button(__('Sync to BOM Item Custom Fields'), function() {\r\n        sync_spec_to_bom_item_custom_fields(frm);\r\n    }, __('Actions'));\r\n    \r\n    // Navigation buttons grouped\r\n    frm.add_custom_button(__('View Parent BOM'), function() {\r\n        if (frm.doc.bom) {\r\n            frappe.set_route('Form', 'BOM', frm.doc.bom);\r\n        } else {\r\n            frappe.msgprint('No parent BOM linked');\r\n        }\r\n    }, __('Navigate'));\r\n    \r\n    frm.add_custom_button(__('View BOM Item'), function() {\r\n        if (frm.doc.bom_item_id) {\r\n            frappe.set_route('Form', 'BOM Item', frm.doc.bom_item_id);\r\n        } else {\r\n            frappe.msgprint('No BOM Item linked');\r\n        }\r\n    }, __('Navigate'));\r\n    \r\n    // Add help button for usage guidance\r\n    frm.add_custom_button(__('❓ Help'), function() {\r\n        show_usage_help();\r\n    }, __('Help'));\r\n}\r\n\r\nfunction show_usage_help() {\r\n    frappe.msgprint({\r\n        title: 'BOM Item Spec - Usage Guide',\r\n        message: `\r\n            <div style=\"margin-bottom: 15px;\">\r\n                <strong>🔧 How to use BOM Item Spec effectively:</strong>\r\n            </div>\r\n            \r\n            <div style=\"background: #e3f2fd; padding: 12px; border-radius: 6px; margin: 10px 0;\">\r\n                <strong>🔄 Fetch from BOM Item:</strong><br>\r\n                Populates all spec fields from the linked BOM Item's custom fields. Use this when the BOM Item already has data.\r\n            </div>\r\n            \r\n            <div style=\"background: #e8f5e8; padding: 12px; border-radius: 6px; margin: 10px 0;\">\r\n                <strong>📝 Update BOM Item Description:</strong><br>\r\n                Updates the BOM Item's description with current spec data. Happens automatically when you change fields.\r\n            </div>\r\n            \r\n            <div style=\"background: #fff3e0; padding: 12px; border-radius: 6px; margin: 10px 0;\">\r\n                <strong>🔄 Sync to BOM Item Custom Fields:</strong><br>\r\n                Copies spec data back to BOM Item custom fields. Useful for keeping BOM Item updated.\r\n            </div>\r\n            \r\n            <div style=\"background: #f3e5f5; padding: 12px; border-radius: 6px; margin: 10px 0;\">\r\n                <strong>🎯 Navigation:</strong><br>\r\n                Quick links to view the parent BOM or linked BOM Item for context.\r\n            </div>\r\n            \r\n            <div style=\"background: #ffebee; padding: 12px; border-radius: 6px; margin: 10px 0;\">\r\n                <strong>⚠️ Important Notes:</strong><br>\r\n                • Stone Treatments: Use the multi-select table for multiple treatments<br>\r\n                • Country of Origin: Required for Stone, Pearl, and Bead items with gemstones<br>\r\n                • Descriptions only update when BOM is in Draft state\r\n            </div>\r\n        `,\r\n        indicator: 'blue'\r\n    });\r\n}\r\n\r\n// ============ HELPER FUNCTIONS ============\r\n\r\n\r\nfunction add_delete_warning(frm) {\r\n    // Add warning for spec deletion\r\n    if (frm.doc.bom_item_id) {\r\n        frm.page.add_action_icon('fa fa-exclamation-triangle', function() {\r\n            frappe.msgprint({\r\n                title: 'Delete Warning',\r\n                message: `\r\n                    <div style=\"margin-bottom: 10px;\">\r\n                        <strong>⚠️ Important:</strong> Deleting this BOM Item Spec will:\r\n                    </div>\r\n                    <ul style=\"margin-left: 15px;\">\r\n                        <li>Remove the detailed specifications for BOM Item: <strong>${frm.doc.bom_item_id}</strong></li>\r\n                        <li>Keep the BOM Item but lose the enhanced description</li>\r\n                        <li>Require manual recreation if needed later</li>\r\n                    </ul>\r\n                    <div style=\"margin-top: 10px;\">\r\n                        Consider using \"Update BOM Item Description\" before deleting to preserve the description.\r\n                    </div>\r\n                `,\r\n                indicator: 'orange'\r\n            });\r\n        }, 'Delete Warning');\r\n    }\r\n}\r\n\r\n// ============ FETCH FROM BOM ITEM LOGIC ============\r\n\r\nfunction fetch_fields_from_bom_item(frm) {\r\n    if (!frm.doc.bom_item_id) {\r\n        frappe.msgprint({\r\n            title: 'No BOM Item Linked',\r\n            message: 'Please link a BOM Item first before fetching data.',\r\n            indicator: 'orange'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    // Check if there are existing values that might be overwritten\r\n    const existing_fields = [];\r\n    const field_list = [\r\n        'item', 'item_group', 'gemstone', 'grade', 'cut', 'setting_type', \r\n        'merch_color_attribute', 'stone_pieces', 'country_of_origin', 'avg_carat_weight', \r\n        'sku_carat_weight', 'avg_metal_weight', 'sku_metal_weight', 'metal_group', \r\n        'length', 'weight_per_piece'\r\n    ];\r\n    \r\n    field_list.forEach(field => {\r\n        if (frm.doc[field]) {\r\n            existing_fields.push(field);\r\n        }\r\n    });\r\n    \r\n    // Check stone_treatments table\r\n    if (frm.doc.stone_treatments && frm.doc.stone_treatments.length > 0) {\r\n        existing_fields.push('stone_treatments');\r\n    }\r\n    \r\n    // Show confirmation ONLY if there are existing values\r\n    if (existing_fields.length > 0) {\r\n        frappe.confirm(\r\n            `<strong>Overwrite ${existing_fields.length} existing fields?</strong><br><br>\r\n            <small>Fields: ${existing_fields.join(', ')}</small>`,\r\n            function() {\r\n                // User confirmed - proceed with fetch\r\n                perform_fetch_from_bom_item_via_api(frm);\r\n            }\r\n            // No cancel message needed - silence is better\r\n        );\r\n    } else {\r\n        // No existing data - proceed directly without any alerts\r\n        perform_fetch_from_bom_item_via_api(frm);\r\n    }\r\n}\r\n\r\nfunction perform_fetch_from_bom_item_via_api(frm) {\r\n    const fields_list = [\r\n        'item_code', 'item_name',\r\n        'custom_item_group', 'custom_gemstone', 'custom_grade',\r\n        'custom_cut', 'custom_setting_type', 'custom_merch_color__attribute',\r\n        'custom_stone_pieces', 'custom_country_of_origin', 'custom_avg_carat_weight', \r\n        'custom_sku_weight', 'custom_metal_group', 'custom_metal_weight', \r\n        'custom_sku_metal_weight', 'custom_length', 'custom_weight_perpiece',\r\n        'custom_stone_treatment'\r\n    ];\r\n\r\n    const requestData = {\r\n        doctype: 'BOM Item',\r\n        name: frm.doc.bom_item_id,\r\n        fields: fields_list,\r\n        limit: 500\r\n    };\r\n\r\n    fetch('/api/method/get_doc_with_children', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-Frappe-CSRF-Token': frappe.csrf_token\r\n        },\r\n        body: JSON.stringify(requestData)\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success && data.result && data.result.length > 0) {\r\n            let bom_item_data = data.result[0];\r\n            populate_spec_fields_from_bom_data_api(frm, bom_item_data);\r\n        } else if (data.success === false) {\r\n            frappe.msgprint({\r\n                title: 'Error',\r\n                message: data.error || 'Failed to fetch BOM Item data.',\r\n                indicator: 'red'\r\n            });\r\n        } else {\r\n            frappe.msgprint('No data found in BOM Item');\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('JSON API Error:', error);\r\n        frappe.msgprint({\r\n            title: 'API Error',\r\n            message: 'Failed to fetch BOM Item data. Please try again.',\r\n            indicator: 'red'\r\n        });\r\n    });\r\n}\r\n\r\nfunction populate_spec_fields_from_bom_data_api(frm, bom_data) {\r\n    let populated_fields = [];\r\n    \r\n    // Temporarily disable alerts during field population\r\n    const original_show_alert = frappe.show_alert;\r\n    frappe.show_alert = function(alert) {\r\n        // Suppress valuation rate alerts during fetch\r\n        if (alert && alert.message && \r\n            (alert.message.includes('Valuation Rate not found') || \r\n             alert.message.includes('valuation_rate'))) {\r\n            return; // Suppress these alerts\r\n        }\r\n        // Allow other alerts through\r\n        original_show_alert.call(this, alert);\r\n    };\r\n    \r\n    try {\r\n        // Map basic fields\r\n        const basic_field_mapping = {\r\n            'item_code': 'item'\r\n        };\r\n        \r\n        Object.keys(basic_field_mapping).forEach(bom_field => {\r\n            const spec_field = basic_field_mapping[bom_field];\r\n            if (bom_data[bom_field]) {\r\n                frm.set_value(spec_field, bom_data[bom_field]);\r\n                populated_fields.push(spec_field);\r\n            }\r\n        });\r\n        \r\n        // Map custom fields\r\n        const custom_field_mapping = {\r\n            'custom_item_group': 'item_group',\r\n            'custom_gemstone': 'gemstone',\r\n            'custom_grade': 'grade',\r\n            'custom_cut': 'cut',\r\n            'custom_setting_type': 'setting_type',\r\n            'custom_merch_color__attribute': 'merch_color_attribute',\r\n            'custom_stone_pieces': 'stone_pieces',\r\n            'custom_country_of_origin': 'country_of_origin',\r\n            'custom_avg_carat_weight': 'avg_carat_weight',\r\n            'custom_sku_weight': 'sku_carat_weight',\r\n            'custom_metal_group': 'metal_group',\r\n            'custom_metal_weight': 'avg_metal_weight',\r\n            'custom_sku_metal_weight': 'sku_metal_weight',\r\n            'custom_length': 'length',\r\n            'custom_weight_perpiece': 'weight_per_piece'\r\n        };\r\n        \r\n        Object.keys(custom_field_mapping).forEach(bom_field => {\r\n            const spec_field = custom_field_mapping[bom_field];\r\n            const value = bom_data[bom_field];\r\n            \r\n            if (value !== null && value !== undefined && value !== '') {\r\n                frm.set_value(spec_field, value);\r\n                populated_fields.push(spec_field);\r\n            }\r\n        });\r\n        \r\n        // Handle stone_treatment -> stone_treatments conversion\r\n        if (bom_data.custom_stone_treatment) {\r\n            frm.clear_table('stone_treatments');\r\n            let row = frm.add_child('stone_treatments');\r\n            row.stone_treatment = bom_data.custom_stone_treatment;\r\n            frm.refresh_field('stone_treatments');\r\n            populated_fields.push('stone_treatments');\r\n        }\r\n        \r\n    } finally {\r\n        // Always restore the original show_alert function\r\n        setTimeout(() => {\r\n            frappe.show_alert = original_show_alert;\r\n        }, 1000); // Restore after 1 second to catch any delayed alerts\r\n    }\r\n    \r\n    // Single success message - no verbose dialogs\r\n    if (populated_fields.length > 0) {\r\n        frappe.show_alert({\r\n            message: `Fetched ${populated_fields.length} fields successfully`,\r\n            indicator: 'green'\r\n        });\r\n        \r\n        // Update country of origin options if gemstone was populated\r\n        if (populated_fields.includes('gemstone') && bom_data.custom_gemstone) {\r\n            setTimeout(() => {\r\n                update_country_of_origin_options(frm);\r\n                set_country_of_origin_requirements(frm);\r\n            }, 500);\r\n        }\r\n        \r\n        // Set field requirements\r\n        set_country_of_origin_requirements(frm);\r\n        handle_uom_requirements(frm);\r\n        \r\n    } else {\r\n        frappe.msgprint('No data found to fetch from BOM Item');\r\n    }\r\n}\r\n// ============ VALIDATION LOGIC ============\r\n\r\nfunction validate_bom_item_spec(frm) {\r\n    let has_error = false;\r\n    const required_groups = [\"Stone\", \"Pearl\", \"Bead\"];\r\n    \r\n    // Validate country of origin for gemstones (consistent with BOM validation)\r\n    if (required_groups.includes(frm.doc.item_group) && \r\n        frm.doc.gemstone && \r\n        !frm.doc.country_of_origin) {\r\n        \r\n        frappe.msgprint(`Please enter Country of Origin for gemstone \"${frm.doc.gemstone}\".`);\r\n        has_error = true;\r\n    }\r\n    \r\n    // Validate stone-specific fields (consistent with BOM validation)\r\n    if (frm.doc.item_group === \"Stone\") {\r\n        if (frm.doc.uom === \"Carat\" && (!frm.doc.avg_carat_weight || frm.doc.avg_carat_weight === 0)) {\r\n            frappe.msgprint(`\"Avg Carat Weight\" is required when UOM is Carat for Stone items.`);\r\n            has_error = true;\r\n        }\r\n        \r\n        if (frm.doc.uom === \"Piece\" && (!frm.doc.stone_pieces || frm.doc.stone_pieces === 0)) {\r\n            frappe.msgprint(`\"Stone Pieces\" is required when UOM is Piece for Stone items.`);\r\n            has_error = true;\r\n        }\r\n    }\r\n    \r\n    // Validate that BOM and BOM Item ID are present\r\n    if (!frm.doc.bom) {\r\n        frappe.msgprint(\"BOM is required for BOM Item Spec.\");\r\n        has_error = true;\r\n    }\r\n    \r\n    if (!frm.doc.bom_item_id) {\r\n        frappe.msgprint(\"BOM Item ID is required for BOM Item Spec.\");\r\n        has_error = true;\r\n    }\r\n    \r\n    if (has_error) {\r\n        frappe.validated = false;\r\n    }\r\n}\r\n\r\n// ============ UTILITY FUNCTIONS ============\r\n\r\nfunction sync_spec_to_bom_item_custom_fields(frm) {\r\n    if (!frm.doc.bom_item_id) {\r\n        frappe.msgprint('No BOM Item linked to this spec for syncing');\r\n        return;\r\n    }\r\n    \r\n    const field_mapping = {\r\n        'item_group': 'custom_item_group',\r\n        'gemstone': 'custom_gemstone',\r\n        'grade': 'custom_grade',\r\n        'cut': 'custom_cut',\r\n        'setting_type': 'custom_setting_type',\r\n        'merch_color_attribute': 'custom_merch_color__attribute',\r\n        'stone_pieces': 'custom_stone_pieces',\r\n        'country_of_origin': 'custom_country_of_origin',\r\n        'avg_carat_weight': 'custom_avg_carat_weight',\r\n        'sku_carat_weight': 'custom_sku_weight',\r\n        'metal_group': 'custom_metal_group',\r\n        'avg_metal_weight': 'custom_metal_weight',\r\n        'sku_metal_weight': 'custom_sku_metal_weight',\r\n        'length': 'custom_length',\r\n        'weight_per_piece': 'custom_weight_perpiece'\r\n    };\r\n    \r\n    let updates = {};\r\n    Object.keys(field_mapping).forEach(spec_field => {\r\n        if (frm.doc[spec_field]) {\r\n            updates[field_mapping[spec_field]] = frm.doc[spec_field];\r\n        }\r\n    });\r\n    \r\n    // Handle stone_treatments multi-select table -> single field conversion\r\n    if (frm.doc.stone_treatments && frm.doc.stone_treatments.length > 0) {\r\n        const first_treatment = frm.doc.stone_treatments[0].stone_treatment;\r\n        if (first_treatment) {\r\n            updates['custom_stone_treatment'] = first_treatment;\r\n        }\r\n    }\r\n    \r\n    if (Object.keys(updates).length === 0) {\r\n        frappe.msgprint('No spec fields to sync to BOM Item custom fields');\r\n        return;\r\n    }\r\n    \r\n    // Update BOM Item with custom field values\r\n    frappe.call({\r\n        method: 'frappe.client.set_value',\r\n        args: {\r\n            doctype: 'BOM Item',\r\n            name: frm.doc.bom_item_id,\r\n            fieldname: updates\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                frappe.show_alert({\r\n                    message: `Synced ${Object.keys(updates).length} fields to BOM Item`,\r\n                    indicator: 'green'\r\n                });\r\n                \r\n                refresh_specific_bom_item_row(frm.doc.bom, frm.doc.bom_item_id);\r\n            }\r\n        },\r\n        error: function(err) {\r\n            frappe.msgprint('Error syncing to BOM Item');\r\n        }\r\n    });\r\n}\r\n\r\n// ============ MASS UPDATE FUNCTION (NOT CALLED BY INDIVIDUAL SPEC BUTTONS) ============\r\n// This function updates ALL BOM Items for a BOM - only called from BOM level operations\r\nfunction mass_update_all_bom_item_descriptions_from_specs(bom_name) {\r\n    console.log(\"MASS UPDATE: Updating ALL BOM Items for BOM:\", bom_name);\r\n    \r\n    // Check BOM status before mass update\r\n    frappe.db.get_value('BOM', bom_name, 'docstatus')\r\n        .then(r => {\r\n            if (r && r.message && r.message.docstatus !== 0) {\r\n                frappe.show_alert({\r\n                    message: `Cannot update descriptions - BOM ${bom_name} is ${r.message.docstatus === 1 ? 'submitted' : 'cancelled'}`,\r\n                    indicator: 'orange'\r\n                });\r\n                return;\r\n            }\r\n            \r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'BOM Item Spec',\r\n                    filters: {'bom': bom_name},\r\n                    fields: [\r\n                        'name', 'bom_item_id', 'item', 'item_group', 'gemstone', 'stone_treatments',\r\n                        'grade', 'cut', 'setting_type', 'merch_color_attribute', \r\n                        'stone_pieces', 'country_of_origin', 'sku_carat_weight', \r\n                        'avg_carat_weight', 'avg_metal_weight', 'sku_metal_weight',\r\n                        'length', 'weight_per_piece', 'metal_group'\r\n                    ]\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.length > 0) {\r\n                        let updated_count = 0;\r\n                        const total_specs = r.message.length;\r\n                        \r\n                        frappe.show_alert({\r\n                            message: `MASS UPDATE: Updating ${total_specs} BOM Item descriptions...`,\r\n                            indicator: \"blue\"\r\n                        });\r\n                        \r\n                        r.message.forEach((spec, index) => {\r\n                            setTimeout(() => {\r\n                                const description = build_description_from_current_spec(spec);\r\n                                \r\n                                frappe.call({\r\n                                    method: 'frappe.client.set_value',\r\n                                    args: {\r\n                                        doctype: 'BOM Item',\r\n                                        name: spec.bom_item_id,\r\n                                        fieldname: 'description',\r\n                                        value: description\r\n                                    },\r\n                                    callback: function() {\r\n                                        updated_count++;\r\n                                        if (updated_count === total_specs) {\r\n                                            frappe.show_alert({\r\n                                                message: `MASS UPDATE: Updated ${updated_count} BOM Item descriptions from specs`,\r\n                                                indicator: \"green\"\r\n                                            });\r\n                                            \r\n                                            // Refresh parent BOM if open (entire form since this is mass update)\r\n                                            if (window.cur_frm && window.cur_frm.doc && window.cur_frm.doc.name === bom_name) {\r\n                                                window.cur_frm.refresh_field('items');\r\n                                                console.log(\"Mass update: Parent BOM form refreshed\");\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                    error: function(err) {\r\n                                        console.error(`Error updating BOM Item ${spec.bom_item_id}:`, err);\r\n                                        updated_count++; // Count failed updates too\r\n                                        if (updated_count === total_specs) {\r\n                                            frappe.show_alert({\r\n                                                message: `MASS UPDATE: Completed (some may have failed due to permissions)`,\r\n                                                indicator: \"orange\"\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                });\r\n                            }, index * 100); // Small delay to avoid overwhelming the system\r\n                        });\r\n                    } else {\r\n                        frappe.msgprint('No BOM Item Specs found for this BOM');\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.error(\"Error checking BOM status for mass update:\", err);\r\n            frappe.show_alert({\r\n                message: `Error checking BOM status for ${bom_name}`,\r\n                indicator: 'red'\r\n            });\r\n        });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.010036",
  "module": "espresso",
  "name": "custom_jewelry_measurements",
  "script": "//Script to display values in the HTML table field in Sales order. HTML table field will have jewelry measurement values from the Jewelry measurement doctype.\nfrappe.ui.form.on('Sales Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        frm.events.render_jewelry_measurements(frm);\n    },\n    qty: function(frm, cdt, cdn) {\n        frm.events.render_jewelry_measurements(frm);\n    },\n});\n\nfrappe.ui.form.on('Sales Order', {\n    onload: function(frm) {\n        //console.log(\"Custom Sales Order client script loaded.\");\n        frm.events.render_jewelry_measurements(frm);\n    },\n\n    render_jewelry_measurements: function(frm) {\n        //console.log(\"Starting render_jewelry_measurements...\");\n\n        const item_codes = (frm.doc.items || []).map(i => i.item_code).filter(Boolean);\n        //console.log(\"Collected item codes:\", item_codes);\n\n        if (item_codes.length === 0) {\n            //console.log(\"No item codes found in items table.\");\n            frm.fields_dict.custom_jewelry_measurements.$wrapper.html(\"<p>No items selected.</p>\");\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Jewelry Measurement\",\n                filters: [\n                    [\"item\", \"in\", item_codes]\n                ],\n                fields: [\n                    \"item\",\n                    \"product_type\",\n                    \"length_inch\",\n                    \"width_inch\",\n                    \"band_width__chain_width__height_inch\",\n                    \"bail_length_mm\",\n                    \"bail_width_mm\"\n                ],\n                limit_page_length: 100\n            },\n            callback: function(response) {\n                const data = response.message;\n                //console.log(\"Jewelry Measurement data returned:\", data);\n\n                if (!data || data.length === 0) {\n                    //console.log(\"No matching Jewelry Measurement records found.\");\n                    frm.fields_dict.custom_jewelry_measurements.$wrapper.html(\"<p>No jewelry measurements found.</p>\");\n                    return;\n                }\n\n                let html = `<table class=\"table table-bordered\">\n                    <thead>\n                        <tr>\n                            <th>Item Code</th>\n                            <th>Product Type</th>\n                            <th>Length (Inch)</th>\n                            <th>Width (Inch)</th>\n                            <th>Band Width / Chain Width / Height (Inch)</th>\n                            <th>Bail Length (mm)</th>\n                            <th>Bail Width (mm)</th>\n                        </tr>\n                    </thead>\n                    <tbody>`;\n\n                data.forEach(row => {\n                    html += `<tr>\n                        <td>${row.item || ''}</td>\n                        <td>${row.product_type || ''}</td>\n                        <td>${row.length_inch || ''}</td>\n                        <td>${row.width_inch || ''}</td>\n                        <td>${row.band_width__chain_width__height_inch || ''}</td>\n                        <td>${row.bail_length_mm || ''}</td>\n                        <td>${row.bail_width_mm || ''}</td>\n                    </tr>`;\n                });\n\n                html += \"</tbody></table>\";\n\n                //console.log(\"Generated HTML table:\", html);\n                frm.fields_dict.custom_jewelry_measurements.$wrapper.html(html);\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.925863",
  "module": "espresso",
  "name": "Verify Items",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    refresh(frm) {\r\n        if (frm.doc.docstatus < 2 && !frm.is_new()) {\r\n            frm.add_custom_button('Verify Items', () => {\r\n                const items = frm.doc.customer_worksheet_items || [];\r\n                if (items.length === 0) {\r\n                    frappe.msgprint(\"No items to verify.\");\r\n                    return;\r\n                }\r\n\r\n                const grouped = {};\r\n                let grand_total_qty = 0;\r\n                let grand_total_amount = 0;\r\n\r\n                items.forEach(row => {\r\n                    if (!row.item_code) return;\r\n\r\n                    if (!grouped[row.item_code]) {\r\n                        grouped[row.item_code] = {\r\n                            item_name: row.item_name,\r\n                            rows_count: 0,\r\n                            total_qty: 0,\r\n                            total_amount: 0,\r\n                            rates: new Set()\r\n                        };\r\n                    }\r\n\r\n                    let qty = flt(row.qty) || 1;\r\n                    let rate = flt(row.rate) || 0;\r\n                    let amount = rate * qty;\r\n\r\n\r\n                    grouped[row.item_code].rows_count += 1;\r\n                    grouped[row.item_code].total_qty += qty;\r\n                    grouped[row.item_code].total_amount += amount;\r\n                    if (rate) grouped[row.item_code].rates.add(rate);\r\n                });\r\n\r\n                const htmlRows = Object.entries(grouped).map(([item_code, data], idx) => {\r\n                    grand_total_qty += data.total_qty;\r\n                    grand_total_amount += data.total_amount;\r\n\r\n                    let rate_display = \"0.00\";\r\n                    if (data.rates.size === 1) {\r\n                        rate_display = `$${Array.from(data.rates)[0].toFixed(2)}`;\r\n                    } else if (data.rates.size > 1) {\r\n                        rate_display = \"Varies\";\r\n                    }\r\n\r\n                    return `\r\n                        <tr>\r\n                            <td>${idx + 1}</td>\r\n                            <td>${item_code}</td>\r\n                            <td>${data.item_name}</td>\r\n                            <td>${data.rows_count}</td>\r\n                            <td>${data.total_qty}</td>\r\n                            <td>${rate_display}</td>\r\n                            <td>$${data.total_amount.toFixed(2)}</td>\r\n                        </tr>\r\n                    `;\r\n                }).join(\"\");\r\n\r\n                const dialog_html = `\r\n                    <div style=\"max-height: 400px; overflow-y: auto;\">\r\n                    <table class=\"table table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Item Code</th>\r\n                                <th>Item Name</th>\r\n                                <th>Rows / Sizes</th>\r\n                                <th>Qty</th>\r\n                                <th>Selling Rate</th>\r\n                                <th>Selling Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            ${htmlRows}\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                    <div style=\"text-align: right; font-weight: bold; margin-top: 10px;\">\r\n                        Total Qty: ${grand_total_qty} <br/>\r\n                        Total Amount: $${grand_total_amount.toFixed(2)}\r\n                    </div>\r\n                `;\r\n\r\n                new frappe.ui.Dialog({\r\n                    title: 'Verify Items',\r\n                    size: 'extra-large',\r\n                    fields: [\r\n                        {\r\n                            fieldname: 'summary_table',\r\n                            fieldtype: 'HTML',\r\n                            options: dialog_html\r\n                        }\r\n                    ]\r\n                }).show();\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.351291",
  "module": "espresso",
  "name": "BOM Creator",
  "script": "// ============================ BOM Creator ==========================\r\nif (!window.__customer_worksheet_handler_initialized__) {\r\n    window.__customer_worksheet_handler_initialized__ = true;\r\n\r\n    const BOMCreator = {\r\n        current_dialog: null,\r\n        creating_bom: false,\r\n\r\n        init: function() {\r\n            this.setupEventHandlers();\r\n        },\r\n\r\n        setupEventHandlers: function() {\r\n            frappe.ui.form.on('Customer Worksheet', {\r\n                setup: this.handleSetup.bind(this),\r\n                clear: this.handleClear.bind(this),\r\n                search_button: this.handleSearch.bind(this),\r\n                create_bom: this.createBOM.bind(this),\r\n                finished_goods_item: this.handleFinishedGoodsItem.bind(this),\r\n                refresh: this.handleRefresh.bind(this),\r\n                existing_bom: this.handleExistingBOM.bind(this),\r\n                update_bom: this.updateBOM.bind(this),\r\n                onload: this.handleOnLoad.bind(this),\r\n                search_bom: this.searchBOM.bind(this),\r\n                add_default_items: this._addDefaultBOMItems.bind(this),\r\n                bom_id: this.updateBOMTotals.bind(this),\r\n                onload: function(frm) {\r\n                    frm.script = calculateLogic;\r\n                    frm.script.recalculateAllRows(frm);\r\n                    frm.script.updateBOM = updateBOM; \r\n                    toggleBOMButtons(frm);\r\n                    frm.script = {\r\n                        updateBOM: updateBOM\r\n                    };\r\n                },\r\n            \r\n                refresh: function(frm) {\r\n                    frm.script = calculateLogic;\r\n                    frm.script.recalculateAllRows(frm);\r\n                    frm.script.updateBOM = updateBOM;  \r\n                    toggleBOMButtons(frm);\r\n                },\r\n                // before_save: async function (frm) {\r\n                // // frm.set_value('show_all', 0);\r\n                // // frm.set_value('bom_id', '')\r\n                //     console.log(\"clicked\");\r\n            \r\n                //     if (frm.doc.__skip_bom_prompt) {\r\n                //         return;\r\n                //     }\r\n            \r\n                //     const bomFromCustomer = (frm.doc.customer_bom_items || []).find(row => row.bom_no?.trim());\r\n                //     const bomFromBOMItems = (frm.doc.bom_items || []).find(row => row.bom_no?.trim());\r\n            \r\n                //     if (bomFromBOMItems && !frm.doc.finished_goods_item) {\r\n                //         frappe.throw(\"Please select a Finished Goods Item before saving.\");\r\n                //     }\r\n            \r\n                //     const bomRow = bomFromCustomer || bomFromBOMItems;\r\n            \r\n                //     if (bomRow && bomRow.bom_no) {\r\n                //         frappe.validated = false;\r\n                //         await new Promise((resolve) => {\r\n                //             frappe.confirm(\r\n                //                 \"Update the BOM?\",\r\n                //                 async () => {\r\n                //                     frm.doc.existing_bom = bomRow.bom_no;\r\n                //                     console.log(\"okk\")\r\n            \r\n                //                     if (typeof updateBOM === \"function\") {\r\n                //                         await updateBOM(frm);\r\n                //                     }\r\n            \r\n                //                     frm.doc.__skip_bom_prompt = true;\r\n                //                     resolve();\r\n                //                     frm.save();\r\n                //                 },\r\n                //                 () => {\r\n                //                     frm.doc.__skip_bom_prompt = true;\r\n                //                     resolve();\r\n                //                     frm.save();\r\n                //                 }\r\n                //             );\r\n                //         });\r\n                        \r\n            \r\n                //         throw \"Save paused for BOM update prompt.\";\r\n                //     }\r\n            \r\n                //     if (!frm.doc.finished_goods_item) {\r\n                //         return;\r\n                //     }\r\n            \r\n                //     frappe.validated = false;\r\n                //     await new Promise((resolve) => {\r\n                //         frappe.confirm(\r\n                //             \"Create a new BOM?\",\r\n                //             async () => {\r\n                //                 if (typeof createBOM === \"function\") {\r\n                //                     await createBOM(frm);\r\n                //                 }\r\n            \r\n                //                 frm.doc.__skip_bom_prompt = true;\r\n                //                 resolve();\r\n                //                 frm.save();\r\n                //             },\r\n                //             () => {\r\n                //                 frm.doc.__skip_bom_prompt = true;\r\n                //                 resolve();\r\n                //                 frm.save();\r\n                //             }\r\n                //         );\r\n                //     });\r\n            \r\n                //     throw \"Save paused for BOM create prompt.\";\r\n                // }\r\n\r\n\r\n\r\n\r\n                // before_save: function(frm) {\r\n                //     frm.script.recalculateAllRows(frm);\r\n                // }\r\n            });\r\n\r\n            frappe.ui.form.on('Customer Worksheet BOM Items', {\r\n                qty: this.updateBOMTotals.bind(this),\r\n                rate: this.updateBOMTotals.bind(this),\r\n                custom_selling_rate: this.updateBOMTotals.bind(this),\r\n                custom_selling_amount: this.updateBOMTotals.bind(this),\r\n                amount: this.updateBOMTotals.bind(this),\r\n                selling_amount: this.updateBOMTotals.bind(this)\r\n            });\r\n\r\n            frappe.ui.form.on('Customer Worksheet BOM Creator Items', {\r\n                // custom_stone_pieces: this.calculateQtyAndAll.bind(this),\r\n                // qty: this.calculateAll.bind(this),\r\n                // rate: this.calculateAll.bind(this),\r\n                // custom_metal_weight: this.calculateQtyAndAll.bind(this),\r\n                // custom_avg_carat_weight: this.calculateQtyAndAll.bind(this),\r\n                // uom: this.calculateQtyAndAll.bind(this),\r\n                // custom_item_group: this.calculateQtyAndAll.bind(this),\r\n                custom_ext_qty_required: this.calculateNetBalance.bind(this),\r\n                custom_oh: this.calculateNetBalance.bind(this),\r\n                form_render: this.handleFormRender.bind(this),\r\n                item_code: this.handleItemCodeChange.bind(this),\r\n                custom_gemstone: this.handleGemstoneChange.bind(this),\r\n                custom_grade: this.updateBOMItemDescription.bind(this),\r\n                custom_cut: this.updateBOMItemDescription.bind(this),\r\n                custom_setting_type: this.updateBOMItemDescription.bind(this),\r\n                custom_merch_color: this.updateBOMItemDescription.bind(this),\r\n                custom_country_of_origin: this.updateBOMItemDescription.bind(this),\r\n                custom_length: this.updateBOMItemDescription.bind(this),\r\n                custom_weight_perpiece: this.updateBOMItemDescription.bind(this),\r\n                custom_our_responsibility: this.updateBOMItemDescription.bind(this),\r\n                custom_merch_color__attribute: this.updateBOMItemDescription.bind(this),\r\n                custom_stone_pieces: function(frm, cdt, cdn) {\r\n                frm.script.calculateQtyAndAll(frm, cdt, cdn);\r\n                },\r\n                custom_metal_weight: function(frm, cdt, cdn) {\r\n                frm.script.calculateQtyAndAll(frm, cdt, cdn);\r\n                },\r\n                custom_avg_carat_weight: function(frm, cdt, cdn) {\r\n                frm.script.calculateQtyAndAll(frm, cdt, cdn);\r\n                },\r\n                uom: function(frm, cdt, cdn) {\r\n                frm.script.calculateQtyAndAll(frm, cdt, cdn);\r\n                },\r\n                custom_item_group: function(frm, cdt, cdn) {\r\n                frm.script.calculateQtyAndAll(frm, cdt, cdn);\r\n                },\r\n                qty: function(frm, cdt, cdn) {\r\n                frm.script.calculateAll(frm, cdt, cdn);\r\n                },\r\n                rate: function(frm, cdt, cdn) {\r\n                frm.script.calculateAll(frm, cdt, cdn);\r\n                },\r\n                custom_selling_rate: function(frm, cdt, cdn) {\r\n                frm.script.calculateAll(frm, cdt, cdn);\r\n                }\r\n            });\r\n        },\r\n\r\n        handleSetup: function(frm, cdt, cdn) {\r\n            let row = locals[cdt][cdn];\r\n            if (!row.custom_gemstone) return;\r\n\r\n            this.fetchCountryOfOrigin(frm, row.custom_gemstone);\r\n        },\r\n\r\n        handleClear: function(frm) {\r\n            frm.set_value('keyword_search', '');\r\n            frm.set_value('item_group_', '');\r\n            frm.set_value('existing_bom', '');\r\n        \r\n            if (frm.doc.bom_items && frm.doc.bom_items.length) {\r\n                frm.doc.bom_items = [];\r\n                frm.refresh_field('bom_items');\r\n            }\r\n        \r\n            frm.set_value('finished_goods_item', '');\r\n        },\r\n\r\n    handleSearch: async function(frm) {\r\n        try {\r\n            let item_group = frm.doc.item_group_;\r\n            let keywords = frm.doc.keyword_search;\r\n    \r\n            let keyword_list = [];\r\n            if (keywords) {\r\n                keyword_list = keywords.toLowerCase().split(/\\s+/).filter(Boolean);\r\n            }\r\n    \r\n            let filters = { disabled: 0 };\r\n            if (item_group) {\r\n                filters.item_group = item_group;\r\n            }\r\n    \r\n            const items = await frappe.db.get_list('Item', {\r\n                fields: ['item_code', 'item_name', 'description', 'item_group', 'stock_uom', \r\n                                'custom_gemstone', 'custom_metal_group', 'custom_material_id'],\r\n                filters: filters,\r\n                limit: 500000\r\n            });\r\n    \r\n            let matching_items = items;\r\n            if (keyword_list.length > 0) {\r\n                matching_items = items.filter(item => {\r\n                    let content = `${item.item_code} ${item.item_name || ''} ${item.description || ''}`.toLowerCase();\r\n                    return keyword_list.every(kw => content.includes(kw));\r\n                });\r\n            }\r\n    \r\n            if (matching_items.length > 0) {\r\n                frm.set_value('item_code_', matching_items[0].item_code);\r\n                frm.set_value('item_name_', matching_items[0].item_name);\r\n            }\r\n    \r\n            this.showItemSelectionDialog(frm, matching_items);\r\n    \r\n        } catch (err) {\r\n            console.error(\"Search error:\", err);\r\n            frappe.msgprint(\"Error while searching items.\");\r\n        }\r\n    }\r\n,\r\n\r\n        handleFinishedGoodsItem: function(frm) {\r\n            this.toggleBOMButtons(frm);\r\n            if (!frm.doc.finished_goods_item) return;\r\n            this.insertDefaultBOMItems(frm);\r\n        },\r\n        \r\n\r\n        handleRefresh: function(frm) {\r\n            this.toggleBOMButtons(frm);\r\n        },\r\n\r\n        handleExistingBOM: async function(frm) {\r\n            this.toggleBOMButtons(frm);\r\n        \r\n            if (!frm.doc.existing_bom) return;\r\n        \r\n            try {\r\n                frappe.dom.freeze(\"Loading BOM items...\");\r\n        \r\n                const bom = await frappe.call({\r\n                    method: \"frappe.client.get\",\r\n                    args: {\r\n                        doctype: \"BOM\",\r\n                        name: frm.doc.existing_bom\r\n                    }\r\n                });\r\n        \r\n                frm.clear_table('bom_items');\r\n        \r\n                (bom.message.items || []).forEach(item => {\r\n                    let child = frm.add_child('bom_items');\r\n        \r\n                    child.item_code = item.item_code;\r\n                    child.item_name =item.item_name;\r\n                    child.custom_item_group =item.custom_item_group;\r\n                    child.qty =item.qty;\r\n                    child.uom =item.uom;\r\n                    child.rate =item.rate || 0.0;\r\n                    child.amount =item.amount || 0;\r\n                    child.custom_selling_rate =item.custom_selling_rate || '';\r\n                    child.custom_selling_amount =item.custom_selling_amount || '';\r\n                    child.custom_gemstone =item.custom_gemstone;\r\n                    child.description = item.description;\r\n                    child.custom_stone_treatment =item.custom_stone_treatment;\r\n                    child.custom_merch_color__attribute =item.custom_merch_color__attribute;\r\n                    child.custom_country_of_origin = item.custom_country_of_origin;\r\n                    child.custom_grade = item.custom_grade;\r\n                    child.custom_stone_pieces =item.custom_stone_pieces;\r\n                    child.custom_avg_carat_weight = item.custom_avg_carat_weight;\r\n                    child.custom_sku_carat_weight = item.custom_sku_carat_weight;\r\n                    child.custom_cut = item.custom_cut;\r\n                    child.custom_setting_type = item.custom_setting_type;\r\n                    child.custom_metal_weight =item.custom_metal_weight;\r\n                    child.custom_sku_metal_weight =item.custom_sku_metal_weight;\r\n                    child.custom_metal_group =item.custom_metal_group;\r\n                    child.custom_selling_rate =item.custom_selling_rate;\r\n                    child.custom_sku_weight =item.custom_sku_weight;\r\n                    child.custom_ext_qty_required =item.custom_ext_qty_required;\r\n                    child.custom_oh =item.custom_oh;\r\n                    child.custom_net_balance_required =item.custom_net_balance_required;\r\n                    child.custom_our_responsibility =item.custom_our_responsibility;\r\n                    child.bom_no = frm.doc.existing_bom;\r\n                    \r\n                });\r\n        \r\n                frm.refresh_field('bom_items');\r\n                frappe.dom.unfreeze();\r\n        \r\n            } catch (err) {\r\n                console.error(\"Error loading BOM items:\", err);\r\n                frappe.dom.unfreeze();\r\n                frappe.msgprint(\"Error while loading BOM items.\");\r\n            }\r\n        }\r\n            ,\r\n\r\n        handleOnLoad: function(frm) {\r\n            frm.set_query('existing_bom', () => {\r\n                if (!frm.doc.finished_goods_item) {\r\n                    frappe.msgprint(\"Please select a Finished Goods Item first.\");\r\n                    return {};\r\n                }\r\n            \r\n                return {\r\n                    filters: {\r\n                        item: frm.doc.finished_goods_item\r\n                    }\r\n                };\r\n            });\r\n        },\r\n\r\n        // ==================== BOM OPERATIONS ====================\r\n    createBOM: async function(frm) {\r\n        if (this.creating_bom) return;\r\n        this.creating_bom = true;\r\n    \r\n        try {\r\n            if (!frm.doc.bom_items || frm.doc.bom_items.length === 0) {\r\n                frappe.msgprint(\"No items found in BOM Items table.\");\r\n                return;\r\n            }\r\n    \r\n            if (!frm.doc.finished_goods_item) {\r\n                frappe.msgprint(\"Please select a Finished Goods Item.\");\r\n                return;\r\n            }\r\n    \r\n            const fg_item = frm.doc.finished_goods_item;\r\n    \r\n            const existing_defaults = await frappe.db.get_list('BOM', {\r\n                filters: {\r\n                    item: fg_item,\r\n                    is_default: 1,\r\n                    docstatus: 0\r\n                },\r\n                fields: ['name']\r\n            });\r\n    \r\n            for (const bom of existing_defaults) {\r\n                await frappe.call({\r\n                    method: 'frappe.client.set_value',\r\n                    args: {\r\n                        doctype: 'BOM',\r\n                        name: bom.name,\r\n                        fieldname: 'is_default',\r\n                        value: 0\r\n                    }\r\n                });\r\n            }\r\n    \r\n            const items = frm.doc.bom_items.map(row => ({\r\n                item_code: row.item_code,\r\n                item_name: row.item_name,\r\n                qty: row.qty || 1,\r\n                uom: row.uom || 'Nos',\r\n                rate: row.rate || 0,\r\n                amount: row.amount || 0,\r\n                description: row.description,\r\n                item_group: row.custom_item_group || '',\r\n                custom_selling_rate: row.custom_selling_rate || '',\r\n                custom_selling_amount: row.custom_selling_amount || '',\r\n                custom_gemstone: row.custom_gemstone,\r\n                custom_stone_treatment: row.custom_stone_treatment,\r\n                custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n                custom_country_of_origin: row.custom_country_of_origin,\r\n                custom_grade: row.custom_grade,\r\n                custom_stone_pieces: row.custom_stone_pieces,\r\n                custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n                custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n                custom_cut: row.custom_cut,\r\n                custom_setting_type: row.custom_setting_type,\r\n                custom_metal_weight: row.custom_metal_weight,\r\n                custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n                custom_metal_group: row.custom_metal_group,\r\n                custom_sku_weight: row.custom_sku_weight,\r\n                custom_ext_qty_required: row.custom_ext_qty_required,\r\n                custom_oh: row.custom_oh,\r\n                custom_net_balance_required: row.custom_net_balance_required,\r\n                custom_our_responsibility: row.custom_our_responsibility\r\n            }));\r\n    \r\n            const bom_doc = await frappe.call({\r\n                method: \"frappe.client.insert\",\r\n                freeze: true,\r\n                freeze_message: \"Creating BOM...\",\r\n                args: {\r\n                    doc: {\r\n                        doctype: \"BOM\",\r\n                        item: fg_item,\r\n                        quantity: 1,\r\n                        is_active: 1,\r\n                        docstatus: 0,\r\n                        items: items\r\n                    }\r\n                }\r\n            });\r\n    \r\n            const bom_name = bom_doc.message.name;\r\n    \r\n            await frappe.call({\r\n                method: 'frappe.client.set_value',\r\n                args: {\r\n                    doctype: 'BOM',\r\n                    name: bom_name,\r\n                    fieldname: 'is_default',\r\n                    value: 1\r\n                }\r\n            });\r\n    \r\n            (frm.doc.bom_items || []).forEach(row => {\r\n                row.bom_no = bom_name;\r\n            });\r\n    \r\n            frm.refresh_field('bom_items');\r\n    \r\n            (frm.doc.customer_worksheet_items || []).forEach(row => {\r\n                row.default_bom = '';\r\n            });\r\n            \r\n            (frm.doc.customer_worksheet_items || []).forEach(row => {\r\n                if (row.item_code === fg_item) {\r\n                    row.default_bom = bom_name;\r\n                }\r\n            });\r\n            \r\n            frm.refresh_field('customer_worksheet_items');\r\n            await frm.save();\r\n            await frm.reload_doc();\r\n\r\n    \r\n            frm.fields_dict.bom_status?.$wrapper?.html(\r\n                `<div style=\"color:green;\"><strong>BOM Created:</strong> <a href=\"/app/bom/${bom_name}\" target=\"_blank\">${bom_name}</a></div>`\r\n            );\r\n    \r\n            frappe.msgprint({\r\n                title: \"BOM Created\",\r\n                message: `New BOM created: <a href=\"/app/bom/${bom_name}\" target=\"_blank\">${bom_name}</a>`,\r\n                indicator: 'green'\r\n            });\r\n    \r\n            const exists = frm.doc.customer_worksheet_items.some(\r\n                i => i.item_code === fg_item\r\n            );\r\n    \r\n            if (exists) return;\r\n    \r\n            setTimeout(() => {\r\n                frappe.confirm(\r\n                    `Do you wish to insert \"<b>${fg_item}</b>\" into the worksheet?`,\r\n                    async () => {\r\n                        try {\r\n                            const item = await frappe.db.get_doc('Item', fg_item);\r\n                            let child = frm.add_child('customer_worksheet_items');\r\n                            child.item_code = fg_item;\r\n                            child.item_name = item.item_name;\r\n                            child.item_group = item.item_group;\r\n                            child.uom = item.stock_uom;\r\n                            child.qty = 1;\r\n                            child.rate = item.valuation_rate || 0;\r\n    \r\n                            frm.refresh_field('customer_worksheet_items');\r\n                        } catch (err) {\r\n                            console.error(\"Failed to fetch item:\", err);\r\n                            frappe.msgprint(\"Failed to fetch item details.\");\r\n                        }\r\n                    },\r\n                    () => { }\r\n                );\r\n            }, 500);\r\n        } catch (error) {\r\n            console.error(\"BOM creation error:\", error);\r\n            frappe.msgprint(\"Error while creating BOM.\");\r\n        } finally {\r\n            this.creating_bom = false;\r\n        }\r\n},\r\n\r\n        updateBOM: async function(frm) {\r\n            if (!frm.doc.existing_bom) {\r\n                frappe.msgprint(\"No existing BOM selected.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const bom_doc = await frappe.call({\r\n                    method: \"frappe.client.get\",\r\n                    args: {\r\n                        doctype: \"BOM\",\r\n                        name: frm.doc.existing_bom\r\n                    }\r\n                });\r\n\r\n                if (bom_doc.message.docstatus === 1) {\r\n                    frappe.msgprint({\r\n                        title: \"BOM is Submitted\",\r\n                        message: \"This BOM is submitted. Please create a new BOM.\",\r\n                        indicator: \"red\"\r\n                    });\r\n\r\n                    setTimeout(() => {\r\n                        const updateBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Update BOM');\r\n                        const createBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Create BOM');\r\n                        if (updateBtn) updateBtn.style.display = 'none';\r\n                        if (createBtn) createBtn.style.display = 'inline-block';\r\n                    }, 300);\r\n                    return;\r\n                }\r\n\r\n                bom_doc.message.items = frm.doc.bom_items.map(row => ({\r\n                    item_code: row.item_code,\r\n                    item_name: row.item_name,\r\n                    qty: row.qty || 1,\r\n                    uom: row.uom,\r\n                    rate: row.rate || 0,\r\n                    amount: row.amount || 0,\r\n                    description:row.description,\r\n                    custom_item_group: row.custom_item_group || '',\r\n                    custom_selling_amount: row.custom_selling_amount || '',\r\n                    custom_gemstone: row.custom_gemstone,\r\n                    custom_stone_treatment: row.custom_stone_treatment,\r\n                    custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n                    custom_country_of_origin: row.custom_country_of_origin,\r\n                    custom_grade: row.custom_grade,\r\n                    custom_stone_pieces: row.custom_stone_pieces,\r\n                    custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n                    custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n                    custom_cut: row.custom_cut,\r\n                    custom_setting_type: row.custom_setting_type,\r\n                    custom_metal_weight: row.custom_metal_weight,\r\n                    custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n                    custom_metal_group: row.custom_metal_group,\r\n                    custom_selling_rate: row.custom_selling_rate,\r\n                    custom_sku_weight: row.custom_sku_weight,\r\n                    custom_ext_qty_required: row.custom_ext_qty_required,\r\n                    custom_oh: row.custom_oh,\r\n                    custom_net_balance_required: row.custom_net_balance_required,\r\n                    custom_our_responsibility: row.custom_our_responsibility,\r\n                    custom_bom_id : row.bom_no\r\n                }));\r\n\r\n                await frappe.call({\r\n                    method: \"frappe.client.save\",\r\n                    args: {\r\n                        doc: bom_doc.message\r\n                    }\r\n                });\r\n\r\n                frappe.msgprint({\r\n                    title: \"BOM Updated\",\r\n                    message: `BOM <a href=\"/app/bom/${bom_doc.message.name}\" target=\"_blank\">${bom_doc.message.name}</a> has been updated.`,\r\n                    indicator: 'green'\r\n                });\r\n            } catch (error) {\r\n                console.error(\"BOM update error:\", error);\r\n                frappe.msgprint(\"Error while updating BOM.\");\r\n            }\r\n        },\r\n\r\n        searchBOM: async function(frm) {\r\n            try {\r\n                if (!frm.doc.finished_goods_item) {\r\n                    frappe.msgprint(__(\"Please select a Finished Goods Item first.\"));\r\n                    return;\r\n                }\r\n        \r\n                const { message: boms } = await frappe.call({\r\n                    method: \"frappe.client.get_list\",\r\n                    args: {\r\n                        doctype: \"BOM\",\r\n                        filters: { item: frm.doc.finished_goods_item },\r\n                        order_by: \"creation desc\",\r\n                        limit_page_length: 1,\r\n                        fields: [\"name\"]\r\n                    }\r\n                });\r\n        \r\n                if (boms?.length) {\r\n                    const bom_name = boms[0].name;\r\n                    frm.set_value(\"existing_bom\", bom_name);\r\n        \r\n                    // DEBUG LOG\r\n                    console.log(\"Setting BOM No to:\", bom_name);\r\n        \r\n                    (frm.doc.bom_items || []).forEach(row => {\r\n                        console.log(\"Row:\", row.name, \"Setting bom_no to:\", bom_name);\r\n                        frappe.model.set_value(row.doctype, row.name, 'bom_no', bom_name); // change 'bom_no' if fieldname is different\r\n                    });\r\n        \r\n                    // Refresh the table so changes reflect visually\r\n                    frm.fields_dict['bom_items'].grid.refresh();\r\n        \r\n                } else {\r\n                    this._addDefaultBOMItems(frm);\r\n                    frappe.msgprint({\r\n                        title: __(\"No BOM Found\"),\r\n                        message: __(\"No active BOM found for item {0}. Added default items.\", [frm.doc.finished_goods_item]),\r\n                        indicator: \"orange\"\r\n                    });\r\n                    await this.handleSearch(frm);\r\n                }\r\n        \r\n            } catch (error) {\r\n                console.error(\"BOM search error:\", error);\r\n                frappe.msgprint({\r\n                    title: __(\"Error\"),\r\n                    message: __(\"Error searching for BOM: {0}\", [error.message]),\r\n                    indicator: \"red\"\r\n                });\r\n            }\r\n        }\r\n\r\n        ,\r\n            \r\n        _addDefaultBOMItems: async function(frm) {\r\n            const defaultItems = [\r\n                { item_code: \"CPF\", qty: 1, uom: \"Piece\" },\r\n                { item_code: \"Setting\", qty: 1, uom: \"Piece\" }\r\n            ];\r\n        \r\n            frm.set_value(\"existing_bom\", null);\r\n            frm.clear_table(\"bom_items\");\r\n        \r\n            for (const item of defaultItems) {\r\n                try {\r\n                    const r = await frappe.db.get_value(\"Item\", item.item_code, [\"stock_uom\", \"item_group\"]);\r\n                    const row = frm.add_child(\"bom_items\");\r\n                    row.item_code = item.item_code;\r\n                    row.item_name = item.item_code;\r\n                    row.qty = item.qty;\r\n                    row.uom = r.message.stock_uom || item.uom;\r\n                    row.custom_item_group = r.message.item_group || '';\r\n                } catch (err) {\r\n                    console.error(`Error fetching item group for ${item.item_code}:`, err);\r\n                }\r\n            }\r\n        \r\n            frm.refresh_field(\"bom_items\");\r\n        }\r\n        ,\r\n\r\n        // ==================== DIALOG FUNCTIONS ====================\r\n showItemSelectionDialog: function(frm, items) {\r\n    if (this.current_dialog) {\r\n        this.current_dialog.hide();\r\n    }\r\n\r\n    let current_keywords = frm.doc.keyword_search || \"\";\r\n    let current_item_group = frm.doc.item_group_ || \"\";\r\n\r\n    let dialog; // 🛠 Fix: declare before usage\r\n\r\n    const totalCountHtml = `\r\n        <div style=\"text-align: center; margin-bottom: 8px;color:blue;\">\r\n            Found total ${items.length} Items. Add more keywords for the best result.\r\n        </div>\r\n    `;\r\n\r\n    const fields = [\r\n        { fieldtype: 'Section Break' },\r\n        { fieldtype: 'Column Break' },\r\n        {\r\n            fieldtype: 'Link',\r\n            label: 'Item Group',\r\n            fieldname: 'dialog_item_group',\r\n            options: 'Item Group',\r\n            default: current_item_group,\r\n            reqd: 1\r\n        },\r\n        { fieldtype: 'Column Break' },\r\n        {\r\n            fieldtype: 'Data',\r\n            label: 'Keyword Search',\r\n            fieldname: 'dialog_keyword_search',\r\n            default: current_keywords,\r\n            reqd: 1\r\n        },\r\n        { fieldtype: 'Column Break' },\r\n        {\r\n            fieldtype: 'Check',\r\n            label: 'Hold Item Group',\r\n            fieldname: 'dialog_hold_item_group',\r\n            default: 0\r\n        },\r\n        {\r\n            fieldtype: 'Button',\r\n            label: 'Search',\r\n            fieldname: 'dialog_search_button',\r\n            click: async () => {\r\n                let kw = dialog.get_value('dialog_keyword_search');\r\n                let ig = dialog.get_value('dialog_item_group');\r\n\r\n                if (!kw || !ig) {\r\n                    frappe.msgprint(\"Please enter both Item Group and Keyword Search.\");\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    let keyword_list = kw.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n                    const items = await frappe.db.get_list('Item', {\r\n                        fields: ['item_code', 'item_name', 'description', 'item_group', 'stock_uom'],\r\n                        filters: { item_group: ig, disabled: 0 },\r\n                        limit: 500000\r\n                    });\r\n\r\n                    const filtered = items.filter(item => {\r\n                        let content = `${item.item_code} ${item.item_name || ''} ${item.description || ''}`.toLowerCase();\r\n                        return keyword_list.every(kw => content.includes(kw));\r\n                    });\r\n\r\n                    dialog.fields_dict.items_table.df.data = filtered;\r\n                    dialog.fields_dict.items_table.grid.refresh();\r\n                    dialog.fields_dict.total_count_html.$wrapper.html(\r\n                        `<div style=\"text-align: left; font-weight: bold; margin-bottom: 8px;\">\r\n                            Found total ${filtered.length} Items. Add more keywords for the best result.\r\n                        </div>`\r\n                    );\r\n                } catch (err) {\r\n                    console.error(\"Dialog search error:\", err);\r\n                    frappe.msgprint(\"Error while searching items.\");\r\n                }\r\n            }\r\n        },\r\n        { fieldtype: 'Section Break' },\r\n        {\r\n            fieldtype: 'HTML',\r\n            fieldname: 'total_count_html',\r\n            options: totalCountHtml\r\n        },\r\n        {\r\n            fieldname: 'items_table',\r\n            fieldtype: 'Table',\r\n            label: 'Matching Items',\r\n            cannot_add_rows: true,\r\n            in_place_edit: false,\r\n            read_only: false,\r\n            fields: [\r\n                { fieldtype: 'Data', fieldname: 'item_code', label: 'Item Code', in_list_view: true, read_only: 1 },\r\n                { fieldtype: 'Data', fieldname: 'item_name', label: 'Item Name', in_list_view: true, read_only: 1 },\r\n                { fieldtype: 'Data', fieldname: 'description', label: 'Description', read_only: 1 },\r\n                { fieldtype: 'Select', fieldname: 'custom_gemstone', label: 'Gemstone', read_only: 1 }\r\n            ],\r\n            data: items,\r\n            get_data: () => items\r\n        }\r\n    ];\r\n\r\n    dialog = new frappe.ui.Dialog({\r\n        size: 'large',\r\n        title: 'Select Items to Create a new BOM',\r\n        fields: fields,\r\n        primary_action_label: 'Insert',\r\n        primary_action: (values) => {\r\n            const selected = dialog.fields_dict.items_table.grid.get_selected_children();\r\n\r\n            if (selected.length === 0) {\r\n                frappe.msgprint(__('Please select at least one item.'));\r\n                return;\r\n            }\r\n\r\n            selected.forEach(item => {\r\n                const child = frm.add_child('bom_items', {\r\n                    item_code: item.item_code,\r\n                    item_name: item.item_name,\r\n                    description: item.description,\r\n                    custom_item_group: item.item_group || '',\r\n                    uom: item.stock_uom,\r\n                    custom_gemstone: item.custom_gemstone,\r\n                    custom_metal_group: item.custom_metal_group,\r\n                    custom_country_of_origin: item.custom_country_of_origin,\r\n                    custom_selling_rate: item.custom_selling_rate\r\n                });\r\n\r\n                if (item.item_group === \"Services\") {\r\n                    child.qty = 1;\r\n                    child.uom = \"Piece\";\r\n                }\r\n            });\r\n\r\n            frm.refresh_field('bom_items');\r\n\r\n            const hold_item_group = dialog.get_value('dialog_hold_item_group');\r\n            frm.set_value('keyword_search', '');\r\n            dialog.set_value('dialog_keyword_search', '');\r\n\r\n            if (!hold_item_group) {\r\n                frm.set_value('item_group_', '');\r\n                dialog.set_value('dialog_item_group', '');\r\n            }\r\n\r\n            dialog.fields_dict.items_table.grid.df.data = [];\r\n            dialog.fields_dict.items_table.grid.grid_rows = [];\r\n            dialog.fields_dict.items_table.grid.wrapper.empty();\r\n            dialog.fields_dict.items_table.grid.make();\r\n            $(dialog.fields_dict.items_table.grid.wrapper).find('.grid-footer').hide();\r\n\r\n            dialog.fields_dict.total_count_html.$wrapper.html(\r\n                `<div style=\"text-align: right; font-weight: bold; margin-bottom: 8px;color:green;\">\r\n                    Items Inserted: ${selected.length}\r\n                </div>`\r\n            );\r\n\r\n            frm.refresh_field('bom_status');\r\n            frm.fields_dict.bom_status?.$wrapper?.html(\r\n                `<div style=\"color:blue;\"><strong>Items Inserted:</strong> ${selected.length}.</div>`\r\n            );\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n\r\n    if (dialog.get_value('dialog_item_group') === 'Stone') {\r\n        dialog.set_value('dialog_hold_item_group', 1);\r\n    }\r\n\r\n    setTimeout(() => {\r\n        dialog.fields_dict.dialog_item_group.df.onchange = () => {\r\n            const ig = dialog.get_value('dialog_item_group');\r\n            dialog.set_value('dialog_hold_item_group', ig === 'Stone' ? 1 : 0);\r\n        };\r\n    }, 100);\r\n\r\n    this.current_dialog = dialog;\r\n}\r\n\r\n        ,\r\n\r\n        // ==================== UTILITY FUNCTIONS ====================\r\n        toggleBOMButtons: function(frm) {\r\n            setTimeout(() => {\r\n                const createBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Create BOM');\r\n                const updateBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Update BOM');\r\n\r\n                const hasFinishedGoodsItem = !!frm.doc.finished_goods_item;\r\n                const hasExistingBOM = !!frm.doc.existing_bom;\r\n\r\n                if (hasFinishedGoodsItem && hasExistingBOM) {\r\n                    if (updateBtn) updateBtn.style.display = 'inline-block';\r\n                    if (createBtn) createBtn.style.display = 'none';\r\n                } else {\r\n                    if (createBtn) createBtn.style.display = 'inline-block';\r\n                    if (updateBtn) updateBtn.style.display = 'none';\r\n                }\r\n            }, 300);\r\n        },\r\n\r\n        fetchCountryOfOrigin: function(frm, gemstone) {\r\n            frappe.call({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.exc) {\r\n                        console.error(\"Error fetching countries:\", r.exc);\r\n                        return;\r\n                    }\r\n                    \r\n                    if (r.data) {\r\n                        const allowed_countries = r.data.map(entry => entry[1]);\r\n                        let unique_countries = [...new Set(allowed_countries)];\r\n                        console.log(unique_countries);\r\n                        cur_frm.fields_dict.bom_items.grid.update_docfield_property(\r\n                            'custom_country_of_origin',\r\n                            'options',\r\n                            unique_countries\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        updateBOMTotals: function(frm) {\r\n            // if (!frm.doc.customer_bom_items) return;\r\n        \r\n            // let total_selling = 0;\r\n            // let total_items = 0;\r\n        \r\n            // frm.doc.customer_bom_items.forEach(row => {\r\n            //     total_selling += flt(row.qty) * flt(row.custom_selling_rate || 0);\r\n            //     total_items += 1;\r\n            // });\r\n        \r\n            // frm.fields_dict.bom_item_total.$wrapper.html(`\r\n            //     <div style=\"padding: 8px;\">\r\n            //         <b>Total BOM Items:</b> ${total_items}<br>\r\n            //         <b>Selling Amount:</b> $${total_selling.toFixed(2)}\r\n            //     </div>\r\n            // `);\r\n\r\n        },\r\n\r\n        // ==================== CALCULATION FUNCTIONS ====================\r\n        // calculateQtyAndAll: function(frm, cdt, cdn) {\r\n        //     this.calculateQty(frm, cdt, cdn);\r\n        //     this.calculateAll(frm, cdt, cdn);\r\n        // },\r\n\r\n        // calculateQty: function(frm, cdt, cdn) {\r\n        //     const row = locals[cdt][cdn];\r\n        //     let new_qty = 0;\r\n\r\n        //     const item_group = (row.custom_item_group || \"\").trim();\r\n        //     const uom = (row.uom || \"\").toLowerCase();\r\n\r\n        //     if (item_group === \"Stone\") {\r\n        //         if (uom === \"carat\") {\r\n        //             new_qty = flt(row.custom_avg_carat_weight);\r\n        //         } else {\r\n        //             new_qty = flt(row.custom_stone_pieces);\r\n        //         }\r\n        //     } else if (item_group === \"Metal\") {\r\n        //         new_qty = flt(row.custom_metal_weight);\r\n        //     }\r\n\r\n        //     if (flt(row.qty) !== flt(new_qty)) {\r\n        //         frappe.model.set_value(cdt, cdn, 'qty', new_qty);\r\n        //     }\r\n        // },\r\n\r\n        // calculateAll: function(frm, cdt, cdn) {\r\n        //     const row = locals[cdt][cdn];\r\n        //     if (!row) return;\r\n\r\n        //     const stonePieces = flt(row.custom_stone_pieces) || 0;\r\n        //     const qty = flt(row.qty) || 0;\r\n        //     const metalWeight = flt(row.custom_metal_weight) || 0;\r\n        //     const rate = flt(row.rate) || 0;\r\n        //     const onHand = flt(row.custom_oh) || 0;\r\n        //     const sellingRate = flt(row.custom_selling_rate) || 0;\r\n\r\n        //     const extQty = stonePieces * qty;\r\n        //     const skuWeight = metalWeight * 0.8;\r\n        //     const netBalance = extQty - onHand;\r\n\r\n        //     const amount = rate * qty;\r\n        //     const sellingAmount = qty * sellingRate;\r\n\r\n        //     frappe.model.set_value(cdt, cdn, 'custom_ext_qty_required', extQty);\r\n        //     frappe.model.set_value(cdt, cdn, 'custom_sku_metal_weight', skuWeight);\r\n        //     frappe.model.set_value(cdt, cdn, 'custom_net_balance_required', netBalance);\r\n        //     frappe.model.set_value(cdt, cdn, 'amount', amount);\r\n        //     frappe.model.set_value(cdt, cdn, 'custom_selling_amount', sellingAmount);\r\n        // },\r\n\r\n        calculateNetBalance: function(frm, cdt, cdn) {\r\n            const row = locals[cdt][cdn];\r\n            if (!row) return;\r\n\r\n            const extQty = flt(row.custom_ext_qty_required) || 0;\r\n            const onHand = flt(row.custom_oh) || 0;\r\n            const netBalance = extQty - onHand;\r\n\r\n            frappe.model.set_value(cdt, cdn, 'custom_net_balance_required', netBalance);\r\n        },\r\n\r\n        // ==================== ITEM DESCRIPTION FUNCTIONS ====================\r\n        handleItemCodeChange: function(frm, cdt, cdn) {\r\n            setTimeout(() => this.updateBOMItemDescription(frm, cdt, cdn), 300);\r\n        },\r\n\r\n        handleGemstoneChange: function(frm, cdt, cdn) {\r\n            this.updateBOMItemDescription(frm, cdt, cdn);\r\n            this.updateCountryOfOriginOptions(frm, cdt, cdn);\r\n        },\r\n\r\n        updateBOMItemDescription: function(frm, cdt, cdn) {\r\n            const row = locals[cdt][cdn];\r\n            if (!row) return;\r\n        \r\n            const existing_desc = row.description || '';\r\n            let updated_desc = existing_desc;\r\n        \r\n            const parts = [];\r\n        \r\n            if (row.item_name && !existing_desc.includes(`Item Name: ${row.item_name}`))\r\n                parts.push(`Item Name: ${row.item_name}`);\r\n            if (row.custom_item_group && !existing_desc.includes(`Item Group: ${row.custom_item_group}`))\r\n                parts.push(`Item Group: ${row.custom_item_group}`);\r\n            if (row.custom_gemstone && !existing_desc.includes(`Gemstone: ${row.custom_gemstone}`))\r\n                parts.push(`Gemstone: ${row.custom_gemstone}`);\r\n            if (row.custom_grade && !existing_desc.includes(`Grade: ${row.custom_grade}`))\r\n                parts.push(`Grade: ${row.custom_grade}`);\r\n            if (row.custom_cut && !existing_desc.includes(`Cut: ${row.custom_cut}`))\r\n                parts.push(`Cut: ${row.custom_cut}`);\r\n            if (row.custom_setting_type && !existing_desc.includes(`Setting Type: ${row.custom_setting_type}`))\r\n                parts.push(`Setting Type: ${row.custom_setting_type}`);\r\n            if (row.custom_merch_color && !existing_desc.includes(`Merch Color: ${row.custom_merch_color}`))\r\n                parts.push(`Merch Color: ${row.custom_merch_color}`);\r\n            if (row.custom_stone_pieces && !existing_desc.includes(`Pieces: ${row.custom_stone_pieces}`))\r\n                parts.push(`Pieces: ${row.custom_stone_pieces}`);\r\n            if (row.custom_country_of_origin && !existing_desc.includes(`Country: ${row.custom_country_of_origin}`))\r\n                parts.push(`Country: ${row.custom_country_of_origin}`);\r\n            if (row.custom_sku_weight && !existing_desc.includes(`SKU Weight: ${row.custom_sku_weight}`))\r\n                parts.push(`SKU Weight: ${row.custom_sku_weight}`);\r\n            if (row.custom_avg_carat_weight && !existing_desc.includes(`Avg Carat: ${row.custom_avg_carat_weight}`))\r\n                parts.push(`Avg Carat: ${row.custom_avg_carat_weight}`);\r\n            if (row.custom_metal_weight && !existing_desc.includes(`Metal Weight: ${row.custom_metal_weight}`))\r\n                parts.push(`Metal Weight: ${row.custom_metal_weight}`);\r\n            if (row.custom_length && !existing_desc.includes(`Length: ${row.custom_length}`))\r\n                parts.push(`Length: ${row.custom_length}`);\r\n            if (row.custom_weight_perpiece && !existing_desc.includes(`Weight/Piece: ${row.custom_weight_perpiece}`))\r\n                parts.push(`Weight/Piece: ${row.custom_weight_perpiece}`);\r\n            if (row.custom_our_responsibility && !existing_desc.includes(`Responsibility: ${row.custom_our_responsibility}`))\r\n                parts.push(`Responsibility: ${row.custom_our_responsibility}`);\r\n            if (row.custom_merch_color__attribute && !existing_desc.includes(`Merch Color: ${row.custom_merch_color__attribute}`))\r\n                parts.push(`Merch Color: ${row.custom_merch_color__attribute}`);\r\n        \r\n            if (parts.length > 0) {\r\n                updated_desc += (updated_desc ? ' | ' : '') + parts.join(' | ');\r\n                frappe.model.set_value(cdt, cdn, 'description', updated_desc);\r\n                frm.fields_dict[\"bom_items\"].grid.refresh_row(cdn);\r\n            }\r\n        }\r\n,\r\n\r\n        // ==================== COUNTRY OF ORIGIN FUNCTIONS ====================\r\n        handleFormRender: function(frm, cdt, cdn) {\r\n            const row = locals[cdt][cdn];\r\n            this.updateCountryOfOriginOptions(frm, cdt, cdn);\r\n\r\n            if (row.custom_coutry) {\r\n                frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", row.custom_coutry);\r\n            }\r\n        },\r\n\r\n        updateCountryOfOriginOptions: function(frm, cdt, cdn) {\r\n            const row = locals[cdt][cdn];\r\n            const grid_field = frm.fields_dict[\"bom_items\"].grid;\r\n\r\n            if (!row.custom_gemstone) {\r\n                frappe.meta.get_docfield(\"Customer Worksheet BOM Creator Items\", \"custom_country_of_origin\").get_query = () => ({});\r\n                frappe.model.set_value(cdt, cdn, \"custom_country_of_origin\", null);\r\n                grid_field.refresh();\r\n                return;\r\n            }\r\n\r\n            frappe.call({\r\n                method: \"get_country_of_origin\",\r\n                args: {\r\n                    gemstone: row.custom_gemstone\r\n                },\r\n                callback: function(r) {\r\n                    if (r.exc) {\r\n                        console.error(\"Error fetching countries:\", r.exc);\r\n                        return;\r\n                    }\r\n\r\n                    if (r.data) {\r\n                        const unique_countries = [...new Set(r.data.map(entry => entry[1]))];\r\n                        grid_field.update_docfield_property(\"custom_country_of_origin\", \"options\", unique_countries);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n// async function createBOM(frm) {\r\n//     if (createBOM.creating_bom) return;\r\n//     createBOM.creating_bom = true;\r\n\r\n//     try {\r\n//         if (!frm.doc.bom_items || frm.doc.bom_items.length === 0) {\r\n//             frappe.msgprint(\"No items found in BOM Items table.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!frm.doc.finished_goods_item) {\r\n//             frappe.msgprint(\"Please select a Finished Goods Item.\");\r\n//             return;\r\n//         }\r\n\r\n//         const fg_item = frm.doc.finished_goods_item;\r\n\r\n//         // Unset existing default BOMs for this finished good item\r\n//         const existing_boms = await frappe.db.get_list('BOM', {\r\n//             filters: {\r\n//                 item: fg_item,\r\n//                 is_default: 1,\r\n//                 docstatus: 0\r\n//             },\r\n//             fields: ['name']\r\n//         });\r\n\r\n//         for (const bom of existing_boms) {\r\n//             await frappe.call({\r\n//                 method: \"frappe.client.set_value\",\r\n//                 args: {\r\n//                     doctype: \"BOM\",\r\n//                     name: bom.name,\r\n//                     fieldname: \"is_default\",\r\n//                     value: 0\r\n//                 }\r\n//             });\r\n//         }\r\n\r\n//         const items = frm.doc.bom_items.map(row => ({\r\n//             item_code: row.item_code,\r\n//             item_name: row.item_name,\r\n//             qty: row.qty || 1,\r\n//             uom: row.uom || 'Nos',\r\n//             rate: row.rate || 0,\r\n//             amount: row.amount || 0,\r\n//             description: row.description,\r\n//             item_group: row.custom_item_group || '',\r\n//             custom_selling_rate: row.custom_selling_rate || '',\r\n//             custom_selling_amount: row.custom_selling_amount || '',\r\n//             custom_gemstone: row.custom_gemstone,\r\n//             custom_stone_treatment: row.custom_stone_treatment,\r\n//             custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n//             custom_country_of_origin: row.custom_country_of_origin,\r\n//             custom_grade: row.custom_grade,\r\n//             custom_stone_pieces: row.custom_stone_pieces,\r\n//             custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n//             custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n//             custom_cut: row.custom_cut,\r\n//             custom_setting_type: row.custom_setting_type,\r\n//             custom_metal_weight: row.custom_metal_weight,\r\n//             custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n//             custom_metal_group: row.custom_metal_group,\r\n//             custom_sku_weight: row.custom_sku_weight,\r\n//             custom_ext_qty_required: row.custom_ext_qty_required,\r\n//             custom_oh: row.custom_oh,\r\n//             custom_net_balance_required: row.custom_net_balance_required,\r\n//             custom_our_responsibility: row.custom_our_responsibility\r\n//         }));\r\n\r\n//         const bom_doc = await frappe.call({\r\n//             method: \"frappe.client.insert\",\r\n//             freeze: true,\r\n//             freeze_message: \"Creating BOM...\",\r\n//             args: {\r\n//                 doc: {\r\n//                     doctype: \"BOM\",\r\n//                     item: fg_item,\r\n//                     quantity: 1,\r\n//                     is_active: 1,\r\n//                     is_default: 1,\r\n//                     docstatus: 0,\r\n//                     items: items\r\n//                 }\r\n//             }\r\n//         });\r\n\r\n//         const bom_name = bom_doc.message.name;\r\n\r\n//         (frm.doc.customer_worksheet_items || []).forEach(row => {\r\n//             row.default_bom = row.item_code === fg_item ? bom_name : '';\r\n//         });\r\n\r\n//         (frm.doc.bom_items || []).forEach(row => {\r\n//             row.bom_no = bom_name;\r\n//         });\r\n\r\n//         (frm.doc.customer_bom_items || []).forEach(row => {\r\n//             row.bom_no = bom_name;\r\n//         });\r\n\r\n//         frm.refresh_field(\"bom_items\");\r\n//         frm.refresh_field(\"customer_worksheet_items\");\r\n//         frm.refresh_field(\"customer_bom_items\");\r\n\r\n//         frm.fields_dict.bom_status?.$wrapper?.html(\r\n//             `<div style=\"color:green;\"><strong>BOM Created:</strong> <a href=\"/app/bom/${bom_name}\" target=\"_blank\">${bom_name}</a></div>`\r\n//         );\r\n\r\n//         frappe.msgprint({\r\n//             title: \"BOM Created\",\r\n//             message: `New BOM created: <a href=\"/app/bom/${bom_name}\" target=\"_blank\">${bom_name}</a>`,\r\n//             indicator: 'green'\r\n//         });\r\n\r\n//     } catch (err) {\r\n//         console.error(\"Failed to create BOM:\", err.message || err);\r\n//         frappe.msgprint(\"Error while creating BOM.\");\r\n//     } finally {\r\n//         createBOM.creating_bom = false;\r\n//     }\r\n// }\r\n\r\n    function toggleBOMButtons(frm) {\r\n        setTimeout(() => {\r\n            const createBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Create BOM');\r\n            const updateBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Update BOM');\r\n    \r\n            const hasFinishedGoodsItem = !!frm.doc.finished_goods_item;\r\n            const hasExistingBOM = !!frm.doc.existing_bom;\r\n            const hasBOMInChild = (frm.doc.bom_items || []).some(row => !!row.bom_no);\r\n    \r\n            if (hasFinishedGoodsItem && (hasExistingBOM || hasBOMInChild)) {\r\n                if (updateBtn) updateBtn.style.display = 'inline-block';\r\n                if (createBtn) createBtn.style.display = 'none';\r\n            } else {\r\n                if (createBtn) createBtn.style.display = 'inline-block';\r\n                if (updateBtn) updateBtn.style.display = 'none';\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    \r\n    \r\n    // async function updateBOM(frm) {\r\n    //     const customerRow = (frm.doc.customer_bom_items || []).find(row => row[\"bom_no\"]?.trim());\r\n    //     const bomRow = (frm.doc.bom_items || []).find(row => row[\"bom_no\"]?.trim());\r\n    //     const bom_no = (\r\n    //         (frm.doc.customer_bom_items || []).map(r => r.bom_no).find(v => !!v) ||\r\n    //         (frm.doc.bom_items || []).map(r => r.bom_no).find(v => !!v)\r\n    //     );\r\n\r\n    \r\n    //     if (!bom_no) {\r\n    //         frappe.msgprint(\"No BOM number found in Customer BOM Items or BOM Items.\");\r\n    //         return;\r\n    //     }\r\n    \r\n    //     try {\r\n    //         const response = await frappe.call({\r\n    //             method: \"frappe.client.get\",\r\n    //             args: {\r\n    //                 doctype: \"BOM\",\r\n    //                 name: bom_no\r\n    //             }\r\n    //         });\r\n    \r\n    //         const bom_doc = response.message;\r\n    \r\n    //         if (bom_doc.docstatus === 1) {\r\n    //             frappe.msgprint({\r\n    //                 title: \"BOM is Submitted\",\r\n    //                 message: \"This BOM is submitted. Please create a new BOM.\",\r\n    //                 indicator: \"red\"\r\n    //             });\r\n    \r\n    //             setTimeout(() => {\r\n    //                 const updateBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Update BOM');\r\n    //                 const createBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Create BOM');\r\n    //                 if (updateBtn) updateBtn.style.display = 'none';\r\n    //                 if (createBtn) createBtn.style.display = 'inline-block';\r\n    //             }, 300);\r\n    //             return;\r\n    //         }\r\n    \r\n    //         const sourceItems = customerRow ? frm.doc.customer_bom_items : frm.doc.bom_items;\r\n    \r\n    //         const new_items = sourceItems.map(row => ({\r\n    //             item_code: row.item_code,\r\n    //             item_name: row.item_name,\r\n    //             qty: row.qty || 1,\r\n    //             uom: row.uom,\r\n    //             rate: row.rate || 0,\r\n    //             amount: row.amount || 0,\r\n    //             description: row.description,\r\n    //             custom_item_group: row.custom_item_group || '',\r\n    //             custom_selling_amount: row.custom_selling_amount || '',\r\n    //             custom_gemstone: row.custom_gemstone,\r\n    //             custom_stone_treatment: row.custom_stone_treatment,\r\n    //             custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n    //             custom_country_of_origin: row.custom_country_of_origin,\r\n    //             custom_grade: row.custom_grade,\r\n    //             custom_stone_pieces: row.custom_stone_pieces,\r\n    //             custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n    //             custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n    //             custom_cut: row.custom_cut,\r\n    //             custom_setting_type: row.custom_setting_type,\r\n    //             custom_metal_weight: row.custom_metal_weight,\r\n    //             custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n    //             custom_metal_group: row.custom_metal_group,\r\n    //             custom_selling_rate: row.custom_selling_rate,\r\n    //             custom_sku_weight: row.custom_sku_weight,\r\n    //             custom_ext_qty_required: row.custom_ext_qty_required,\r\n    //             custom_oh: row.custom_oh,\r\n    //             custom_net_balance_required: row.custom_net_balance_required,\r\n    //             custom_our_responsibility: row.custom_our_responsibility,\r\n    //             custom_bom_id : row.bom_no,\r\n    //             doctype: \"BOM Item\",\r\n    //             parent: bom_no,\r\n    //             parenttype: \"BOM\",\r\n    //             parentfield: \"items\"\r\n    //         }));\r\n    \r\n    //         const stringify = obj => JSON.stringify(obj, Object.keys(obj).sort());\r\n    //         const oldItems = (bom_doc.items || []).map(stringify);\r\n    //         const freshItems = new_items.map(stringify);\r\n    \r\n    //         const isChanged = oldItems.length !== freshItems.length ||\r\n    //             oldItems.some((item, index) => item !== freshItems[index]);\r\n    \r\n    //         if (!isChanged) {\r\n    //             frappe.msgprint(\"No changes detected in BOM items. Skipping update.\");\r\n    //             return;\r\n    //         }\r\n    \r\n    //       bom_doc.custom_bom_id = bom_no;\r\n    //         bom_doc.items = new_items;\r\n\r\n    \r\n    //         await frappe.call({\r\n    //             method: \"frappe.client.save\",\r\n    //             args: { doc: bom_doc }\r\n    //         });\r\n    \r\n    //         frappe.msgprint({\r\n    //             title: \"BOM Updated\",\r\n    //             message: `BOM <a href=\"/app/bom/${bom_doc.name}\" target=\"_blank\">${bom_doc.name}</a> has been updated.`,\r\n    //             indicator: 'green'\r\n    //         });\r\n    \r\n    //     } catch (error) {\r\n    //         console.error(\"BOM update error:\", error);\r\n    //         frappe.msgprint(\"Error while updating BOM.\");\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\nfunction updateBOMTotals(frm) {\r\n    const items = frm.doc.customer_bom_items || [];\r\n\r\n    if (!items.length) return;\r\n\r\n    let total_selling = 0;\r\n\r\n    items.forEach(row => {\r\n        total_selling += flt(row.qty) * flt(row.custom_selling_rate || 0);\r\n    });\r\n\r\n    function showTotal(symbol = \"\") {\r\n        if (frm.fields_dict.bom_item_total?.$wrapper) {\r\n            frm.fields_dict.bom_item_total.$wrapper.html(`\r\n                <div style=\"padding: 8px;\">\r\n                    <b>Total BOM Items:</b> ${items.length}<br>\r\n                    <b>Selling Amount:</b> ${symbol} ${total_selling.toFixed(2)}\r\n                </div>\r\n            `);\r\n        }\r\n    }\r\n\r\n    if (frm.doc.customer) {\r\n        frappe.db.get_value(\"Customer\", frm.doc.customer, \"default_currency\", (customerData) => {\r\n            const currency = customerData?.default_currency;\r\n\r\n            if (currency) {\r\n                frappe.db.get_value(\"Currency\", currency, \"symbol\", (currencyData) => {\r\n                    const symbol = currencyData?.symbol || \"\";\r\n                    showTotal(symbol);\r\n                });\r\n            } else {\r\n                showTotal(\"\"); \r\n            }\r\n        });\r\n    } else {\r\n        showTotal(\"\");\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n    frappe.ui.form.on('Customer Worksheet', {\r\n        bom_id(frm) {\r\n            setTimeout(() => updateBOMTotals(frm), 500);\r\n        },\r\n        refresh(frm) {\r\n            updateBOMTotals(frm);\r\n        },\r\n        validate(frm) {\r\n            updateBOMTotals(frm);\r\n        },\r\n            finished_goods_item: function(frm) {\r\n        if (!frm.doc.finished_goods_item) return;\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"BOM\",\r\n                filters: {\r\n                    item: frm.doc.finished_goods_item,\r\n                    // docstatus: 1,\r\n                    is_default: 1\r\n                },\r\n                fields: [\"name\"],\r\n                limit_page_length: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    frm.set_value(\"existing_bom\", r.message[0].name);\r\n                } else {\r\n                    frm.set_value(\"existing_bom\", \"\");\r\n                    // frappe.msgprint(\"Default BOM not found for selected item.\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n    });\r\n    \r\n    frappe.ui.form.on('Customer BOM Items', {\r\n        qty: updateBOMTotals,\r\n        rate: updateBOMTotals,\r\n        custom_selling_rate: updateBOMTotals\r\n    });\r\n\r\n    \r\n// ================= Calculation Logic ================\r\nconst calculateLogic = {\r\n    calculateQtyAndAll: function(frm, cdt, cdn) {\r\n        this.calculateQty(frm, cdt, cdn);\r\n        this.calculateAll(frm, cdt, cdn);\r\n        this.calculateExtra(frm, cdt, cdn);\r\n    },\r\n\r\n    calculateQty: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        let new_qty = 0;\r\n    \r\n        const item_group = (row?.custom_item_group || \"\").trim();\r\n        const uom = (row.uom || \"\").toLowerCase();\r\n    \r\n        if (item_group === \"Stone\") {\r\n            new_qty = (uom === \"carat\")\r\n                ? flt(row.custom_avg_carat_weight)\r\n                : flt(row.custom_stone_pieces);\r\n        } else if (item_group === \"Pearl\") {\r\n            new_qty = flt(row.custom_avg_carat_weight); \r\n        } else if (item_group === \"Metal\") {\r\n            new_qty = flt(row.custom_metal_weight);\r\n        }\r\n    \r\n        if (flt(row.qty) !== flt(new_qty)) {\r\n            frappe.model.set_value(cdt, cdn, 'qty', new_qty);\r\n        }\r\n\r\n},\r\n    calculateAll: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        if (!row) return;\r\n\r\n        const qty = flt(row.qty) || 0;\r\n        const rate = flt(row.rate) || 0;\r\n        const sellingRate = flt(row.custom_selling_rate) || 0;\r\n\r\n        const amount = qty * rate;\r\n        const sellingAmount = qty * sellingRate;\r\n\r\n        frappe.model.set_value(cdt, cdn, 'amount', amount);\r\n        frappe.model.set_value(cdt, cdn, 'custom_selling_amount', sellingAmount);\r\n    },\r\n\r\n    calculateExtra: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        if (!row) return;\r\n\r\n        const metalWeight = flt(row.custom_metal_weight || 0);\r\n        const skuMetalWeight = metalWeight * 0.8;\r\n\r\n        frappe.model.set_value(cdt, cdn, 'custom_sku_metal_weight', skuMetalWeight);\r\n    },\r\n\r\n    recalculateAllRows: function(frm) {\r\n        (frm.doc.customer_bom_items || []).forEach(row => {\r\n            const cdt = \"Customer Worksheet BOM Creator Items\";\r\n            const cdn = row.name;\r\n            this.calculateQtyAndAll(frm, cdt, cdn);\r\n        });\r\n    }\r\n};\r\n\r\n\r\n\r\n    BOMCreator.init();\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-06-25 11:49:38.037222",
  "module": "espresso",
  "name": "Enhanced Item Search for BOM",
  "script": "window.search_cache = null;\r\nwindow.search_timeout = null;\r\nwindow.search_mode = 'enhanced';\r\n\r\nfrappe.ui.form.on('BOM', {\r\n\tonload: function(frm) {\r\n\t\tif (!frm.doc.custom_item_group_to_filter_items) {\r\n\t\t\tfrm.set_value('custom_item_group_to_filter_items', 'Raw Material');\r\n\t\t}\r\n\t\t\r\n\t\tinit_smart_cache();\r\n\t\tload_search_preference();\r\n\t\tapply_item_filters(frm);\r\n\t},\r\n\t\r\n\trefresh: function(frm) {\r\n\t\tapply_item_filters(frm);\r\n\t\tadd_search_mode_toggle(frm);\r\n\t\t\r\n\t\tif (window.search_mode === 'enhanced') {\r\n\t\t\tsetup_enhanced_search(frm);\r\n\t\t\tupdate_all_placeholders(frm);\r\n\t\t} else {\r\n\t\t\tcleanup_enhanced_search(frm);\r\n\t\t}\r\n\t},\r\n\t\r\n\tcustom_item_group_to_filter_items: function(frm) {\r\n\t\tclear_cache();\r\n\t\tapply_item_filters(frm);\r\n\t\tupdate_all_placeholders(frm);\r\n\t}\r\n});\r\n\r\nfunction init_smart_cache() {\r\n\tconst session_id = get_session_id();\r\n\tconst cache_version = '1.0';\r\n\t\r\n\twindow.search_cache = {\r\n\t\tdata: new Map(),\r\n\t\tsession_id: session_id,\r\n\t\tversion: cache_version,\r\n\t\tcreated_at: Date.now(),\r\n\t\tmax_size: 50,\r\n\t\tttl: 5 * 60 * 1000,\r\n\t\t\r\n\t\tget: function(key) {\r\n\t\t\tconst entry = this.data.get(key);\r\n\t\t\tif (!entry) return null;\r\n\t\t\t\r\n\t\t\tif (Date.now() - entry.timestamp > this.ttl) {\r\n\t\t\t\tthis.data.delete(key);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tentry.last_accessed = Date.now();\r\n\t\t\treturn entry.data;\r\n\t\t},\r\n\t\t\r\n\t\tset: function(key, data) {\r\n\t\t\tif (this.data.size >= this.max_size) {\r\n\t\t\t\tthis.cleanup_lru();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.data.set(key, {\r\n\t\t\t\tdata: data,\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tlast_accessed: Date.now()\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\tcleanup_lru: function() {\r\n\t\t\tconst entries = Array.from(this.data.entries())\r\n\t\t\t\t.sort((a, b) => a[1].last_accessed - b[1].last_accessed);\r\n\t\t\t\r\n\t\t\tconst remove_count = Math.floor(this.max_size * 0.2);\r\n\t\t\tfor (let i = 0; i < remove_count; i++) {\r\n\t\t\t\tthis.data.delete(entries[i][0]);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tclear: function() {\r\n\t\t\tthis.data.clear();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction get_session_id() {\r\n\tconst navigation_type = performance.navigation ? performance.navigation.type : 0;\r\n\tconst page_load_time = performance.timing ? performance.timing.navigationStart : Date.now();\r\n\t\r\n\treturn `${frappe.session.user}_${page_load_time}_${navigation_type}`;\r\n}\r\n\r\nfunction clear_cache() {\r\n\tif (window.search_cache) {\r\n\t\twindow.search_cache.clear();\r\n\t}\r\n}\r\n\r\nfunction add_search_mode_toggle(frm) {\r\n\tif (frm.$wrapper.find('.search-mode-toggle-btn').length > 0) {\r\n\t\tupdate_toggle_button_text(frm);\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tconst initial_label = window.search_mode === 'enhanced' ? \r\n\t\t'🔍 Enhanced (→ Standard)' : '📋 Standard (→ Enhanced)';\r\n\t\r\n\tconst btn = frm.page.add_inner_button(initial_label, function() {\r\n\t\ttoggle_search_mode(frm);\r\n\t});\r\n\t\r\n\tbtn.addClass('search-mode-toggle-btn');\r\n\tbtn.attr('data-search-toggle', 'true');\r\n}\r\n\r\nfunction update_toggle_button_text(frm) {\r\n\tconst new_label = window.search_mode === 'enhanced' ? \r\n\t\t'🔍 Enhanced (→ Standard)' : '📋 Standard (→ Enhanced)';\r\n\t\r\n\tconst $toggle_btn = frm.$wrapper.find('.search-mode-toggle-btn');\r\n\tif ($toggle_btn.length > 0) {\r\n\t\t$toggle_btn.text(new_label);\r\n\t}\r\n}\r\n\r\nfunction toggle_search_mode(frm) {\r\n\twindow.search_mode = window.search_mode === 'enhanced' ? 'standard' : 'enhanced';\r\n\t\r\n\tlocalStorage.setItem('bom_search_mode', window.search_mode);\r\n\tupdate_toggle_button_text(frm);\r\n\t\r\n\tif (window.search_mode === 'enhanced') {\r\n\t\tsetup_enhanced_search(frm);\r\n\t\tupdate_all_placeholders(frm);\r\n\t\tfrappe.show_alert({\r\n\t\t\tmessage: 'Enhanced Search Enabled - Multi-word search',\r\n\t\t\tindicator: 'green'\r\n\t\t});\r\n\t} else {\r\n\t\tcleanup_enhanced_search(frm);\r\n\t\tfrappe.show_alert({\r\n\t\t\tmessage: 'Standard Search Enabled - Default ERPNext search', \r\n\t\t\tindicator: 'blue'\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction load_search_preference() {\r\n\tconst saved_mode = localStorage.getItem('bom_search_mode');\r\n\tif (saved_mode && ['enhanced', 'standard'].includes(saved_mode)) {\r\n\t\twindow.search_mode = saved_mode;\r\n\t}\r\n}\r\n\r\nfunction cleanup_enhanced_search(frm) {\r\n\tfrm.$wrapper.off('.enhanced-search');\r\n\thide_suggestions();\r\n\tclear_cache();\r\n\t\r\n\tsetTimeout(() => {\r\n\t\tlet $inputs = frm.$wrapper.find('[data-fieldname=\"item_code\"] input');\r\n\t\t$inputs.each(function() {\r\n\t\t\t$(this).attr('placeholder', 'Item Code');\r\n\t\t});\r\n\t}, 100);\r\n\t\r\n\t$('.awesomplete ul').show();\r\n}\r\n\r\nfunction setup_enhanced_search(frm) {\r\n\tfrm.$wrapper.off('.enhanced-search');\r\n\t\r\n\tfrm.$wrapper.on('input.enhanced-search', '[data-fieldname=\"item_code\"] input', function() {\r\n\t\tlet $input = $(this);\r\n\t\tlet search_text = $input.val().trim();\r\n\t\t\r\n\t\tclearTimeout(window.search_timeout);\r\n\t\thide_suggestions();\r\n\t\thide_standard_dropdown($input);\r\n\t\t\r\n\t\tif (search_text.length >= 3) {\r\n\t\t\twindow.search_timeout = setTimeout(() => {\r\n\t\t\t\tperform_enhanced_search(search_text, $input, frm);\r\n\t\t\t}, 400);\r\n\t\t} else if (search_text.length === 0) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif ($input.is(':focus') && $input.val().trim().length === 0) {\r\n\t\t\t\t\tperform_default_search($input, frm);\r\n\t\t\t\t}\r\n\t\t\t}, 200);\r\n\t\t} else {\r\n\t\t\tshow_search_hint($input, 'Type at least 3 characters...');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfrm.$wrapper.on('focus.enhanced-search', '[data-fieldname=\"item_code\"] input', function() {\r\n\t\tlet $input = $(this);\r\n\t\thide_standard_dropdown($input);\r\n\t\t\r\n\t\tlet item_group = frm.doc.custom_item_group_to_filter_items || 'Raw Material';\r\n\t\t$input.attr('placeholder', `Search ${item_group} (min 3 chars)`);\r\n\t\t\r\n\t\tif ($input.val().trim().length === 0) {\r\n\t\t\tsetTimeout(() => perform_default_search($input, frm), 300);\r\n\t\t}\r\n\t});\r\n\t\r\n\tfrm.$wrapper.on('keydown.enhanced-search', '[data-fieldname=\"item_code\"] input', function(e) {\r\n\t\thandle_keyboard_navigation(e);\r\n\t});\r\n}\r\n\r\nasync function perform_enhanced_search(search_text, $input, frm) {\r\n\ttry {\r\n\t\tshow_loading($input);\r\n\t\tconst item_group = frm.doc.custom_item_group_to_filter_items || \"Raw Material\";\r\n\t\t\r\n\t\tlet results = await get_search_results(search_text, item_group);\r\n\t\t\r\n\t\tif ($input.val().trim() === search_text) {\r\n\t\t\tshow_suggestions($input, results, search_text, item_group, frm);\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.error('Enhanced search failed:', error);\r\n\t\t\r\n\t\tif ($input.val().trim() === search_text) {\r\n\t\t\tshow_fallback_option($input, frm);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction show_fallback_option($input, frm) {\r\n\tconst fallback_html = `\r\n\t\t<div class=\"search-fallback\" style=\"\r\n\t\t\tposition: absolute;\r\n\t\t\tmargin-top: 2px;\r\n\t\t\tpadding: 8px;\r\n\t\t\tbackground: #fff3cd;\r\n\t\t\tborder: 1px solid #ffeaa7;\r\n\t\t\tborder-radius: 4px;\r\n\t\t\tfont-size: 12px;\r\n\t\t\tz-index: 999;\r\n\t\t\tmin-width: 300px;\r\n\t\t\">\r\n\t\t\t<div style=\"color: #856404; margin-bottom: 5px;\">\r\n\t\t\t\t⚠️ Enhanced search temporarily unavailable\r\n\t\t\t</div>\r\n\t\t\t<button class=\"btn btn-sm btn-primary switch-to-standard\" style=\"font-size: 11px;\">\r\n\t\t\t\tSwitch to Standard Search\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t`;\r\n\t\r\n\thide_suggestions();\r\n\t$input.after(fallback_html);\r\n\t\r\n\t$input.siblings('.search-fallback').find('.switch-to-standard').on('click', function() {\r\n\t\ttoggle_search_mode(frm);\r\n\t});\r\n}\r\n\r\nasync function get_search_results(search_text, item_group) {\r\n\tlet words = search_text.toLowerCase().split(' ').filter(w => w.length >= 2);\r\n\tlet cache_key = `${item_group}_${words.sort().join('_')}`;\r\n\t\r\n\tlet cached_results = window.search_cache.get(cache_key);\r\n\tif (cached_results) {\r\n\t\treturn cached_results;\r\n\t}\r\n\t\r\n\ttry {\r\n\t\tlet all_items = new Map();\r\n\t\tlet base_filters = [\r\n\t\t\t['disabled', '=', 0],\r\n\t\t\t['is_stock_item', '=', 1],\r\n\t\t\t['item_group', 'descendants of (inclusive)', item_group]\r\n\t\t];\r\n\t\t\r\n\t\tlet name_filters = [...base_filters];\r\n\t\twords.forEach(word => name_filters.push(['item_name', 'like', `%${word}%`]));\r\n\t\t\r\n\t\tlet response1 = await frappe.call({\r\n\t\t\tmethod: 'frappe.client.get_list',\r\n\t\t\targs: {\r\n\t\t\t\tdoctype: 'Item',\r\n\t\t\t\tfields: ['name', 'item_name', 'description'],\r\n\t\t\t\tfilters: name_filters,\r\n\t\t\t\tlimit_page_length: 40,\r\n\t\t\t\torder_by: 'item_name asc'\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (response1.message) {\r\n\t\t\tresponse1.message.forEach(item => {\r\n\t\t\t\tall_items.set(item.name, {\r\n\t\t\t\t\titem_code: item.name,\r\n\t\t\t\t\titem_name: item.item_name || item.name,\r\n\t\t\t\t\tdescription: item.description || '',\r\n\t\t\t\t\tscore: 100,\r\n\t\t\t\t\tmatch_source: 'item_name'\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tlet desc_filters = [...base_filters];\r\n\t\twords.forEach(word => desc_filters.push(['description', 'like', `%${word}%`]));\r\n\t\t\r\n\t\tlet response2 = await frappe.call({\r\n\t\t\tmethod: 'frappe.client.get_list',\r\n\t\t\targs: {\r\n\t\t\t\tdoctype: 'Item',\r\n\t\t\t\tfields: ['name', 'item_name', 'description'],\r\n\t\t\t\tfilters: desc_filters,\r\n\t\t\t\tlimit_page_length: 25,\r\n\t\t\t\torder_by: 'item_name asc'\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (response2.message) {\r\n\t\t\tresponse2.message.forEach(item => {\r\n\t\t\t\tif (all_items.has(item.name)) {\r\n\t\t\t\t\tlet existing = all_items.get(item.name);\r\n\t\t\t\t\texisting.score = 150;\r\n\t\t\t\t\texisting.match_source = 'item_name + description';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tall_items.set(item.name, {\r\n\t\t\t\t\t\titem_code: item.name,\r\n\t\t\t\t\t\titem_name: item.item_name || item.name,\r\n\t\t\t\t\t\tdescription: item.description || '',\r\n\t\t\t\t\t\tscore: 75,\r\n\t\t\t\t\t\tmatch_source: 'description'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tlet results = Array.from(all_items.values())\r\n\t\t\t.sort((a, b) => b.score - a.score)\r\n\t\t\t.slice(0, 15);\r\n\t\t\r\n\t\twindow.search_cache.set(cache_key, results);\r\n\t\t\r\n\t\treturn results;\r\n\t\t\r\n\t} catch (error) {\r\n\t\tconsole.error('Search API error:', error);\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\nasync function perform_default_search($input, frm) {\r\n\ttry {\r\n\t\tshow_loading($input);\r\n\t\tconst item_group = frm.doc.custom_item_group_to_filter_items || \"Raw Material\";\r\n\t\tlet cache_key = `default_${item_group}`;\r\n\t\t\r\n\t\tlet cached_results = window.search_cache.get(cache_key);\r\n\t\tif (cached_results) {\r\n\t\t\tshow_suggestions($input, cached_results, '', item_group, frm);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet response = await frappe.call({\r\n\t\t\tmethod: 'frappe.client.get_list',\r\n\t\t\targs: {\r\n\t\t\t\tdoctype: 'Item',\r\n\t\t\t\tfields: ['name', 'item_name', 'description'],\r\n\t\t\t\tfilters: {\r\n\t\t\t\t\t'disabled': 0,\r\n\t\t\t\t\t'is_stock_item': 1,\r\n\t\t\t\t\t'item_group': ['descendants of (inclusive)', item_group]\r\n\t\t\t\t},\r\n\t\t\t\tlimit_page_length: 8,\r\n\t\t\t\torder_by: 'creation desc'\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tlet results = [];\r\n\t\tif (response.message) {\r\n\t\t\tresults = response.message.map(item => ({\r\n\t\t\t\titem_code: item.name,\r\n\t\t\t\titem_name: item.item_name || item.name,\r\n\t\t\t\tdescription: item.description || '',\r\n\t\t\t\tscore: 1\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\twindow.search_cache.set(cache_key, results);\r\n\t\t}\r\n\t\t\r\n\t\tshow_suggestions($input, results, '', item_group, frm);\r\n\t} catch (error) {\r\n\t\tconsole.error('Default search error:', error);\r\n\t\thide_suggestions();\r\n\t}\r\n}\r\n\r\nfunction apply_item_filters(frm) {\r\n\tconst item_group = frm.doc.custom_item_group_to_filter_items || \"Raw Material\";\r\n\t\r\n\tfrm.set_query(\"item\", function() {\r\n\t\treturn {\r\n\t\t\tfilters: [['Item', 'item_group', 'descendants of (inclusive)', item_group]]\r\n\t\t};\r\n\t});\r\n\t\r\n\tfrm.fields_dict['items'].grid.get_field('item_code').get_query = function() {\r\n\t\treturn {\r\n\t\t\tfilters: [['Item', 'item_group', 'descendants of (inclusive)', item_group]]\r\n\t\t};\r\n\t};\r\n}\r\n\r\nfunction update_all_placeholders(frm) {\r\n\tif (window.search_mode !== 'enhanced') return;\r\n\t\r\n\tconst item_group = frm.doc.custom_item_group_to_filter_items || \"Raw Material\";\r\n\t\r\n\tsetTimeout(() => {\r\n\t\tlet $inputs = frm.$wrapper.find('[data-fieldname=\"item_code\"] input');\r\n\t\t$inputs.each(function() {\r\n\t\t\t$(this).attr('placeholder', `Search ${item_group} (min 3 chars)`);\r\n\t\t});\r\n\t}, 500);\r\n}\r\n\r\nfunction show_search_hint($input, message) {\r\n\thide_suggestions();\r\n\thide_standard_dropdown($input);\r\n\t$input.after(`<div class=\"search-status\" style=\"position: absolute; margin-top: 2px; font-size: 12px; color: #666; z-index: 999;\">${message}</div>`);\r\n}\r\n\r\nfunction show_loading($input) {\r\n\thide_suggestions();\r\n\thide_standard_dropdown($input);\r\n\t$input.after('<div class=\"search-status\" style=\"position: absolute; margin-top: 2px; font-size: 12px; color: #007bff; z-index: 999;\"><i class=\"fa fa-spinner fa-spin\"></i> Searching...</div>');\r\n}\r\n\r\nfunction show_suggestions($input, results, search_text, item_group, frm) {\r\n\thide_suggestions();\r\n\thide_standard_dropdown($input);\r\n\t\r\n\tif (results.length === 0) {\r\n\t\tlet message = search_text.length > 0 ? `No ${item_group} items found` : `No ${item_group} items available`;\r\n\t\t$input.after(`<div class=\"search-status\" style=\"position: absolute; margin-top: 2px; font-size: 12px; color: #999; z-index: 999;\">${message}</div>`);\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tlet headerText = search_text.length > 0 ? \r\n\t\t`${item_group} items (${results.length} found)` : \r\n\t\t`Recent ${item_group} items (${results.length})`;\r\n\t\r\n\tlet html = `\r\n\t\t<div class=\"item-suggestions\" style=\"\r\n\t\t\tposition: absolute; \r\n\t\t\tz-index: 1000; \r\n\t\t\tbackground: white; \r\n\t\t\tborder: 1px solid #ddd; \r\n\t\t\tborder-radius: 4px; \r\n\t\t\tmax-height: 400px; \r\n\t\t\toverflow-y: auto; \r\n\t\t\tbox-shadow: 0 4px 12px rgba(0,0,0,0.15); \r\n\t\t\tmargin-top: 2px; \r\n\t\t\tmin-width: 450px;\r\n\t\t\tmax-width: 600px;\r\n\t\t\">\r\n\t\t\t<div style=\"padding: 8px; background: #f8f9fa; border-bottom: 1px solid #ddd; font-size: 12px; font-weight: bold; position: sticky; top: 0;\">\r\n\t\t\t\t${headerText} (↑↓ arrows, Enter to select, Esc to close)\r\n\t\t\t</div>\r\n\t`;\r\n\t\r\n\tresults.forEach(item => {\r\n\t\thtml += `\r\n\t\t\t<div class=\"suggestion-item\" data-code=\"${item.item_code}\" style=\"\r\n\t\t\t\tpadding: 10px; \r\n\t\t\t\tcursor: pointer; \r\n\t\t\t\tborder-bottom: 1px solid #eee;\r\n\t\t\t\tuser-select: none;\r\n\t\t\t\ttransition: background-color 0.1s ease;\r\n\t\t\t\">\r\n\t\t\t\t<div style=\"font-weight: bold; color: #333; font-size: 14px; margin-bottom: 3px;\">\r\n\t\t\t\t\t${item.item_code}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"color: #666; font-size: 12px; margin-bottom: 2px;\">\r\n\t\t\t\t\t${item.item_name}\r\n\t\t\t\t</div>\r\n\t\t\t\t${item.description ? `<div style=\"color: #999; font-size: 11px; line-height: 1.3;\">${item.description.substring(0, 120)}${item.description.length > 120 ? '...' : ''}</div>` : ''}\r\n\t\t\t</div>\r\n\t\t`;\r\n\t});\r\n\t\r\n\thtml += '</div>';\r\n\t\r\n\tlet $suggestions = $(html);\r\n\t$input.parent().css('position', 'relative');\r\n\t$input.after($suggestions);\r\n\t\r\n\tif (!$('#item-suggestions-styles').length) {\r\n\t\t$('<style id=\"item-suggestions-styles\">').prop('type', 'text/css').html(`\r\n\t\t\t.suggestion-item.highlighted {\r\n\t\t\t\tbackground-color: #007bff !important;\r\n\t\t\t\tcolor: white !important;\r\n\t\t\t}\r\n\t\t\t.suggestion-item.highlighted div {\r\n\t\t\t\tcolor: white !important;\r\n\t\t\t}\r\n\t\t\t.suggestion-item:hover {\r\n\t\t\t\tbackground-color: #f8f9fa;\r\n\t\t\t}\r\n\t\t\t.suggestion-item.highlighted:hover {\r\n\t\t\t\tbackground-color: #0056b3 !important;\r\n\t\t\t}\r\n\t\t`).appendTo('head');\r\n\t}\r\n\t\r\n\t$suggestions.find('.suggestion-item').on('mousedown', function(e) {\r\n\t\te.preventDefault();\r\n\t\tlet item_code = $(this).data('code');\r\n\t\tselect_item($input, item_code, frm);\r\n\t});\r\n\t\r\n\t$suggestions.find('.suggestion-item').on('mouseenter', function() {\r\n\t\t$suggestions.find('.suggestion-item').removeClass('highlighted');\r\n\t\t$(this).addClass('highlighted');\r\n\t});\r\n\t\r\n\tsetTimeout(() => {\r\n\t\t$(document).off('click.suggestions').on('click.suggestions', function(e) {\r\n\t\t\tif (!$(e.target).closest('.item-suggestions, input[data-fieldname=\"item_code\"]').length) {\r\n\t\t\t\thide_suggestions();\r\n\t\t\t}\r\n\t\t});\r\n\t}, 100);\r\n}\r\n\r\nfunction handle_keyboard_navigation(e) {\r\n\tlet $suggestions = $('.item-suggestions');\r\n\tif ($suggestions.length === 0) return;\r\n\t\r\n\tlet $items = $suggestions.find('.suggestion-item');\r\n\tlet $highlighted = $items.filter('.highlighted');\r\n\tlet currentIndex = $highlighted.length > 0 ? $items.index($highlighted) : -1;\r\n\t\r\n\tswitch(e.keyCode) {\r\n\t\tcase 40:\r\n\t\t\te.preventDefault();\r\n\t\t\tif (currentIndex < $items.length - 1) {\r\n\t\t\t\t$items.removeClass('highlighted');\r\n\t\t\t\t$items.eq(currentIndex + 1).addClass('highlighted');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase 38:\r\n\t\t\te.preventDefault();\r\n\t\t\tif (currentIndex > 0) {\r\n\t\t\t\t$items.removeClass('highlighted');\r\n\t\t\t\t$items.eq(currentIndex - 1).addClass('highlighted');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase 13:\r\n\t\t\tif ($highlighted.length > 0) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\t$highlighted.trigger('mousedown');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase 27:\r\n\t\t\te.preventDefault();\r\n\t\t\thide_suggestions();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction select_item($input, item_code, frm) {\r\n\tsetTimeout(() => {\r\n\t\ttry {\r\n\t\t\t$input.val(item_code);\r\n\t\t\t\r\n\t\t\tlet field_name = $input.closest('[data-fieldname]').attr('data-fieldname');\r\n\t\t\tlet row_name = $input.closest('[data-name]').attr('data-name');\r\n\t\t\t\r\n\t\t\tif (row_name && field_name === 'item_code') {\r\n\t\t\t\tlet row_doc = locals[frm.doc.doctype + ' Item'][row_name];\r\n\t\t\t\tif (row_doc) {\r\n\t\t\t\t\trow_doc[field_name] = item_code;\r\n\t\t\t\t\tfrm.refresh_field('items');\r\n\t\t\t\t}\r\n\t\t\t} else if (field_name === 'item') {\r\n\t\t\t\tfrm.set_value('item', item_code);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$input.trigger('change');\r\n\t\t\thide_standard_dropdown($input);\r\n\t\t\t\r\n\t\t} catch (error) {\r\n\t\t\t$input.val(item_code).trigger('change');\r\n\t\t}\r\n\t\t\r\n\t\thide_suggestions();\r\n\t}, 10);\r\n}\r\n\r\nfunction hide_suggestions() {\r\n\t$('.item-suggestions, .search-status, .search-fallback').remove();\r\n\t$(document).off('click.suggestions');\r\n}\r\n\r\nfunction hide_standard_dropdown($input) {\r\n\tlet $awesomplete = $input.closest('.frappe-control').find('.awesomplete');\r\n\tif ($awesomplete.length > 0) {\r\n\t\t$awesomplete.find('ul').hide();\r\n\t\t$awesomplete.find('ul').empty();\r\n\t}\r\n\t\r\n\t$input.closest('.form-group').find('.dropdown-menu').hide();\r\n\t$('.dropdown-menu.show').removeClass('show');\r\n\t\r\n\tif (window.Awesomplete) {\r\n\t\tlet instances = document.querySelectorAll('.awesomplete input');\r\n\t\tinstances.forEach(input => {\r\n\t\t\tif (input.awesomplete) {\r\n\t\t\t\tinput.awesomplete.close();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t$('[data-doctype=\"BOM Item\"] .awesomplete ul').hide();\r\n}\r\n\r\nfrappe.ui.form.on('BOM Item', {\r\n\titem_code: function(frm, cdt, cdn) {\r\n\t\tif (window.search_mode === 'enhanced') {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tlet $row = $(`[data-name=\"${cdn}\"]`);\r\n\t\t\t\tlet $input = $row.find('[data-fieldname=\"item_code\"] input');\r\n\t\t\t\tif ($input.length > 0) {\r\n\t\t\t\t\tlet item_group = frm.doc.custom_item_group_to_filter_items || 'Raw Material';\r\n\t\t\t\t\t$input.attr('placeholder', `Search ${item_group} (min 3 chars)`);\r\n\t\t\t\t}\r\n\t\t\t}, 100);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nfrappe.ui.form.on('BOM', {\r\n\titems_add: function(frm) {\r\n\t\tsetTimeout(() => update_all_placeholders(frm), 100);\r\n\t}\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Jewelry Measurement",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.979739",
  "module": "espresso",
  "name": "Product Type Fill",
  "script": "frappe.ui.form.on('Jewelry Measurement', {\n    onload: function(frm) {\n        // If product_type is empty and item is selected, set it from Item's item_group\n        if (!frm.doc.product_type && frm.doc.item) {\n            set_product_type_from_item(frm);\n        }\n    },\n\n    item: function(frm) {\n        // Always update product_type from selected item's item_group\n        if (frm.doc.item) {\n            set_product_type_from_item(frm);\n        }\n    },\n});\n\nfunction set_product_type_from_item(frm) {\n    frappe.db.get_value('Item', frm.doc.item, 'item_group')\n        .then(r => {\n            if (r && r.message && r.message.item_group) {\n                frm.set_value('product_type', r.message.item_group);\n            }\n        });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.688067",
  "module": "espresso",
  "name": "Tab Identification for Customer Worksheet",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    refresh: function (frm) {\r\n        frm.add_custom_button('Customer PO Manager', () => {\r\n            frappe.new_doc('Customer PO Manager');\r\n        }, __('View'));         \r\n        setTimeout(() => {\r\n            const tabMap = {\r\n                \"Worksheet Details\": { indicator: \"blue\" },\r\n                \"Item Creator\": { indicator: \"orange\" },\r\n                \"BOM Creator\": { indicator: \"green\" }\r\n            };\r\n\r\n            frm.$wrapper.find('.form-tabs .nav-link').off('click.worksheet_tab_handler');\r\n\r\n            frm.$wrapper.find('.form-tabs .nav-link').on('click.worksheet_tab_handler', function () {\r\n                const label = $(this).text().trim();\r\n                frm.__active_tab = label;\r\n\r\n                const tabData = tabMap[label];\r\n                if (tabData) {\r\n                    // frappe.msgprint({\r\n                    //     title: `${label} Tab`,\r\n                    //     message: `You are now on the <b>${label}</b> tab.`,\r\n                    //     indicator: tabData.indicator\r\n                    // });\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    frm.$wrapper.find('.form-tabs .nav-link').each(function () {\r\n                        const $tab = $(this);\r\n                        if ($tab.hasClass('active')) {\r\n                            $tab.css({\r\n                                // 'color': '#1a73e8',\r\n                                'font-weight': '600',\r\n                                'border-bottom': '2px solid #000'\r\n                            });\r\n                        } else {\r\n                            $tab.css({\r\n                                'color': '',\r\n                                'font-weight': '',\r\n                                'border-bottom': ''\r\n                            });\r\n                        }\r\n                    });\r\n                }, 10);\r\n            });\r\n\r\n            const activeLabel = frm.$wrapper.find('.form-tabs .nav-link.active').text().trim();\r\n            frm.__active_tab = activeLabel;\r\n\r\n        }, 1000);\r\n    },\r\n\r\n    before_save: async function (frm) {\r\n        if (frm.doc.__skip_bom_prompt) return;\r\n        // frm.set_value('bom_id', '')\r\n\r\n        const activeTab = frm.__active_tab || \"\";\r\n        let bomRow = null;\r\n        let sourceTable = null;\r\n\r\n        if (activeTab === \"Worksheet Details\") {\r\n            bomRow = (frm.doc.customer_bom_items || []).find(row => row.bom_no?.trim());\r\n            sourceTable = \"customer_bom_items\";\r\n        } else if (activeTab === \"BOM Creator\") {\r\n            bomRow = (frm.doc.bom_items || []).find(row => row.bom_no?.trim());\r\n            sourceTable = \"bom_items\";\r\n        }\r\n\r\n        if (bomRow && bomRow.bom_no && !frm.doc.show_all) {\r\n            frappe.validated = false;\r\n            await new Promise((resolve) => {\r\n                frappe.confirm(\r\n                    `Update BOM from <b>${activeTab}</b> tab?`,\r\n                    async () => {\r\n                        frm.doc.existing_bom = bomRow.bom_no;\r\n                        if (typeof updateBOM === \"function\") {\r\n                            await updateBOM(frm, sourceTable);\r\n                        }\r\n                        frm.doc.__skip_bom_prompt = true;\r\n                        resolve();\r\n                        frm.save();\r\n                    },\r\n                    () => {\r\n                        frm.doc.__skip_bom_prompt = true;\r\n                        resolve();\r\n                        frm.save();\r\n                    }\r\n                );\r\n            });\r\n            throw \"Save paused for BOM update.\";\r\n        }\r\n\r\n        if ((activeTab === \"BOM Creator\") && frm.doc.finished_goods_item ) {\r\n            frappe.validated = false;\r\n            await new Promise((resolve) => {\r\n                frappe.confirm(\r\n                    `No BOM found. Create a new BOM from <b>${activeTab}</b>?`,\r\n                    async () => {\r\n                        if (typeof createBOM === \"function\") {\r\n                            await createBOM(frm);\r\n                        }\r\n                        frm.doc.__skip_bom_prompt = true;\r\n                        resolve();\r\n                        frm.save();\r\n                    },\r\n                    () => {\r\n                        frm.doc.__skip_bom_prompt = true;\r\n                        resolve();\r\n                        frm.save();\r\n                    }\r\n                );\r\n            });\r\n            throw \"Save paused for BOM creation.\";\r\n        }\r\n    }\r\n});\r\n\r\nasync function updateBOM(frm, sourceTable) {\r\n    const sourceItems = sourceTable === \"customer_bom_items\"\r\n        ? frm.doc.customer_bom_items\r\n        : frm.doc.bom_items;\r\n\r\n    const bom_no = sourceItems.map(r => r.bom_no).find(v => !!v);\r\n    if (!bom_no) {\r\n        frappe.msgprint(\"No BOM number found in selected tab.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"BOM\",\r\n                name: bom_no\r\n            }\r\n        });\r\n\r\n        const bom_doc = response.message;\r\n\r\n        if (bom_doc.docstatus === 1) {\r\n            frappe.msgprint({\r\n                title: \"BOM is Submitted\",\r\n                message: \"This BOM is submitted. Please create a new BOM.\",\r\n                indicator: \"red\"\r\n            });\r\n\r\n            setTimeout(() => {\r\n                const updateBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Update BOM');\r\n                const createBtn = Array.from(document.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Create BOM');\r\n                if (updateBtn) updateBtn.style.display = 'none';\r\n                if (createBtn) createBtn.style.display = 'inline-block';\r\n            }, 300);\r\n            return;\r\n        }\r\n\r\n        const new_items = sourceItems.map(row => ({\r\n            item_code: row.item_code,\r\n            item_name: row.item_name,\r\n            qty: row.qty || 1,\r\n            uom: row.uom,\r\n            rate: row.rate || 0,\r\n            amount: row.amount || 0,\r\n            description: row.description,\r\n            custom_item_group: row.custom_item_group || '',\r\n            custom_selling_amount: row.custom_selling_amount || '',\r\n            custom_gemstone: row.custom_gemstone,\r\n            custom_stone_treatment: row.custom_stone_treatment,\r\n            custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n            custom_country_of_origin: row.custom_country_of_origin,\r\n            custom_grade: row.custom_grade,\r\n            custom_stone_pieces: row.custom_stone_pieces,\r\n            custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n            custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n            custom_cut: row.custom_cut,\r\n            custom_setting_type: row.custom_setting_type,\r\n            custom_metal_weight: row.custom_metal_weight,\r\n            custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n            custom_metal_group: row.custom_metal_group,\r\n            custom_selling_rate: row.custom_selling_rate,\r\n            custom_sku_weight: row.custom_sku_weight,\r\n            custom_ext_qty_required: row.custom_ext_qty_required,\r\n            custom_oh: row.custom_oh,\r\n            custom_net_balance_required: row.custom_net_balance_required,\r\n            custom_our_responsibility: row.custom_our_responsibility,\r\n            custom_bom_id: row.bom_no,\r\n            doctype: \"BOM Item\",\r\n            parent: bom_no,\r\n            parenttype: \"BOM\",\r\n            parentfield: \"items\"\r\n        }));\r\n\r\n        const stringify = obj => JSON.stringify(obj, Object.keys(obj).sort());\r\n        const oldItems = (bom_doc.items || []).map(stringify);\r\n        const freshItems = new_items.map(stringify);\r\n\r\n        const isChanged = oldItems.length !== freshItems.length ||\r\n            oldItems.some((item, index) => item !== freshItems[index]);\r\n\r\n        if (!isChanged) {\r\n            frappe.msgprint(\"No changes detected in BOM items. Skipping update.\");\r\n            return;\r\n        }\r\n\r\n        bom_doc.custom_bom_id = bom_no;\r\n        bom_doc.items = new_items;\r\n\r\n        await frappe.call({\r\n            method: \"frappe.client.save\",\r\n            args: { doc: bom_doc }\r\n        });\r\n\r\n        frappe.msgprint({\r\n            title: \"BOM Updated\",\r\n            message: `BOM <a href=\"/app/bom/${bom_doc.name}\" target=\"_blank\">${bom_doc.name}</a> has been updated.`,\r\n            indicator: 'green'\r\n        });\r\n        frm.set_value('bom_id', '');\r\n        frm.set-value('finished_goods_item', '')\r\n        frm.set-value('existing_bom', ''),\r\n        frm.set-value('item_group_', ''),\r\n        frm.set-value('keyword_search', ''),\r\n        frm.clear_table('bom_items')\r\n\r\n    } catch (error) {\r\n        console.error(\"BOM update error:\", error);\r\n        frappe.msgprint(\"Error while updating BOM.\");\r\n    }\r\n}\r\n\r\nasync function createBOM(frm) {\r\n    const activeTab = frm.__active_tab || \"\";\r\n    if (activeTab !== \"BOM Creator\") {\r\n        frappe.msgprint(\"BOM can only be created from the 'BOM Creator' tab.\");\r\n        return;\r\n    }\r\n\r\n    if (createBOM.creating_bom) return;\r\n    createBOM.creating_bom = true;\r\n\r\n    try {\r\n        if (!frm.doc.bom_items || frm.doc.bom_items.length === 0) {\r\n            frappe.msgprint(\"No items found in BOM Items table.\");\r\n            return;\r\n        }\r\n\r\n        if (!frm.doc.finished_goods_item) {\r\n            frappe.msgprint(\"Please select a Finished Goods Item.\");\r\n            return;\r\n        }\r\n\r\n        const fg_item = frm.doc.finished_goods_item;\r\n\r\n        const existing_boms = await frappe.db.get_list('BOM', {\r\n            filters: {\r\n                item: fg_item,\r\n                is_default: 1,\r\n                docstatus: 0\r\n            },\r\n            fields: ['name']\r\n        });\r\n\r\n        for (const bom of existing_boms) {\r\n            await frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"BOM\",\r\n                    name: bom.name,\r\n                    fieldname: \"is_default\",\r\n                    value: 0\r\n                }\r\n            });\r\n        }\r\n\r\n        const items = frm.doc.bom_items.map(row => ({\r\n            item_code: row.item_code,\r\n            item_name: row.item_name,\r\n            qty: row.qty || 1,\r\n            uom: row.uom || 'Nos',\r\n            rate: row.rate || 0,\r\n            amount: row.amount || 0,\r\n            description: row.description,\r\n            item_group: row.custom_item_group || '',\r\n            custom_selling_rate: row.custom_selling_rate || '',\r\n            custom_selling_amount: row.custom_selling_amount || '',\r\n            custom_gemstone: row.custom_gemstone,\r\n            custom_stone_treatment: row.custom_stone_treatment,\r\n            custom_merch_color__attribute: row.custom_merch_color__attribute,\r\n            custom_country_of_origin: row.custom_country_of_origin,\r\n            custom_grade: row.custom_grade,\r\n            custom_stone_pieces: row.custom_stone_pieces,\r\n            custom_avg_carat_weight: row.custom_avg_carat_weight,\r\n            custom_sku_carat_weight: row.custom_sku_carat_weight,\r\n            custom_cut: row.custom_cut,\r\n            custom_setting_type: row.custom_setting_type,\r\n            custom_metal_weight: row.custom_metal_weight,\r\n            custom_sku_metal_weight: row.custom_sku_metal_weight,\r\n            custom_metal_group: row.custom_metal_group,\r\n            custom_sku_weight: row.custom_sku_weight,\r\n            custom_ext_qty_required: row.custom_ext_qty_required,\r\n            custom_oh: row.custom_oh,\r\n            custom_net_balance_required: row.custom_net_balance_required,\r\n            custom_our_responsibility: row.custom_our_responsibility,\r\n            custom_bom_id: row.bom_no\r\n        }));\r\n\r\n        const bom_doc = await frappe.call({\r\n            method: \"frappe.client.insert\",\r\n            freeze: true,\r\n            freeze_message: \"Creating BOM...\",\r\n            args: {\r\n                doc: {\r\n                    doctype: \"BOM\",\r\n                    item: fg_item,\r\n                    quantity: 1,\r\n                    is_active: 1,\r\n                    is_default: 1,\r\n                    docstatus: 0,\r\n                    items: items\r\n                }\r\n            }\r\n        });\r\n\r\n        const bom_name = bom_doc.message.name;\r\n        await frappe.call({\r\n            method: \"frappe.client.set_value\",\r\n            args: {\r\n                doctype: \"BOM\",\r\n                name: bom_name,\r\n                fieldname: \"custom_bom_id\",\r\n                value: bom_name\r\n            }\r\n        });\r\n\r\n        (frm.doc.customer_worksheet_items || []).forEach(row => {\r\n            row.default_bom = row.item_code === fg_item ? bom_name : '';\r\n        });\r\n\r\n        (frm.doc.bom_items || []).forEach(row => {\r\n            row.bom_no = bom_name;\r\n        });\r\n\r\n        (frm.doc.customer_bom_items || []).forEach(row => {\r\n            row.bom_no = bom_name;\r\n        });\r\n\r\n        frm.refresh_field(\"bom_items\");\r\n        frm.refresh_field(\"customer_worksheet_items\");\r\n        frm.refresh_field(\"customer_bom_items\");\r\n        \r\n        await frm.save();\r\n        await frm.reload_doc();\r\n\r\n\r\n        frm.fields_dict.bom_status?.$wrapper?.html(\r\n            `<div style=\"color:green;\"><strong>BOM Created:</strong> <a href=\"/app/bom/${bom_name}\" target=\"_blank\">${bom_name}</a></div>`\r\n        );\r\n\r\n        frappe.msgprint({\r\n            title: \"BOM Created\",\r\n            message: `New BOM created: <a href=\"/app/bom/${bom_name}\" target=\"_blank\">${bom_name}</a>`,\r\n            indicator: 'green'\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(\"Failed to create BOM:\", err.message || err);\r\n        frappe.msgprint(\"Error while creating BOM.\");\r\n    } finally {\r\n        createBOM.creating_bom = false;\r\n    }\r\n}\r\n\r\nfunction get_uom_for_group(group) {\r\n    if ([\"Stone\", \"Pearl\", \"Bead\"].includes(group)) return 'Carat';\r\n    if (group === \"Metal\") return 'Gram';\r\n    return 'Piece';\r\n}\r\n\r\nfrappe.ui.form.on('Customer Worksheet', {\r\n    onload_post_render: function(frm) {\r\n        update_customer_bom_item_uoms(frm);\r\n    },\r\n    //  item_code: function(frm) {\r\n    //     update_customer_bom_item_uoms(frm);\r\n    // }\r\n});\r\n\r\nfunction update_customer_bom_item_uoms(frm) {\r\n    (frm.doc.customer_bom_items || []).forEach(row => {\r\n        const correct_uom = get_uom_for_group(row.custom_item_group);\r\n        if (row.uom !== correct_uom) {\r\n            row.uom = correct_uom;\r\n        }\r\n    });\r\n    frm.refresh_field('customer_bom_items');\r\n}\r\n\r\nfrappe.ui.form.on('Customer Worksheet BOM Items', {\r\n    custom_item_group: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        const correct_uom = get_uom_for_group(row.custom_item_group);\r\n        frappe.model.set_value(cdt, cdn, 'uom', correct_uom);\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Customer Worksheet BOM Creator Items', {\r\n    fetch_gemstone: function (frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n\r\n        if (!row.item_code) {\r\n            frappe.msgprint(\"Please select an Item Code first.\");\r\n            return;\r\n        }\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Item\",\r\n                name: row.item_code\r\n            },\r\n            callback: function (r) {\r\n                if (r.message && r.message.custom_gemstone) {\r\n                    frappe.model.set_value(cdt, cdn, \"custom_gemstone\", r.message.custom_gemstone);\r\n                } else {\r\n                    frappe.msgprint(\"No gemstone found for this item.\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.592003",
  "module": "espresso",
  "name": "Customer Worksheet buttons",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    refresh(frm) {\r\n        applyCustomStylesAndButtonLogic(frm);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Customer Worksheet Item', {\r\n    item_group: function (frm) {\r\n        applyCustomStylesAndButtonLogic(frm);\r\n    },\r\n    customer_worksheet_items_add: function (frm) {\r\n        applyCustomStylesAndButtonLogic(frm);\r\n    },\r\n    customer_worksheet_items_remove: function (frm) {\r\n        applyCustomStylesAndButtonLogic(frm);\r\n    }\r\n});\r\n\r\nfunction applyCustomStylesAndButtonLogic(frm) {\r\n    if (!$('style#custom-black-buttons').length) {\r\n        $('head').append(`\r\n            <style id=\"custom-black-buttons\">\r\n                .black-btn {\r\n                    background-color: #000 !important;\r\n                    color: #fff !important;\r\n                    border: none !important;\r\n                    border-radius: 6px;\r\n                    padding: 6px 10px !important;\r\n                    font-weight: 600;\r\n                    box-shadow: none;\r\n                    transition: background-color 0.2s ease;\r\n                }\r\n                .black-btn:hover {\r\n                    background-color: #222 !important;\r\n                }\r\n            </style>\r\n        `);\r\n    }\r\n\r\n    const styledButtons = [\r\n        \"Create BOM\",\r\n        \"Search BOM\",\r\n        \"Fetch Item without BOM\",\r\n        \"Search\",\r\n        \"Create and Insert\",\r\n        \"Clear\",\r\n        \"Clear Search\",\r\n        \"Update BOM Changes\",\r\n        \"Update BOM\",\r\n        \"Duplicate BOM\"\r\n    ];\r\n\r\nfunction styleAndToggleButton(retry = 0) {\r\n    const itemGroups = (frm.doc.customer_worksheet_items || []).map(row =>\r\n        row.item_group?.toLowerCase?.().trim()\r\n    );\r\n    const hasRelevantGroup = itemGroups.includes(\"bracelet\") || itemGroups.includes(\"bangle\");\r\n\r\n    const $dupBtn = $('button').filter(function () {\r\n        return $(this).text().trim().toLowerCase() === 'duplicate bom';\r\n    });\r\n\r\n    if ($dupBtn.length) {\r\n        $dupBtn.addClass('black-btn');\r\n        $dupBtn.toggle(hasRelevantGroup);\r\n\r\n        $dupBtn.off('click').on('click', () => {\r\n            const matchingItems = (frm.doc.customer_worksheet_items || []).filter(row => {\r\n                const group = row.item_group?.toLowerCase?.().trim();\r\n                return group === \"bracelet\" || group === \"bangle\";\r\n            });\r\n\r\n            if (matchingItems.length === 0) {\r\n                frappe.msgprint(\"No Bracelet or Bangle items found.\");\r\n                return;\r\n            }\r\n\r\n            const htmlOptions = matchingItems.map(row => `\r\n                <div style=\"margin-bottom: 10px;\">\r\n                    <label style=\"display: flex; align-items: start; gap: 8px;\">\r\n                        <input type=\"radio\" name=\"item_select\" value=\"${row.name}\" style=\"margin-top: 4px;\">\r\n                        <span style=\"flex: 1; word-break: break-word;\">\r\n                            ${row.item_code || \"\"} : ${row.item_name || \"\"} (${row.item_group || \"\"})\r\n                        </span>\r\n                    </label>\r\n                </div>\r\n            `).join('');\r\n\r\n            const dialog = new frappe.ui.Dialog({\r\n                title: \"Select One to Duplicate\",\r\n                size: \"small\",\r\n                fields: [\r\n                    {\r\n                        fieldtype: 'HTML',\r\n                        fieldname: 'radio_html',\r\n                        options: `<div style=\"max-height: 300px; overflow-y: auto;\">${htmlOptions}</div>`\r\n                    }\r\n                ],\r\n                primary_action_label: \"Insert\",\r\n                primary_action: async () => {\r\n                    const selectedRowName = dialog.$wrapper.find('input[name=\"item_select\"]:checked').val();\r\n                    if (!selectedRowName) {\r\n                        frappe.msgprint(\"Please select one item.\");\r\n                        return;\r\n                    }\r\n\r\n                    const row = frm.doc.customer_worksheet_items.find(r => r.name === selectedRowName);\r\n                    if (!row || !row.default_bom) {\r\n                        frappe.msgprint(\"No default BOM found in selected item.\");\r\n                        return;\r\n                    }\r\n\r\n                    const confirmDialog = new frappe.ui.Dialog({\r\n                        title: 'Confirm BOM Duplication',\r\n                        fields: [\r\n                            {\r\n                                fieldtype: 'Section Break',\r\n                                label: 'Existing Item Details'\r\n                            },\r\n                            {\r\n                                fieldtype: 'HTML',\r\n                                fieldname: 'existing_info',\r\n                                options: `\r\n                                    <div style=\"margin-bottom: 10px;\">\r\n                                        <div><b>Item Name:</b> ${row.item_name || ''}</div>\r\n                                        <div><b>Vendor Product ID:</b> ${row.custom_vendor_product_id || ''}</div>\r\n                                    </div>\r\n                                `\r\n                            },\r\n                            {\r\n                                fieldtype: 'Section Break',\r\n                                label: 'New Item Details'\r\n                            },\r\n                            {\r\n                                fieldtype: 'Data',\r\n                                label: 'New Item Name',\r\n                                fieldname: 'new_item',\r\n                                reqd: 1\r\n                            },\r\n                            {\r\n                                fieldtype: 'Data',\r\n                                label: 'Vendor Product ID',\r\n                                fieldname: 'new_vendor_product_id',\r\n                                reqd: 1\r\n                            }\r\n                        ],\r\n                        primary_action_label: 'Duplicate',\r\n                        primary_action: async (values) => {\r\n                        const new_item_name = values.new_item;\r\n                        const new_vendor_id = values.new_vendor_product_id;\r\n                        const default_bom = row.default_bom;\r\n                    \r\n                        try {\r\n                            frappe.dom.freeze(\"Creating new item...\");\r\n                    \r\n                            // 1. Get full item details of the selected row\r\n                            const existing_item = await frappe.call({\r\n                                method: \"frappe.client.get\",\r\n                                args: {\r\n                                    doctype: \"Item\",\r\n                                    name: row.item_code\r\n                                }\r\n                            });\r\n                    \r\n                            const item_data = existing_item.message || {};\r\n                    \r\n                            let prefix = (item_data.item_group || \"ITEM\").substring(0, 3).toUpperCase();\r\n                            \r\n                            const existing_items = await frappe.call({\r\n                                method: \"frappe.client.get_list\",\r\n                                args: {\r\n                                    doctype: \"Item\",\r\n                                    filters: [[\"item_code\", \"like\", `${prefix}-%`]],\r\n                                    fields: [\"item_code\"],\r\n                                    limit_page_length: 1000\r\n                                }\r\n                            });\r\n                            \r\n                            let max_number = 0;\r\n                            \r\n                            (existing_items.message || []).forEach(d => {\r\n                                const match = d.item_code.match(new RegExp(`^${prefix}-(\\\\d+)$`));\r\n                                if (match) {\r\n                                    const num = parseInt(match[1]);\r\n                                    if (num > max_number) max_number = num;\r\n                                }\r\n                            });\r\n                            \r\n                            let new_number = (max_number + 1).toString().padStart(4, '0');\r\n                            let new_item_code = `${prefix}-${new_number}`;\r\n\r\n                    \r\n                            const new_item = await frappe.call({\r\n                                method: \"frappe.client.insert\",\r\n                                args: {\r\n                                    doc: {\r\n                                        doctype: \"Item\",\r\n                                        item_code: new_item_code,\r\n                                        item_name: new_item_name,\r\n                                        item_group: item_data.item_group,\r\n                                        custom_vendor_product_id: new_vendor_id,\r\n                                        description: item_data.description,\r\n                                        stock_uom: item_data.stock_uom,\r\n                                        custom_customer_sku :item_data.custom_customer_sku,\r\n                                        custom_metal_group: item_data.custom_metal_group,\r\n                                        custom_material_id: item_data.custom_material_id,\r\n                                        is_stock_item : item_data.is_stock_item,\r\n                                        gst_hsn_code: item_data.gst_hsn_code,\r\n                                        sales_uom:item_data.sales_uom,\r\n                                        image:item_data.image,\r\n                                        purchase_uom:item_data.purchase_uom\r\n                                    }\r\n                                }\r\n                            });\r\n                            let new_row = frm.add_child(\"customer_worksheet_items\");\r\n\r\n                            new_row.item_code = new_item_code;\r\n                            new_row.item_name = new_item_name;\r\n                            new_row.item_group = item_data.item_group;\r\n                            new_row.custom_vendor_product_id = new_vendor_id;\r\n                            \r\n                            // Optional: If you want to auto-assign default BOM or any other values\r\n                            new_row.default_bom = default_bom;\r\n                            \r\n                            frm.refresh_field(\"customer_worksheet_items\");\r\n                    \r\n                            frappe.dom.unfreeze();\r\n                            frappe.msgprint(`New item <a href=\"/app/item/${new_item_code}\" target=\"_blank\"><b>${new_item_code}</b></a> has been created.`);\r\n                    \r\n                            // 4. Now load BOM and insert items\r\n                            frappe.dom.freeze(\"Loading BOM items...\");\r\n                    \r\n                            const bom = await frappe.call({\r\n                                method: \"frappe.client.get\",\r\n                                args: {\r\n                                    doctype: \"BOM\",\r\n                                    name: default_bom\r\n                                }\r\n                            });\r\n                    \r\n                            frm.clear_table('bom_items');\r\n                    \r\n                            (bom.message.items || []).forEach(item => {\r\n                                let child = frm.add_child('bom_items');\r\n                    \r\n                                child.item_code = item.item_code;\r\n                                child.item_name = item.item_name;\r\n                                child.custom_item_group = item.custom_item_group;\r\n                                child.qty = item.qty;\r\n                                child.uom = item.uom;\r\n                                child.rate = item.rate || 0.0;\r\n                                child.amount = item.amount || 0;\r\n                                child.custom_selling_rate = item.custom_selling_rate || '';\r\n                                child.custom_selling_amount = item.custom_selling_amount || '';\r\n                                child.custom_gemstone = item.custom_gemstone;\r\n                                child.description = item.description;\r\n                                child.custom_stone_treatment = item.custom_stone_treatment;\r\n                                child.custom_merch_color__attribute = item.custom_merch_color__attribute;\r\n                                child.custom_country_of_origin = item.custom_country_of_origin;\r\n                                child.custom_grade = item.custom_grade;\r\n                                child.custom_stone_pieces = item.custom_stone_pieces;\r\n                                child.custom_avg_carat_weight = item.custom_avg_carat_weight;\r\n                                child.custom_sku_carat_weight = item.custom_sku_carat_weight;\r\n                                child.custom_cut = item.custom_cut;\r\n                                child.custom_setting_type = item.custom_setting_type;\r\n                                child.custom_metal_weight = item.custom_metal_weight;\r\n                                child.custom_sku_metal_weight = item.custom_sku_metal_weight;\r\n                                child.custom_metal_group = item.custom_metal_group;\r\n                                child.custom_sku_weight = item.custom_sku_weight;\r\n                                child.custom_ext_qty_required = item.custom_ext_qty_required;\r\n                                child.custom_oh = item.custom_oh;\r\n                                child.custom_net_balance_required = item.custom_net_balance_required;\r\n                                child.custom_our_responsibility = item.custom_our_responsibility;\r\n                            });\r\n                    \r\n                            frm.refresh_field('bom_items');\r\n                            confirmDialog.hide();\r\n                            dialog.hide();\r\n                            frm.set_value('finished_goods_item', new_item_code);\r\n                    \r\n                            frappe.dom.unfreeze();\r\n                            frappe.msgprint(`Previous Item BOM <b>${default_bom}</b> has been fetched..`);\r\n                    \r\n                        } catch (err) {\r\n                            frappe.dom.unfreeze();\r\n                            console.error(\"Error:\", err);\r\n                            frappe.msgprint(\"Error during item creation or BOM duplication.\");\r\n                        }\r\n                    }\r\n\r\n                    });\r\n                    confirmDialog.show();\r\n                }\r\n            });\r\n\r\n            dialog.show();\r\n            \r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Item\",\r\n                    name: row.item_code\r\n                },\r\n                callback: function (res) {\r\n                    const item = res.message || {};\r\n            \r\n                    const html = `\r\n                        <div style=\"margin-bottom: 10px;\">\r\n                            <div><b>Item Name:</b> ${item.item_name || row.item_name || ''}</div>\r\n                            <div><b>Vendor Product ID:</b> ${item.custom_vendor_product_id || 'Not Available'}</div>\r\n                        </div>\r\n                    `;\r\n            \r\n                    // Inject into dialog\r\n                    dialog.fields_dict.existing_info.$wrapper.html(html);\r\n                }\r\n            });\r\n\r\n        });\r\n    } else if (retry < 3) {\r\n        setTimeout(() => styleAndToggleButton(retry + 1), 500);\r\n    }\r\n}\r\n\r\n\r\n    setTimeout(() => {\r\n        $('button').each(function () {\r\n            const text = $(this).text().trim();\r\n            if (styledButtons.includes(text) && text.toLowerCase() !== \"duplicate bom\") {\r\n                $(this).addClass('black-btn');\r\n            }\r\n        });\r\n\r\n        styleAndToggleButton();\r\n    }, 300);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer PO Manager",
  "enabled": 1,
  "modified": "2025-06-25 11:49:37.032266",
  "module": "espresso",
  "name": "Customer PO Manager Details",
  "script": "frappe.ui.form.on('Customer PO Manager', {\r\n    qty: function(frm, cdt, cdn) {\r\n        update_amount(frm, cdt, cdn); \r\n        update_totals(frm);\r\n        update_value_comparison(frm);\r\n    },\r\n    amount: function(frm, cdt, cdn) {\r\n        update_totals(frm);\r\n        update_value_comparison(frm);\r\n    },\r\n    total_po_items: function(frm) {\r\n        update_value_comparison(frm);\r\n    },\r\n    total_po_amount: function(frm) {\r\n        update_value_comparison(frm);\r\n    },\r\n    refresh: function (frm) {\r\n        frm.add_custom_button('Customer Worksheet', function () {\r\n            frappe.set_route('List', 'Customer Worksheet');\r\n        }, __('View'));\r\n        update_value_comparison(frm);\r\n        frm.add_custom_button('Clear', () => {\r\n            const reset_fields = {\r\n                customer: '',\r\n                customer_po_id: '',\r\n                contact_person: '',\r\n                department: '',\r\n                customer_po_date: '',\r\n                delivery_date: '',\r\n                po_attachment: '',\r\n                total_po_items: 0,\r\n                total_po_amount: 0\r\n            };\r\n            frm.set_value(reset_fields);\r\n            frm.clear_table('items_details');\r\n            frm.refresh_fields();\r\n    \r\n        });\r\n\r\n        const styleBtn = {\r\n            'background-color': 'black',\r\n            'color': 'white',\r\n            'border': '1px solid black',\r\n            'padding': '6px 8px'\r\n        };\r\n\r\n        setTimeout(() => {\r\n            $(\".btn-custom:contains('Clear')\").css(styleBtn);\r\n            ['po_attachment', 'add_items', 'update_documents'].forEach(btn => {\r\n                const buttonWrapper = frm.fields_dict[btn]?.$wrapper;\r\n                if (buttonWrapper) {\r\n                    buttonWrapper.find('button').css(styleBtn);\r\n                }\r\n            });\r\n        }, 100);\r\n    },\r\n update_documents: function (frm) {\r\n    if (!frm.doc.items_details || frm.doc.items_details.length === 0) {\r\n        frappe.msgprint(\"No items to update.\");\r\n        return;\r\n    }\r\n\r\n    let updated_orders = new Set();\r\n    let updates_done = 0;\r\n    let file_uploads_done = 0;\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Sales Order\",\r\n            fields: [\"name\"],\r\n            limit_page_length: 100000\r\n        },\r\n        callback: function (res) {\r\n            const valid_sales_orders = new Set(res.message.map(so => so.name));\r\n            let delivery_updates = [];\r\n\r\n            frm.doc.items_details.forEach(row => {\r\n                const so = row.sales_order;\r\n                // Set delivery date only once per sales order\r\n                let unique_sales_orders = new Set();\r\n                \r\n                frm.doc.items_details.forEach(row => {\r\n                    if (row.sales_order) {\r\n                        unique_sales_orders.add(row.sales_order);\r\n                    }\r\n                });\r\n                \r\n                unique_sales_orders.forEach(so => {\r\n                    set_delivery_date(so, frm.doc.delivery_date);\r\n                });\r\n\r\n                if (so && row.item_code && valid_sales_orders.has(so)) {\r\n                    delivery_updates.push({\r\n                        sales_order: so,\r\n                        item_code: row.item_code\r\n                    });\r\n\r\n                    if (!updated_orders.has(so)) {\r\n                        updated_orders.add(so);\r\n\r\n                        frappe.call({\r\n                            method: \"frappe.client.set_value\",\r\n                            args: {\r\n                                doctype: \"Sales Order\",\r\n                                name: so,\r\n                                fieldname: {\r\n                                    contact_person: frm.doc.contact_person,\r\n                                    custom_department: frm.doc.department,\r\n                                    // po_no: frm.doc.customer_po_id\r\n                                }\r\n                            },\r\n                            callback: function () {\r\n                                updates_done++;\r\n\r\n                                frm.doc.items_details.forEach(r => {\r\n                                    if (r.sales_order === so) {\r\n                                        r.status = \"Updated\";\r\n                                    }\r\n                                });\r\n                                frm.refresh_field(\"items_details\");\r\n\r\n                                if (frm.doc.po_attachment) {\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.insert\",\r\n                                        args: {\r\n                                            doc: {\r\n                                                doctype: \"File\",\r\n                                                file_url: frm.doc.po_attachment,\r\n                                                attached_to_doctype: \"Sales Order\",\r\n                                                attached_to_name: so,\r\n                                                folder: \"Home/Attachments\",\r\n                                                is_private: 1\r\n                                            }\r\n                                        },\r\n                                        callback: function () {\r\n                                            file_uploads_done++;\r\n                                            if (file_uploads_done === updated_orders.size) {\r\n                                                frappe.msgprint('Details Updated');\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    if (updates_done === updated_orders.size) {\r\n                                        frappe.msgprint('Details Updated');\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            update_item_data_and_dependencies(frm);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n,\r\n\r\n add_items: function (frm) {\r\n    frappe.call({\r\n        method: \"get_items_with_draft_sales_order\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            filters: { custom_vendor_product_id: [\"!=\", \"\"] },\r\n            fields: [\"name\", \"item_name\", \"custom_vendor_product_id\", \"item_group\", \"custom_customer_sku\", \"description\"],\r\n            limit_page_length: 100000\r\n        },\r\n        callback: function (r) {\r\n            if (!r.message || r.message.length === 0) {\r\n                frappe.msgprint(\"No Vendor IDs found.\");\r\n                return;\r\n            }\r\n\r\n            const all_items = r.message;\r\n            const seen_ids = new Set();\r\n            const unique_items = all_items.filter(item => {\r\n                if (seen_ids.has(item.custom_vendor_product_id)) return false;\r\n                seen_ids.add(item.custom_vendor_product_id);\r\n                return true;\r\n            });\r\n\r\n            const highlightMatch = (text, query) => {\r\n                if (!query) return text;\r\n                const escaped = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n                const regex = new RegExp(`(${escaped})`, 'gi');\r\n                return text.replace(regex, '<span style=\"background-color: yellow;\">$1</span>');\r\n            };\r\n\r\n            const generate_table_rows = (items, query = \"\") =>\r\n                items.map(item => `\r\n                    <tr class=\"vendor-row\">\r\n                        <td style=\"text-align:center;\"><input type=\"checkbox\" class=\"vendor-checkbox\" data-id=\"${item.custom_vendor_product_id}\" /></td>\r\n                        <td><b>${highlightMatch(item.custom_vendor_product_id, query)}</b></td>\r\n                        <td>${highlightMatch(item.item_name, query)}</td>\r\n                    </tr>\r\n                `).join(\"\");\r\n\r\n            const html = `\r\n                <div style=\"margin-bottom: 12px;\">\r\n                    <input type=\"text\" id=\"vendor-search\" placeholder=\"Search Here\"\r\n                        style=\"flex: 1; padding: 6px 10px; margin-right: 12px; border: 1px solid #ccc; border-radius: 4px;\">\r\n                    <button class=\"btn btn-secondary btn-md\" id=\"vendor-clear-btn\">Clear</button>\r\n                </div>\r\n                <div style=\"display: flex; justify-content: flex-end; gap: 20px; margin-bottom: 12px;\">\r\n                  \r\n                    <span><b>Inserted:</b> <span id=\"inserted-count\" style=\"color: green;\">0</span></span>\r\n                </div>\r\n                <div style=\"max-height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 6px;\">\r\n                    <table style=\"width: 100%;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #f9fafb;\">\r\n                                <th style=\"width: 60px;\">Select</th>\r\n                                <th style=\"width:200px;\">Vendor Product ID</th>\r\n                                <th>Item Name</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody id=\"vendor-table-body\"></tbody>\r\n                    </table>\r\n                </div>\r\n            `;\r\n\r\n            const d = new frappe.ui.Dialog({\r\n                title: 'Select Vendor Product IDs to Add',\r\n                fields: [{ fieldtype: 'HTML', fieldname: 'vendor_table', options: html }],\r\n                size: 'large',\r\n                primary_action_label: 'Insert',\r\n                primary_action() {\r\n                    const selected_ids = Array.from(d.$wrapper.find('.vendor-checkbox:checked')).map(cb => $(cb).data('id'));\r\n                    if (selected_ids.length === 0) {\r\n                        frappe.msgprint(\"Please select at least one Vendor ID.\");\r\n                        return;\r\n                    }\r\n\r\n                    let inserted_count = 0;\r\n                    all_items.filter(item => selected_ids.includes(item.custom_vendor_product_id)).forEach(item => {\r\n                        const row = frm.add_child('items_details', {\r\n                            item_code: item.name.trim(),\r\n                            item_name: item.item_name,\r\n                            vendor_product_id: item.custom_vendor_product_id,\r\n                            item_group: item.item_group,\r\n                            status: \"Fetched\",\r\n                            customer_sku: item.custom_customer_sku || \"\",\r\n                            description: item.description || \"\"\r\n                        });\r\n                        inserted_count++;\r\n                        fetch_item_info(frm, row.doctype, row.name);\r\n                    });\r\n\r\n                    frm.refresh_field('items_details');\r\n                    d.$wrapper.find('#inserted-count').text(inserted_count);\r\n                    d.$wrapper.find('#vendor-search').val(\"\");\r\n                    d.$wrapper.find('#vendor-table-body').empty();\r\n                    // d.$wrapper.find('#selected-count').text(\"0\");\r\n                    // d.$wrapper.find('#total-count').html(`<b>Total IDs:</b> 0`);\r\n                }\r\n            });\r\n\r\n            d.show();\r\n\r\n            const wrapper = d.$wrapper;\r\n            const searchInput = wrapper.find('#vendor-search');\r\n            const tableBody = wrapper.find('#vendor-table-body');\r\n\r\n            wrapper.on('change', '.vendor-checkbox', function () {\r\n                wrapper.find('#selected-count').text(wrapper.find('.vendor-checkbox:checked').length);\r\n            });\r\n\r\n            wrapper.on('click', '#vendor-clear-btn', function () {\r\n                searchInput.val(\"\");\r\n                tableBody.empty();\r\n                wrapper.find('#selected-count').text(\"0\");\r\n                wrapper.find('#total-count').html(`<b>Total IDs:</b> 0`);\r\n                wrapper.find('#inserted-count').text(\"0\");\r\n            });\r\n\r\n            searchInput.on('keyup', function () {\r\n                const query = searchInput.val().trim().toLowerCase();\r\n                const filtered = unique_items.filter(item => {\r\n                    const combined = `${item.custom_vendor_product_id} ${item.item_name}`.toLowerCase();\r\n                    return combined.includes(query);\r\n                });\r\n\r\n                if (filtered.length === 0) {\r\n                tableBody.html(`\r\n                    <tr>\r\n                        <td colspan=\"3\" style=\"text-align: center; color: red; padding: 12px;\">\r\n                            No Sales Order is created for this item.\r\n                        </td>\r\n                    </tr>\r\n                `);\r\n            } else {\r\n                tableBody.html(generate_table_rows(filtered, query));\r\n            }\r\n\r\n                wrapper.find('#selected-count').text(\"0\");\r\n                // wrapper.find('#total-count').html(`<b>Total IDs:</b> ${filtered.length}`);\r\n                // wrapper.find('#inserted-count').text(\"0\");\r\n            });\r\n        }\r\n    });\r\n}\r\n});\r\n\r\n\r\n\r\nfunction update_value_comparison(frm) {\r\n    let child_qty_total = 0;\r\n    let child_amount_total = 0;\r\n\r\n    frm.doc.items_details.forEach(row => {\r\n        child_qty_total += flt(row.qty);\r\n        child_amount_total += flt(row.amount);\r\n    });\r\n\r\n    const po_qty_total = flt(frm.doc.total_po_items || 0);\r\n    const po_amount_total = flt(frm.doc.total_po_amount || 0);\r\n\r\n    const qty_match = (child_qty_total === po_qty_total);\r\n    const amount_match = (child_amount_total === po_amount_total);\r\n\r\n    if (\r\n        child_qty_total === 0 || \r\n        child_amount_total === 0 || \r\n        (qty_match && amount_match)\r\n    ) {\r\n        frm.set_df_property(\"value_comparision\", \"hidden\", 1);\r\n        return;\r\n    }\r\n\r\n    frm.set_df_property(\"value_comparision\", \"hidden\", 0);\r\n\r\n    const qty_diff = child_qty_total - po_qty_total;\r\n    const amount_diff = child_amount_total - po_amount_total;\r\n\r\n    const qty_diff_color = qty_diff !== 0 ? 'red' : 'inherit';\r\n    const amount_diff_color = amount_diff !== 0 ? 'red' : 'inherit';\r\n\r\n    const html = `\r\n        <div style=\"font-size: 14px; line-height: 1.6;\">\r\n            <div stylemargin-top: 4px;\">\r\n            <h4 style=\"margin-bottom: 1px;color:#525252;\"><b>Comparison </b><br></h4>\r\n                <b>Purchase Order</b>: ${po_qty_total} units (${format_currency(po_amount_total)})<br>\r\n                <b>Sales Orders</b>: ${child_qty_total} units (${format_currency(child_amount_total)})<br>\r\n                <b>Variance</b>: \r\n                    <span style=\"color: ${qty_diff_color};\">${qty_diff >= 0 ? '+' : ''}${qty_diff} units</span> \r\n                    (<span style=\"color: ${amount_diff_color};\">${amount_diff >= 0 ? '+' : ''}${format_currency(amount_diff)}</span>)\r\n            </div>\r\n        </div>\r\n    `;\r\n\r\n    frm.set_df_property(\"value_comparision\", \"options\", html);\r\n}\r\n\r\n\r\nfunction update_totals(frm) {\r\n    let total_qty = 0;\r\n    let total_amt = 0;\r\n\r\n    frm.doc.items_details.forEach(row => {\r\n        total_qty += flt(row.qty);\r\n        total_amt += flt(row.amount);\r\n    });\r\n\r\n    frm.set_value(\"total_po_items\", total_qty);\r\n    frm.set_value(\"total_po_amount\", total_amt);\r\n\r\n    update_value_comparison(frm); \r\n}\r\n\r\nfunction set_delivery_date(order_id, delivery_date){\r\n    console.log(order_id)\r\n    frappe.call({\r\n        method: \"set_delivery_date_in_so\",  \r\n        args: {\r\n            sales_order: order_id,\r\n            delivery_date: delivery_date\r\n        },\r\n        callback: (res) => {\r\n            console.log(res);\r\n            if (!res.exc) {\r\n                // frappe.msgprint(\"Success\");\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction update_item_data_and_dependencies(frm) {\r\n    frm.doc.items_details.forEach(row => {\r\n        if (!row.item_code) return;\r\n\r\n        // Update Item Master\r\n        frappe.call({\r\n            method: \"frappe.client.set_value\",\r\n            args: {\r\n                doctype: \"Item\",\r\n                name: row.item_code,\r\n                fieldname: {\r\n                    ...(row.customer_sku ? { custom_customer_sku: row.customer_sku } : {}),\r\n                    ...(row.item_name ? { item_name: row.item_name } : {}),\r\n                    ...(row.description ? { description: row.description } : {})\r\n                }\r\n            },\r\n            callback: function () {\r\n                console.log(`Item ${row.item_code} updated.`);\r\n\r\n                // Update BOM\r\n                if (row.bom) {\r\n                frappe.call({\r\n                    method: \"frappe.client.get\",\r\n                    args: {\r\n                        doctype: \"Item\",\r\n                        name: row.item_code\r\n                    },\r\n                    callback: function(itemRes) {\r\n                        const updated_item_name = itemRes.message.item_name;\r\n                        const updated_description = itemRes.message.description;\r\n                \r\n                        bom.items.forEach(i => {\r\n                            if (i.item_code === row.item_code) {\r\n                                i.item_name = updated_item_name;\r\n                                i.description = updated_description;\r\n                            }\r\n                        });\r\n                \r\n                        frappe.call({\r\n                            method: \"frappe.client.save\",\r\n                            args: { doc: bom },\r\n                            callback: function () {\r\n                                console.log(`BOM ${row.bom} synced with Item master values.`);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                }\r\n\r\n                // Update Purchase Order\r\n                if (row.purchase_order) {\r\n                    frappe.call({\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Purchase Order\",\r\n                            name: row.purchase_order\r\n                        },\r\n                        callback: function(poRes) {\r\n                            const po = poRes.message;\r\n                            let updated = false;\r\n                \r\n                            po.items.forEach(po_item => {\r\n                                if (po_item.item_code === row.item_code) {\r\n                                    po_item.description = row.description;\r\n                                    updated = true;\r\n                                }\r\n                            });\r\n                \r\n                            if (updated) {\r\n                                frappe.call({\r\n                                    method: \"frappe.client.save\",\r\n                                    args: { doc: po },\r\n                                    callback: function () {\r\n                                        console.log(`PO ${row.purchase_order} description updated.`);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// ========== Fetch Additional Item Info ==========\r\nfunction fetch_item_info(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    if (!row.item_code) return;\r\n\r\n    frappe.call({\r\n        method: \"get_item_related_info\",\r\n        args: { item_code: row.item_code },\r\n        callback: function (r) {\r\n            if (r.message) {\r\n                const info = r.message;\r\n                frappe.model.set_value(cdt, cdn, {\r\n                    sales_order: info.sales_order,\r\n                    delivery_date: info.delivery_date,\r\n                    sales_order_status: info.sales_order_status,\r\n                    purchase_order: info.purchase_order,\r\n                    purchase_order_status: info.purchase_order_status,\r\n                    bom: info.bom,\r\n                    bom_status: info.bom_status,\r\n                    qty: info.qty,\r\n                    rate: info.rate,\r\n                    amount: info.amount\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    frm.set_df_property(\"value_comparision\", \"hidden\", 0);\r\n                    update_value_comparison(frm);\r\n                }, 300); // thoda wait so that set_value reflects in DOM\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n// ========== Amount Calculation ==========\r\nfrappe.ui.form.on('Customer PO Manager Items', {\r\n    qty: update_amount,\r\n    rate: update_amount,\r\n    amount: function (frm, cdt, cdn) {\r\n        update_value_comparison(frm);\r\n    }\r\n});\r\n\r\nfunction update_amount(frm, cdt, cdn) {\r\n    const d = locals[cdt][cdn];\r\n    const amount = flt(d.qty) * flt(d.rate);\r\n\r\n    frappe.model.set_value(cdt, cdn, \"amount\", amount).then(() => {\r\n        // amount set hone ke baad value_comparision update karo\r\n        update_value_comparison(frm);\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.754978",
  "module": "espresso",
  "name": "Bom Stone Treatment",
  "script": "frappe.ui.form.on('BOM', {\r\n    refresh: function(frm) {\r\n        if (!frm.__treatment_handler_bound) {\r\n            bindPopupToTreatmentField(frm);\r\n            frm.__treatment_handler_bound = true;\r\n        }\r\n    },\r\n    before_submit: function(frm) {\r\n        if (!frm.script_checked_submit) {\r\n            let d = new frappe.ui.Dialog({\r\n                title: 'Confirm Submission',\r\n                fields: [\r\n                    {\r\n                        fieldtype: 'HTML',\r\n                        options: `<div style=\"margin-top: 10px; font-size: 14px;\">\r\n                            Check all the field values before submitting.<br>\r\n                           You will not be able to edit this BOM after Submit.\r\n                        </div>`\r\n                    }\r\n                ],\r\n                primary_action_label: 'Proceed to Submit',\r\n                secondary_action_label: 'Edit BOM',\r\n                primary_action() {\r\n                    frm.script_checked_submit = true;\r\n                    d.hide();\r\n                    frm.save('Submit');  // retry submission\r\n                },\r\n                secondary_action() {\r\n                    // frappe.msgprint(\"Submission cancelled. You can review and edit the BOM.\");\r\n                    d.hide();\r\n                }\r\n            });\r\n\r\n            d.show();\r\n\r\n            // Prevent form submission for now\r\n            frappe.validated = false;\r\n        }\r\n    }\r\n});\r\n\r\nfunction bindPopupToTreatmentField(frm) {\r\n    const $table = frm.fields_dict.items.grid.wrapper;\r\n\r\n    $table.on('click', \"[data-fieldname='custom_stone_treatment_list']\", function (e) {\r\n        e.stopPropagation();\r\n\r\n        const grid_row = $(this).closest('.grid-row');\r\n        const row_name = grid_row.attr('data-name');\r\n        const row = frm.fields_dict.items.grid.grid_rows_by_docname[row_name].doc;\r\n\r\n        if ($(this).data('popup-opened')) return;\r\n        $(this).data('popup-opened', true);\r\n\r\n        new frappe.ui.form.MultiSelectDialog({\r\n            doctype: 'Stone Treatment',\r\n            target: frm,\r\n            setters: {},\r\n            add_filters_group: 0,\r\n            allow_multiple: true,\r\n            action: function(selected_values) {\r\n                // Set selected values as comma-separated in the field\r\n                const treatment_list = selected_values.join(', ');\r\n                frappe.model.set_value(row.doctype, row.name, 'custom_stone_treatment_list', treatment_list);\r\n                $(e.currentTarget).data('popup-opened', false); // reset flag\r\n                this.dialog.hide();\r\n            },\r\n            primary_action_label: 'Select',\r\n            get_query: () => {\r\n                return {\r\n                    filters: {}\r\n                };\r\n            },\r\n            action_on_cancel: function () {\r\n                $(e.currentTarget).data('popup-opened', false); // reset on cancel\r\n            }\r\n        });\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Header",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.808358",
  "module": "espresso",
  "name": "PO Header",
  "script": "frappe.ui.form.on('PO Header', {\r\n    qty: function(frm, cdt, cdn) {\r\n        update_amount(frm, cdt, cdn); \r\n        update_totals(frm);\r\n        update_value_comparison(frm);\r\n    },\r\n    amount: function(frm, cdt, cdn) {\r\n        update_totals(frm);\r\n        update_value_comparison(frm);\r\n    },\r\n    total_po_items: function(frm) {\r\n        update_value_comparison(frm);\r\n    },\r\n    total_po_amount: function(frm) {\r\n        update_value_comparison(frm);\r\n    },\r\n    refresh: function (frm) {\r\n        frm.add_custom_button('Customer Worksheet', function () {\r\n            frappe.set_route('List', 'Customer Worksheet');\r\n        }, __('View'));\r\n    \r\n        update_value_comparison(frm);\r\n    \r\n        frm.add_custom_button('Clear', () => {\r\n            const reset_fields = {\r\n                customer: '',\r\n                customer_po_id: '',\r\n                contact_person: '',\r\n                department: '',\r\n                customer_po_date: '',\r\n                delivery_date: '',\r\n                po_attachment: '',\r\n                total_po_items: 0,\r\n                total_po_amount: 0\r\n            };\r\n            frm.set_value(reset_fields);\r\n            frm.clear_table('items_details');\r\n            frm.refresh_fields();\r\n        });\r\n    \r\n        const styleBtn = {\r\n            'background-color': 'black',\r\n            'color': 'white',\r\n            'border': '1px solid black',\r\n            'padding': '6px 8px'\r\n        };\r\n    \r\n        setTimeout(() => {\r\n            $(\".btn-custom:contains('Clear')\").css(styleBtn);\r\n            ['po_attachment', 'add_items', 'update_documents', 'submit_document'].forEach(btn => {\r\n                const buttonWrapper = frm.fields_dict[btn]?.$wrapper;\r\n                if (buttonWrapper) {\r\n                    buttonWrapper.find('button').css(styleBtn);\r\n                }\r\n            });\r\n        }, 100);\r\n\r\n    }\r\n,\r\nsubmit_document: function(frm) {\r\n    let document_to_submit = [];\r\n\r\n    if (frm.doc.items_details.length > 0) {\r\n        frm.doc.items_details.forEach(item => {\r\n            if (item.bom) {\r\n                document_to_submit.push({ \"doctype\": \"BOM\", \"name\": item.bom });\r\n            }\r\n        });\r\n\r\n        frm.doc.items_details.forEach(item => {\r\n            if (item.sales_order) {\r\n                document_to_submit.push({ \"doctype\": \"Sales Order\", \"name\": item.sales_order });\r\n            }\r\n        });\r\n\r\n        frappe.call({\r\n            method: \"submit_documents\",\r\n            args: {\r\n                doc_list: JSON.stringify(document_to_submit)\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    console.log(\"Submission result:\", r.message);\r\n                    frappe.msgprint(\"Documents processed: \" + r.message.length);\r\n                }\r\n            }\r\n        });\r\n    }\r\n},\r\n\r\n update_documents: function (frm) {\r\n    const required_fields = [\r\n        { field: \"customer\", label: \"Customer\" },\r\n        { field: \"contact_person\", label: \"USA Buyer\" },\r\n        { field: \"department\", label: \"Department\" },\r\n        { field: \"customer_po_date\", label: \"Customer PO Date\" },\r\n        { field: \"delivery_date\", label: \"Delivery Date\" },\r\n        { field: \"total_po_items\", label: \"PO Qty\" },\r\n        { field: \"total_po_amount\", label: \"PO Amount\" },\r\n        { field: \"po_attachment\", label: \"PO Attachment\" }\r\n    ];\r\n\r\n    let missing = required_fields.filter(f => !frm.doc[f.field]);\r\n\r\n    if (missing.length > 0) {\r\n        let missing_fields = missing.map(f => f.label).join(\", \");\r\n        frappe.msgprint(`Please fill the following required fields: ${missing_fields}`);\r\n        frm.scroll_to_field(missing[0].field);  \r\n        return;\r\n    }\r\n\r\n    if (!frm.doc.items_details || frm.doc.items_details.length === 0) {\r\n        frappe.msgprint(\"No items to update.\");\r\n        return;\r\n    }\r\n\r\n    let updated_orders = new Set();\r\n    let updates_done = 0;\r\n    let file_uploads_done = 0;\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Sales Order\",\r\n            fields: [\"name\"],\r\n            limit_page_length: 100000\r\n        },\r\n        callback: function (res) {\r\n            const valid_sales_orders = new Set(res.message.map(so => so.name));\r\n            let delivery_updates = [];\r\n\r\n            let unique_sales_orders = new Set();\r\n            frm.doc.items_details.forEach(row => {\r\n                if (row.sales_order) {\r\n                    unique_sales_orders.add(row.sales_order);\r\n                }\r\n            });\r\n\r\n            unique_sales_orders.forEach(so => {\r\n                set_delivery_date(so, frm.doc.delivery_date);\r\n            });\r\n\r\n            frm.doc.items_details.forEach(row => {\r\n                const so = row.sales_order;\r\n                if (so && row.item_code && valid_sales_orders.has(so)) {\r\n                    delivery_updates.push({\r\n                        sales_order: so,\r\n                        item_code: row.item_code\r\n                    });\r\n\r\n                    if (!updated_orders.has(so)) {\r\n                        updated_orders.add(so);\r\n\r\n                        frappe.call({\r\n                            method: \"frappe.client.set_value\",\r\n                            args: {\r\n                                doctype: \"Sales Order\",\r\n                                name: so,\r\n                                fieldname: {\r\n                                    contact_person: frm.doc.contact_person,\r\n                                    custom_department: frm.doc.department\r\n                                }\r\n                            },\r\n                            callback: function () {\r\n                                updates_done++;\r\n\r\n                                frm.doc.items_details.forEach(r => {\r\n                                    if (r.sales_order === so) {\r\n                                        r.status = \"Updated\";\r\n                                    }\r\n                                });\r\n                                frm.refresh_field(\"items_details\");\r\n\r\n                                if (frm.doc.po_attachment) {\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.insert\",\r\n                                        args: {\r\n                                            doc: {\r\n                                                doctype: \"File\",\r\n                                                file_url: frm.doc.po_attachment,\r\n                                                attached_to_doctype: \"Sales Order\",\r\n                                                attached_to_name: so,\r\n                                                folder: \"Home/Attachments\",\r\n                                                is_private: 1\r\n                                            }\r\n                                        },\r\n                                        callback: function () {\r\n                                            file_uploads_done++;\r\n                                            if (file_uploads_done === updated_orders.size) {\r\n                                                frappe.msgprint('Details Updated');\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    if (updates_done === updated_orders.size) {\r\n                                        frappe.msgprint('Details Updated');\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            update_item_data_and_dependencies(frm);\r\n        }\r\n    });\r\n}\r\n\r\n,\r\n\r\n add_items: function (frm) {\r\n    frappe.call({\r\n        method: \"get_items_with_draft_sales_order\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            filters: { custom_vendor_product_id: [\"!=\", \"\"] },\r\n            fields: [\"name\", \"item_name\", \"custom_vendor_product_id\", \"item_group\", \"custom_customer_sku\", \"description\"],\r\n            limit_page_length: 100000\r\n        },\r\n        callback: function (r) {\r\n            if (!r.message || r.message.length === 0) {\r\n                frappe.msgprint(\"No Vendor IDs found.\");\r\n                return;\r\n            }\r\n\r\n            const all_items = r.message;\r\n            const seen_ids = new Set();\r\n            const unique_items = all_items.filter(item => {\r\n                if (seen_ids.has(item.custom_vendor_product_id)) return false;\r\n                seen_ids.add(item.custom_vendor_product_id);\r\n                return true;\r\n            });\r\n\r\n            const highlightMatch = (text, query) => {\r\n                if (!query) return text;\r\n                const escaped = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n                const regex = new RegExp(`(${escaped})`, 'gi');\r\n                return text.replace(regex, '<span style=\"background-color: yellow;\">$1</span>');\r\n            };\r\n\r\n            const generate_table_rows = (items, query = \"\") =>\r\n                items.map(item => `\r\n                    <tr class=\"vendor-row\">\r\n                        <td style=\"text-align:center;\"><input type=\"checkbox\" class=\"vendor-checkbox\" data-id=\"${item.custom_vendor_product_id}\" /></td>\r\n                        <td><b>${highlightMatch(item.custom_vendor_product_id, query)}</b></td>\r\n                        <td>${highlightMatch(item.item_name, query)}</td>\r\n                    </tr>\r\n                `).join(\"\");\r\n\r\n            const html = `\r\n                <div style=\"margin-bottom: 12px;\">\r\n                    <input type=\"text\" id=\"vendor-search\" placeholder=\"Search Here\"\r\n                        style=\"flex: 1; padding: 6px 10px; margin-right: 12px; border: 1px solid #ccc; border-radius: 4px;\">\r\n                    <button class=\"btn btn-secondary btn-md\" id=\"vendor-clear-btn\">Clear</button>\r\n                </div>\r\n                <div style=\"display: flex; justify-content: flex-end; gap: 20px; margin-bottom: 12px;\">\r\n                  \r\n                    <span><b>Inserted:</b> <span id=\"inserted-count\" style=\"color: green;\">0</span></span>\r\n                </div>\r\n                <div style=\"max-height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 6px;\">\r\n                    <table style=\"width: 100%;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #f9fafb;\">\r\n                                <th style=\"width: 60px;\">Select</th>\r\n                                <th style=\"width:200px;\">Vendor Product ID</th>\r\n                                <th>Item Name</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody id=\"vendor-table-body\"></tbody>\r\n                    </table>\r\n                </div>\r\n            `;\r\n\r\n            const d = new frappe.ui.Dialog({\r\n                title: 'Select Vendor Product IDs to Add',\r\n                fields: [{ fieldtype: 'HTML', fieldname: 'vendor_table', options: html }],\r\n                size: 'large',\r\n                primary_action_label: 'Insert',\r\n                primary_action() {\r\n                    const selected_ids = Array.from(d.$wrapper.find('.vendor-checkbox:checked')).map(cb => $(cb).data('id'));\r\n                    if (selected_ids.length === 0) {\r\n                        frappe.msgprint(\"Please select at least one Vendor ID.\");\r\n                        return;\r\n                    }\r\n\r\n                    let inserted_count = 0;\r\n                    all_items.filter(item => selected_ids.includes(item.custom_vendor_product_id)).forEach(item => {\r\n                        const row = frm.add_child('items_details', {\r\n                            item_code: item.name.trim(),\r\n                            item_name: item.item_name,\r\n                            vendor_product_id: item.custom_vendor_product_id,\r\n                            item_group: item.item_group,\r\n                            status: \"Fetched\",\r\n                            customer_sku: item.custom_customer_sku || \"\",\r\n                            description: item.description || \"\"\r\n                        });\r\n                        inserted_count++;\r\n                        fetch_item_info(frm, row.doctype, row.name);\r\n                    });\r\n\r\n                    frm.refresh_field('items_details');\r\n                    d.$wrapper.find('#inserted-count').text(inserted_count);\r\n                    d.$wrapper.find('#vendor-search').val(\"\");\r\n                    d.$wrapper.find('#vendor-table-body').empty();\r\n                    // d.$wrapper.find('#selected-count').text(\"0\");\r\n                    // d.$wrapper.find('#total-count').html(`<b>Total IDs:</b> 0`);\r\n                }\r\n            });\r\n\r\n            d.show();\r\n\r\n            const wrapper = d.$wrapper;\r\n            const searchInput = wrapper.find('#vendor-search');\r\n            const tableBody = wrapper.find('#vendor-table-body');\r\n\r\n            wrapper.on('change', '.vendor-checkbox', function () {\r\n                wrapper.find('#selected-count').text(wrapper.find('.vendor-checkbox:checked').length);\r\n            });\r\n\r\n            wrapper.on('click', '#vendor-clear-btn', function () {\r\n                searchInput.val(\"\");\r\n                tableBody.empty();\r\n                wrapper.find('#selected-count').text(\"0\");\r\n                wrapper.find('#total-count').html(`<b>Total IDs:</b> 0`);\r\n                wrapper.find('#inserted-count').text(\"0\");\r\n            });\r\n\r\n            searchInput.on('keyup', function () {\r\n                const query = searchInput.val().trim().toLowerCase();\r\n                const filtered = unique_items.filter(item => {\r\n                    const combined = `${item.custom_vendor_product_id} ${item.item_name}`.toLowerCase();\r\n                    return combined.includes(query);\r\n                });\r\n\r\n                if (filtered.length === 0) {\r\n                tableBody.html(`\r\n                    <tr>\r\n                        <td colspan=\"3\" style=\"text-align: center; color: red; padding: 12px;\">\r\n                            No Sales Order is created for this item.\r\n                        </td>\r\n                    </tr>\r\n                `);\r\n            } else {\r\n                tableBody.html(generate_table_rows(filtered, query));\r\n            }\r\n\r\n                wrapper.find('#selected-count').text(\"0\");\r\n                // wrapper.find('#total-count').html(`<b>Total IDs:</b> ${filtered.length}`);\r\n                // wrapper.find('#inserted-count').text(\"0\");\r\n            });\r\n        }\r\n    });\r\n}\r\n});\r\n\r\n\r\n\r\nfunction update_value_comparison(frm) {\r\n    let child_qty_total = 0;\r\n    let child_amount_total = 0;\r\n\r\n    frm.doc.items_details.forEach(row => {\r\n        child_qty_total += flt(row.qty);\r\n        child_amount_total += flt(row.amount);\r\n    });\r\n\r\n    const po_qty_total = flt(frm.doc.total_po_items || 0);\r\n    const po_amount_total = flt(frm.doc.total_po_amount || 0);\r\n\r\n    const qty_match = (child_qty_total === po_qty_total);\r\n    const amount_match = (child_amount_total === po_amount_total);\r\n\r\n    if (\r\n        child_qty_total === 0 || \r\n        child_amount_total === 0 || \r\n        (qty_match && amount_match)\r\n    ) {\r\n        frm.set_df_property(\"value_comparision\", \"hidden\", 1);\r\n        return;\r\n    }\r\n\r\n    frm.set_df_property(\"value_comparision\", \"hidden\", 0);\r\n\r\n    const qty_diff = child_qty_total - po_qty_total;\r\n    const amount_diff = child_amount_total - po_amount_total;\r\n\r\n    const qty_diff_color = qty_diff !== 0 ? 'red' : 'inherit';\r\n    const amount_diff_color = amount_diff !== 0 ? 'red' : 'inherit';\r\n\r\n    const html = `\r\n        <div style=\"font-size: 14px; line-height: 1.6;\">\r\n            <div stylemargin-top: 4px;\">\r\n            <h4 style=\"margin-bottom: 1px;color:#525252;\"><b>Comparison </b><br></h4>\r\n                <b>Purchase Order</b>: ${po_qty_total} units (${format_currency(po_amount_total)})<br>\r\n                <b>Sales Orders</b>: ${child_qty_total} units (${format_currency(child_amount_total)})<br>\r\n                <b>Variance</b>: \r\n                    <span style=\"color: ${qty_diff_color};\">${qty_diff >= 0 ? '+' : ''}${qty_diff} units</span> \r\n                    (<span style=\"color: ${amount_diff_color};\">${amount_diff >= 0 ? '+' : ''}${format_currency(amount_diff)}</span>)\r\n            </div>\r\n        </div>\r\n    `;\r\n\r\n    frm.set_df_property(\"value_comparision\", \"options\", html);\r\n}\r\n\r\n\r\nfunction update_totals(frm) {\r\n    let total_qty = 0;\r\n    let total_amt = 0;\r\n\r\n    frm.doc.items_details.forEach(row => {\r\n        total_qty += flt(row.qty);\r\n        total_amt += flt(row.amount);\r\n    });\r\n\r\n    frm.set_value(\"total_po_items\", total_qty);\r\n    frm.set_value(\"total_po_amount\", total_amt);\r\n\r\n    update_value_comparison(frm); \r\n}\r\n\r\nfunction set_delivery_date(order_id, delivery_date){\r\n    console.log(order_id)\r\n    frappe.call({\r\n        method: \"set_delivery_date_in_so\",  \r\n        args: {\r\n            sales_order: order_id,\r\n            delivery_date: delivery_date\r\n        },\r\n        callback: (res) => {\r\n            console.log(res);\r\n            if (!res.exc) {\r\n                // frappe.msgprint(\"Success\");\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction update_item_data_and_dependencies(frm) {\r\n    frm.doc.items_details.forEach(row => {\r\n        if (!row.item_code) return;\r\n\r\n        // Update Item Master\r\n        frappe.call({\r\n            method: \"frappe.client.set_value\",\r\n            args: {\r\n                doctype: \"Item\",\r\n                name: row.item_code,\r\n                fieldname: {\r\n                    ...(row.customer_sku ? { custom_customer_sku: row.customer_sku } : {}),\r\n                    ...(row.item_name ? { item_name: row.item_name } : {}),\r\n                    ...(row.description ? { description: row.description } : {})\r\n                }\r\n            },\r\n            callback: function () {\r\n                console.log(`Item ${row.item_code} updated.`);\r\n\r\n                // Update BOM\r\n                if (row.bom) {\r\n                frappe.call({\r\n                    method: \"frappe.client.get\",\r\n                    args: {\r\n                        doctype: \"Item\",\r\n                        name: row.item_code\r\n                    },\r\n                    callback: function(itemRes) {\r\n                        const updated_item_name = itemRes.message.item_name;\r\n                        const updated_description = itemRes.message.description;\r\n                \r\n                        bom.items.forEach(i => {\r\n                            if (i.item_code === row.item_code) {\r\n                                i.item_name = updated_item_name;\r\n                                i.description = updated_description;\r\n                            }\r\n                        });\r\n                \r\n                        frappe.call({\r\n                            method: \"frappe.client.save\",\r\n                            args: { doc: bom },\r\n                            callback: function () {\r\n                                console.log(`BOM ${row.bom} synced with Item master values.`);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                }\r\n\r\n                // Update Purchase Order\r\n                if (row.purchase_order) {\r\n                    frappe.call({\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Purchase Order\",\r\n                            name: row.purchase_order\r\n                        },\r\n                        callback: function(poRes) {\r\n                            const po = poRes.message;\r\n                            let updated = false;\r\n                \r\n                            po.items.forEach(po_item => {\r\n                                if (po_item.item_code === row.item_code) {\r\n                                    po_item.description = row.description;\r\n                                    updated = true;\r\n                                }\r\n                            });\r\n                \r\n                            if (updated) {\r\n                                frappe.call({\r\n                                    method: \"frappe.client.save\",\r\n                                    args: { doc: po },\r\n                                    callback: function () {\r\n                                        console.log(`PO ${row.purchase_order} description updated.`);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// ========== Fetch Additional Item Info ==========\r\nfunction fetch_item_info(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    if (!row.item_code) return;\r\n\r\n    frappe.call({\r\n        method: \"get_item_related_info\",\r\n        args: { item_code: row.item_code },\r\n        callback: function (r) {\r\n            if (r.message) {\r\n                const info = r.message;\r\n\r\n                const group = (info.item_group || \"\").toLowerCase();\r\n                const isSpecialGroup = [\"ring\", \"bracelet\", \"bangle\"].includes(group);\r\n\r\n                const finalQty = isSpecialGroup ? info.sales_order_total_qty : info.qty;\r\n                const finalSize = isSpecialGroup ? info.size_count : 0;\r\n\r\n                frappe.model.set_value(cdt, cdn, {\r\n                    sales_order: info.sales_order,\r\n                    delivery_date: info.delivery_date,\r\n                    sales_order_status: info.sales_order_status,\r\n                    purchase_order: info.purchase_order,\r\n                    purchase_order_status: info.purchase_order_status,\r\n                    bom: info.bom,\r\n                    bom_status: info.bom_status,\r\n                    item_group: info.item_group || \"\",\r\n                    qty: finalQty,\r\n                    size: finalSize,\r\n                    rate: info.rate,\r\n                    amount: info.amount,\r\n                    customer_po_id: info.po_no,\r\n                    customer_po_date: info.po_date\r\n\r\n                    \r\n                });\r\n\r\n                setTimeout(() => {\r\n                    frm.set_df_property(\"value_comparision\", \"hidden\", 0);\r\n                    update_value_comparison(frm);\r\n                }, 300); \r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n// ========== Amount Calculation ==========\r\nfrappe.ui.form.on('PO Header Items', {\r\n    qty: update_amount,\r\n    rate: update_amount,\r\n    amount: function (frm, cdt, cdn) {\r\n        update_value_comparison(frm);\r\n    }\r\n});\r\n\r\nfunction update_amount(frm, cdt, cdn) {\r\n    const d = locals[cdt][cdn];\r\n    const amount = flt(d.qty) * flt(d.rate);\r\n\r\n    frappe.model.set_value(cdt, cdn, \"amount\", amount).then(() => {\r\n        update_value_comparison(frm);\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.973039",
  "module": "espresso",
  "name": "Stone Treatment in SO",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    refresh: function(frm) {\r\n        if (!frm.__treatment_handler_bound) {\r\n            bindPopupToTreatmentField(frm);\r\n            frm.__treatment_handler_bound = true;\r\n        }\r\n    }\r\n});\r\n\r\nfunction bindPopupToTreatmentField(frm) {\r\n    const $table = frm.fields_dict.custom_bom_items.grid.wrapper;\r\n\r\n    // Remove previous bindings to avoid duplicates\r\n    $table.off('click', \"[data-fieldname='custom_stone_treatment_list']\");\r\n\r\n    $table.on('click', \"[data-fieldname='custom_stone_treatment_list']\", function (e) {\r\n        e.stopPropagation();\r\n\r\n        const grid_row = $(this).closest('.grid-row');\r\n        const row_name = grid_row.attr('data-name');\r\n        const row = frm.fields_dict.custom_bom_items.grid.grid_rows_by_docname[row_name].doc;\r\n\r\n        if ($(this).data('popup-opened')) return;\r\n        $(this).data('popup-opened', true);\r\n\r\n        new frappe.ui.form.MultiSelectDialog({\r\n            doctype: 'Stone Treatment',\r\n            target: frm,\r\n            setters: {},\r\n            add_filters_group: 0,\r\n            allow_multiple: true,\r\n            action: function(selected_values) {\r\n                const treatment_list = selected_values.join(', ');\r\n                frappe.model.set_value(row.doctype, row.name, 'custom_stone_treatment_list', treatment_list);\r\n                $(e.currentTarget).data('popup-opened', false);\r\n                this.dialog.hide();\r\n            },\r\n            primary_action_label: 'Select',\r\n            get_query: () => {\r\n                return {\r\n                    filters: {}\r\n                };\r\n            },\r\n            action_on_cancel: function () {\r\n                $(e.currentTarget).data('popup-opened', false);\r\n            }\r\n        });\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer Worksheet",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.847469",
  "module": "espresso",
  "name": "Stone Treatment in CW",
  "script": "frappe.ui.form.on('Customer Worksheet', {\r\n    refresh: function(frm) {\r\n        if (!frm.__treatment_handler_bound) {\r\n            console.log(\"Binding handlers to both child tables...\");\r\n            bindTreatmentPopup(frm, 'customer_bom_items');\r\n            bindTreatmentPopup(frm, 'bom_items');\r\n            frm.__treatment_handler_bound = true;\r\n        }\r\n    }\r\n});\r\n\r\nfunction bindTreatmentPopup(frm, table_fieldname) {\r\n    const grid = frm.fields_dict[table_fieldname]?.grid;\r\n\r\n    if (!grid) {\r\n        console.warn(`Grid not found for table: ${table_fieldname}`);\r\n        return;\r\n    }\r\n\r\n    const $table = grid.wrapper;\r\n\r\n    $table.off('click', \"[data-fieldname='stone_treatment_list']\");\r\n\r\n    $table.on('click', \"[data-fieldname='stone_treatment_list']\", function (e) {\r\n        e.stopPropagation();\r\n\r\n        const grid_row = $(this).closest('.grid-row');\r\n        const row_name = grid_row.attr('data-name');\r\n        const row = grid.grid_rows_by_docname[row_name]?.doc;\r\n\r\n        if (!row) {\r\n            console.warn(\"Row not found for clicked field\");\r\n            return;\r\n        }\r\n\r\n        if ($(this).data('popup-opened')) return;\r\n        $(this).data('popup-opened', true);\r\n\r\n        new frappe.ui.form.MultiSelectDialog({\r\n            doctype: 'Stone Treatment',\r\n            target: frm,\r\n            setters: {},\r\n            add_filters_group: 0,\r\n            allow_multiple: true,\r\n            action: function (selected_values) {\r\n                const treatment_list = selected_values.join(', ');\r\n                frappe.model.set_value(row.doctype, row.name, 'stone_treatment_list', treatment_list);\r\n                $(e.currentTarget).data('popup-opened', false);\r\n                this.dialog.hide();\r\n            },\r\n            primary_action_label: 'Select',\r\n            get_query: () => {\r\n                return {\r\n                    filters: {}\r\n                };\r\n            },\r\n            action_on_cancel: function () {\r\n                $(e.currentTarget).data('popup-opened', false);\r\n            }\r\n        });\r\n    });\r\n\r\n    console.log(`Popup bound to: ${table_fieldname}`);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.896782",
  "module": "espresso",
  "name": "PO Stone Treatment",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    refresh: function(frm) {\r\n        if (!frm.__treatment_handler_bound) {\r\n            bindPopupToTreatmentField(frm);\r\n            frm.__treatment_handler_bound = true;\r\n        }\r\n    }\r\n});\r\n\r\nfunction bindPopupToTreatmentField(frm) {\r\n    const $table = frm.fields_dict.custom_bom_items.grid.wrapper;\r\n\r\n    $table.on('click', \"[data-fieldname='stone_treatment_list']\", function (e) {\r\n        e.stopPropagation();\r\n\r\n        const grid_row = $(this).closest('.grid-row');\r\n        const row_name = grid_row.attr('data-name');\r\n        const row = frm.fields_dict.custom_bom_items.grid.grid_rows_by_docname[row_name].doc;\r\n\r\n        if ($(this).data('popup-opened')) return;\r\n        $(this).data('popup-opened', true);\r\n\r\n        new frappe.ui.form.MultiSelectDialog({\r\n            doctype: 'Stone Treatment',\r\n            target: frm,\r\n            setters: {},\r\n            add_filters_group: 0,\r\n            allow_multiple: true,\r\n            action: function(selected_values) {\r\n                const treatment_list = selected_values.join(', ');\r\n                frappe.model.set_value(row.doctype, row.name, 'stone_treatment_list', treatment_list);\r\n                $(e.currentTarget).data('popup-opened', false); \r\n                this.dialog.hide();\r\n            },\r\n            primary_action_label: 'Select',\r\n            get_query: () => {\r\n                return {\r\n                    filters: {}\r\n                };\r\n            },\r\n            action_on_cancel: function () {\r\n                $(e.currentTarget).data('popup-opened', false); // reset on cancel\r\n            }\r\n        });\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Feedback",
  "enabled": 1,
  "modified": "2025-06-25 11:49:36.532936",
  "module": "espresso",
  "name": "User Feedback",
  "script": "frappe.ui.form.on('User Feedback', {\r\n    refresh(frm) {\r\n        calculate_age(frm);\r\n        setInterval(() => {\r\n            if (should_update_age(frm)) {\r\n                calculate_age(frm);\r\n            }\r\n        }, 60000); \r\n    },\r\n    time: calculate_age,\r\n    date: calculate_age,\r\n    status: calculate_age,\r\n    feedback_type: calculate_age\r\n});\r\n\r\nfunction should_update_age(frm) {\r\n    const status = frm.doc.status;\r\n    const feedbackType = frm.doc.feedback_type;\r\n\r\n    if (feedbackType === \"Rating Only\") return false;\r\n\r\n    return status === \"Open\" || status === \"In Progress\";\r\n}\r\n\r\nfunction calculate_age(frm) {\r\n    const feedbackType = frm.doc.feedback_type;\r\n\r\n    if (feedbackType === \"Rating Only\") {\r\n        frm.set_value(\"age\", \"⭐\");\r\n        return;\r\n    }\r\n\r\n    if (!should_update_age(frm)) return;\r\n\r\n    const date = frm.doc.date;\r\n    const time = frm.doc.time;\r\n\r\n    if (!date || !time) return;\r\n\r\n    const datetime_str = `${date} ${time}`;\r\n    const feedback_datetime = new Date(datetime_str);\r\n    const now = new Date();\r\n\r\n    const msDiff = now - feedback_datetime;\r\n    if (msDiff < 0) {\r\n        frm.set_value(\"age\", \"Future Time\");\r\n        return;\r\n    }\r\n\r\n    const minutes = msDiff / (1000 * 60);\r\n    const hours = msDiff / (1000 * 60 * 60);\r\n    const days = msDiff / (1000 * 60 * 60 * 24);\r\n    const weeks = days / 7;\r\n    const months = days / 30;\r\n    const years = days / 365;\r\n\r\n    let ageStr = \"\";\r\n\r\n    if (minutes < 60) {\r\n        ageStr = `${minutes.toFixed(1)} m`;\r\n    } else if (hours < 24) {\r\n        ageStr = `${hours.toFixed(1)} H`;\r\n    } else if (days < 7) {\r\n        ageStr = `${days.toFixed(1)} D`;\r\n    } else if (days < 30) {\r\n        ageStr = `${weeks.toFixed(1)} W`;\r\n    } else if (days < 365) {\r\n        ageStr = `${months.toFixed(1)} M`;\r\n    } else {\r\n        ageStr = `${years.toFixed(1)} Y`;\r\n    }\r\n\r\n    frm.set_value(\"age\", ageStr);\r\n}\r\n",
  "view": "Form"
 }
]