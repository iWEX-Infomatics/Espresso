[
 {
  "allow_guest": 0,
  "api_method": "get_doc_with_children",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:53:24.170651",
  "module": "espresso",
  "name": "Query Documents with Items (API)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Initialize the response\r\nfrappe.response['result'] = {}\r\nfrappe.response['success'] = True\r\nfrappe.response['count'] = 0\r\n\r\ntry:\r\n    # Get parameters directly from form_dict\r\n    doctype = frappe.form_dict.get('doctype')\r\n    doc_name = frappe.form_dict.get('name')\r\n    fields_str = frappe.form_dict.get('fields')\r\n    child_fields_str = frappe.form_dict.get('child_fields')\r\n    filters_str = frappe.form_dict.get('filters')\r\n    limit_str = frappe.form_dict.get('limit')\r\n    \r\n    # Parse string inputs - frappe already parses JSON\r\n    fields = fields_str\r\n    child_fields = child_fields_str\r\n    filters = filters_str\r\n    \r\n    # Parse string inputs - handle case where filters is a string\r\n    if isinstance(filters, str):\r\n        try:\r\n            filters = json.loads(filters)\r\n        except:\r\n            filters = None\r\n    \r\n    # Default fields if not provided\r\n    if not fields:\r\n        fields = [\"name\", \"modified\", \"creation\"]\r\n    \r\n\r\n        \r\n    # Set limit with a default\r\n    limit = 20\r\n    if limit_str:\r\n        try:\r\n            limit = int(limit_str)\r\n        except ValueError:\r\n            limit = 20\r\n    \r\n    # Validate parameters\r\n    if not doctype:\r\n        frappe.response['error'] = \"Missing required parameter: doctype\"\r\n        frappe.response['success'] = False\r\n    else:\r\n        # Determine the mode: single document or list\r\n        mode = \"single\" if doc_name else \"list\"\r\n        \r\n        # Single document mode\r\n        if mode == \"single\":\r\n            if not frappe.db.exists(doctype, doc_name):\r\n                frappe.response['error'] = f\"{doctype} {doc_name} not found\"\r\n                frappe.response['success'] = False\r\n            else:\r\n                # Get a single document by name\r\n                doc = frappe.get_doc(doctype, doc_name)\r\n                result = {}\r\n                \r\n                # Set count to 1 for single document mode\r\n                frappe.response['count'] = 1\r\n                \r\n                # Create result dictionary with only requested fields\r\n                for field in fields:\r\n                    try:\r\n                        result[field] = doc.get(field)\r\n                    except:\r\n                        # Skip fields that don't exist\r\n                        pass\r\n                \r\n                # Process child tables\r\n                if child_fields:\r\n                    for child_table_name in child_fields:\r\n                        child_field_list = child_fields[child_table_name]\r\n                        try:\r\n                            child_table = doc.get(child_table_name)\r\n                            if child_table:\r\n                                child_items = []\r\n                                \r\n                                # Add count of items\r\n                                result[f\"{child_table_name}_count\"] = len(child_table)\r\n                                \r\n                                # Get field values for each child item\r\n                                for child_doc in child_table:\r\n                                    child_item = {}\r\n                                    for child_field_name in child_field_list:\r\n                                        try:\r\n                                            child_item[child_field_name] = child_doc.get(child_field_name)\r\n                                        except:\r\n                                            # Skip fields that don't exist\r\n                                            pass\r\n                                    child_items.append(child_item)\r\n                                \r\n                                result[child_table_name] = child_items\r\n                        except:\r\n                            # Skip child tables that don't exist\r\n                            result[f\"{child_table_name}_count\"] = 0\r\n                            result[child_table_name] = []\r\n                \r\n                # Set count to 1 for single document mode\r\n                frappe.response['count'] = 1\r\n                \r\n                # Wrap the result in an array for consistent format with filter mode\r\n                frappe.response['result'] = [result]\r\n        \r\n        # List mode\r\n        else:\r\n            if not filters:\r\n                frappe.response['error'] = \"Missing required parameter: filters when name is not provided\"\r\n                frappe.response['success'] = False\r\n            else:\r\n                # Get a list of documents based on filters\r\n                docs = []\r\n                \r\n                # Handle filters based on type\r\n                if isinstance(filters, list):\r\n                    try:\r\n                        # Special handling for OR conditions with \"or\" string\r\n                        has_or_string = False\r\n                        for item in filters:\r\n                            if item == \"or\" and isinstance(item, str):\r\n                                has_or_string = True\r\n                                break\r\n                        \r\n                        if has_or_string:\r\n                            # Extract individual conditions from OR filter\r\n                            or_conditions = []\r\n                            for item in filters:\r\n                                if item != \"or\" and isinstance(item, list) and len(item) >= 3:\r\n                                    or_conditions.append(item)\r\n                            \r\n                            # Get the total count of matching records for each condition without limit\r\n                            seen_names = set()\r\n                            \r\n                            for condition in or_conditions:\r\n                                if len(condition) >= 3:\r\n                                    field_name = condition[0]\r\n                                    operator = condition[1]\r\n                                    value = condition[2]\r\n                                    \r\n                                    single_filter = {}\r\n                                    if operator == \"=\":\r\n                                        single_filter[field_name] = value\r\n                                    else:\r\n                                        single_filter[field_name] = [operator, value]\r\n                                    \r\n                                    try:\r\n                                        # Get all matching records for this condition (without limit)\r\n                                        all_results = frappe.get_list(\r\n                                            doctype,\r\n                                            filters=single_filter,\r\n                                            fields=[\"name\"]\r\n                                        )\r\n                                        \r\n                                        # Count unique names across all conditions\r\n                                        for doc_info in all_results:\r\n                                            seen_names.add(doc_info.name)\r\n                                    except Exception as sub_e:\r\n                                        frappe.log_error(f\"OR condition count error: {str(sub_e)}\", \"API Error\")\r\n                            \r\n                            # Set the total count of unique matching records\r\n                            frappe.response['count'] = len(seen_names)\r\n                            \r\n                            # Now get the limited results for actual processing\r\n                            result_names = set()\r\n                            \r\n                            for condition in or_conditions:\r\n                                if len(condition) >= 3:\r\n                                    field_name = condition[0]\r\n                                    operator = condition[1]\r\n                                    value = condition[2]\r\n                                    \r\n                                    single_filter = {}\r\n                                    if operator == \"=\":\r\n                                        single_filter[field_name] = value\r\n                                    else:\r\n                                        single_filter[field_name] = [operator, value]\r\n                                    \r\n                                    try:\r\n                                        # Get limited results for processing\r\n                                        single_results = frappe.get_list(\r\n                                            doctype,\r\n                                            filters=single_filter,\r\n                                            fields=[\"name\"],\r\n                                            limit_page_length=limit * 2  # Use larger limit for individual queries\r\n                                        )\r\n                                        \r\n                                        for doc_info in single_results:\r\n                                            result_names.add(doc_info.name)\r\n                                    except Exception as sub_e:\r\n                                        frappe.log_error(f\"OR condition sub-query error: {str(sub_e)}\", \"API Error\")\r\n                            \r\n                            # Apply limit to combined results\r\n                            combined_names = list(result_names)[:limit]\r\n                            \r\n                            # Create doc_list from combined_names\r\n                            doc_list = []\r\n                            for name in combined_names:\r\n                                # Create a simple dictionary instead of using frappe._dict\r\n                                doc_list.append({\"name\": name})\r\n                        else:\r\n                            # Regular AND conditions\r\n                            # First get the total count (without limit)\r\n                            total_count = frappe.db.count(doctype, filters)\r\n                            frappe.response['count'] = total_count\r\n                            \r\n                            # Then get the limited list of documents\r\n                            doc_list = frappe.get_list(\r\n                                doctype, \r\n                                filters=filters,\r\n                                fields=[\"name\"],\r\n                                limit_page_length=limit\r\n                            )\r\n                        \r\n                        # Process each document in the list\r\n                        for doc_info in doc_list:\r\n                            try:\r\n                                doc = frappe.get_doc(doctype, doc_info.get(\"name\"))\r\n                                doc_result = {}\r\n                                \r\n                                # Get requested fields\r\n                                for field in fields:\r\n                                    try:\r\n                                        doc_result[field] = doc.get(field)\r\n                                    except:\r\n                                        # Skip fields that don't exist\r\n                                        pass\r\n                                \r\n                                # Process child tables\r\n                                if child_fields:\r\n                                    for child_table_name in child_fields:\r\n                                        child_field_list = child_fields[child_table_name]\r\n                                        try:\r\n                                            child_table = doc.get(child_table_name)\r\n                                            if child_table:\r\n                                                child_items = []\r\n                                                \r\n                                                # Add count of items\r\n                                                doc_result[f\"{child_table_name}_count\"] = len(child_table)\r\n                                                \r\n                                                # Get field values for each child item\r\n                                                for child_doc in child_table:\r\n                                                    child_item = {}\r\n                                                    for child_field_name in child_field_list:\r\n                                                        try:\r\n                                                            child_item[child_field_name] = child_doc.get(child_field_name)\r\n                                                        except:\r\n                                                            # Skip fields that don't exist\r\n                                                            pass\r\n                                                    child_items.append(child_item)\r\n                                                \r\n                                                doc_result[child_table_name] = child_items\r\n                                        except:\r\n                                            # Skip child tables that don't exist\r\n                                            doc_result[f\"{child_table_name}_count\"] = 0\r\n                                            doc_result[child_table_name] = []\r\n                                \r\n                                docs.append(doc_result)\r\n                            except Exception as doc_e:\r\n                                frappe.log_error(f\"Error processing document {doc_info.get('name')}: {str(doc_e)}\", \"API Error\")\r\n                        \r\n                        frappe.response['result'] = docs\r\n                    except Exception as e:\r\n                        frappe.response['error'] = f\"Invalid filter format: {str(e)}\"\r\n                        frappe.response['filter_format_guide'] = {\r\n                            \"simple_equals\": [\"field\", \"=\", \"value\"],\r\n                            \"comparison\": [\"field\", \">\", \"value\"],\r\n                            \"or_condition_example\": \"Use [condition1, 'or', condition2] format\"\r\n                        }\r\n                        frappe.response['success'] = False\r\n                else:\r\n                    frappe.response['error'] = \"Invalid filters format. Expected array format.\"\r\n                    frappe.response['success'] = False\r\nexcept Exception as e:\r\n    frappe.response['error'] = f\"Error retrieving document: {str(e)}\"\r\n    frappe.response['success'] = False\r\n    frappe.log_error(f\"get_doc_with_children error: {str(e)}\", \"API Error\")",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_country_of_origin",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.544669",
  "module": "espresso",
  "name": "Fetch Countries of Origin From Gemstones",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "result = frappe.db.sql(\"\"\"\n    SELECT  DISTINCT oc.name, oc.country\n    FROM `tabOrigin Country` oc\n    WHERE oc.parent = %s\n    ORDER BY oc.creation DESC\n\"\"\", (frappe.form_dict.get(\"gemstone\"),))  \nfrappe.log_error(\"DATA\",str(result))\nfrappe.response['data'] = result\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "create_multi_currency_intercompany_sales_order",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:53:24.238163",
  "module": "espresso",
  "name": "Create Inter-company Sales Order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "# Get the purchase order from the args\r\npurchase_order_name = args.get(\"purchase_order_name\")\r\nfrappe.log_error(f\"Multi-currency inter-company transaction initiated for PO: {purchase_order_name}\", \r\n               \"Multi-Currency IC Debug\")\r\n\r\ntry:\r\n    po_doc = frappe.get_doc(\"Purchase Order\", purchase_order_name)\r\n    \r\n    # Validate that PO exists and is submitted\r\n    if po_doc.docstatus != 1:\r\n        frappe.throw(_(\"Purchase Order must be submitted\"))\r\n        \r\n    # Check if SO already exists and is not cancelled\r\n    if po_doc.inter_company_order_reference:\r\n        existing_so = frappe.db.get_value(\r\n            \"Sales Order\", \r\n            po_doc.inter_company_order_reference, \r\n            [\"name\", \"docstatus\"], \r\n            as_dict=1\r\n        )\r\n        \r\n        if existing_so and existing_so.docstatus != 2:  # Not cancelled\r\n            frappe.throw(_(\"Sales Order {0} already exists for this Purchase Order\").format(\r\n                po_doc.inter_company_order_reference\r\n            ))\r\n    \r\n    # Create a new Sales Order\r\n    so = frappe.new_doc(\"Sales Order\")\r\n    \r\n    # Get selling company information (supplier in PO)\r\n    selling_company = po_doc.supplier\r\n    selling_company_abbr = frappe.db.get_value('Company', selling_company, 'abbr')\r\n    \r\n    # Find the correct customer for this company\r\n    customer = frappe.db.get_value(\r\n        \"Customer\", \r\n        {\"represents_company\": po_doc.company, \"is_internal_customer\": 1},\r\n        \"name\"\r\n    )\r\n    \r\n    if not customer:\r\n        # Fallback with a mapping if no internal customer relationship is set up\r\n        company_to_customer_map = {\r\n            \"D&K\": \"D&K Global\",\r\n            \"BBJ\": \"BBJ International\",\r\n            \"MCGI\": \"MCGI Diamonds\"\r\n            # Add other mappings as needed\r\n        }\r\n        customer = company_to_customer_map.get(po_doc.company, po_doc.company)\r\n        frappe.log_error(f\"Using mapped customer {customer} for company {po_doc.company}\", \r\n                       \"Multi-Currency IC Debug\")\r\n    \r\n    if not customer:\r\n        frappe.throw(_(\"Could not find a Customer representing the purchasing company\"))\r\n    \r\n    # Basic document details\r\n    so.company = selling_company\r\n    so.customer = customer\r\n    so.transaction_date = po_doc.transaction_date\r\n    so.delivery_date = po_doc.schedule_date\r\n    so.po_no = po_doc.name\r\n    so.po_date = po_doc.transaction_date\r\n    \r\n    # Get customer group and territory - only if these fields exist\r\n    try:\r\n        so.customer_group = frappe.db.get_value(\"Customer\", customer, \"customer_group\") or \"All Customer Groups\"\r\n        so.territory = frappe.db.get_value(\"Customer\", customer, \"territory\") or \"All Territories\"\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error setting customer group/territory: {str(e)}\", \"Multi-Currency IC Debug\")\r\n        # Continue without these fields if they cause errors\r\n    \r\n    # Important: Use the same currency as PO, not the company default currency\r\n    so.currency = po_doc.currency  \r\n    so.conversion_rate = 1.0  # Keep conversion rate as 1 since we're using same transaction currency\r\n    \r\n    # Get appropriate price list\r\n    selling_price_list = frappe.db.get_value(\r\n        \"Price List\", \r\n        {\r\n            \"selling\": 1, \r\n            \"currency\": po_doc.currency,\r\n            \"enabled\": 1\r\n        },\r\n        \"name\"\r\n    )\r\n    \r\n    so.selling_price_list = selling_price_list or \"Standard Selling\"\r\n    \r\n    # Custom fields for jewelry business - only if these fields exist\r\n    try:\r\n        so.custom_sales_order_type = \"Stone\"\r\n    except Exception as e:\r\n        frappe.log_error(f\"custom_sales_order_type field may not exist: {str(e)}\", \"Multi-Currency IC Debug\")\r\n    \r\n    so.order_type = \"Sales\"\r\n    \r\n    # Set warehouse\r\n    warehouse = f\"Stores - {selling_company_abbr}\"\r\n    so.set_warehouse = warehouse\r\n    \r\n    # look up a valid contact for the customer\r\n    try:\r\n        valid_contact = frappe.db.sql(\"\"\"\r\n            SELECT parent FROM `tabDynamic Link`\r\n            WHERE parenttype = 'Contact'\r\n            AND link_doctype = 'Customer'\r\n            AND link_name = %s\r\n            LIMIT 1\r\n        \"\"\", (so.customer), as_dict=1)\r\n        \r\n        if valid_contact:\r\n            contact_name = valid_contact[0].parent\r\n            so.contact_person = contact_name\r\n            so.contact_display = frappe.db.get_value(\"Contact\", contact_name, \"full_name\")\r\n            contact_email = frappe.db.get_value(\"Contact\", contact_name, \"email_id\")\r\n            if contact_email:\r\n                so.contact_email = contact_email\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error setting contact info: {str(e)}\", \"Multi-Currency IC Debug\")\r\n    \r\n    # Look up addresses - handling potential missing fields\r\n    try:\r\n        billing_address = frappe.db.get_value(\r\n            \"Dynamic Link\",\r\n            {\r\n                \"link_doctype\": \"Customer\",\r\n                \"link_name\": customer,\r\n                \"parenttype\": \"Address\"\r\n            },\r\n            \"parent\"\r\n        )\r\n        \r\n        if billing_address:\r\n            so.customer_address = billing_address\r\n            \r\n            # Safely get address_display\r\n            try:\r\n                address_display = frappe.db.get_value(\"Address\", billing_address, \"address_display\")\r\n                if address_display:\r\n                    so.address_display = address_display\r\n            except Exception as e:\r\n                frappe.log_error(f\"address_display field may not exist: {str(e)}\", \"Multi-Currency IC Debug\")\r\n                # Try to create address_display from parts if field doesn't exist\r\n                try:\r\n                    address_doc = frappe.get_doc(\"Address\", billing_address)\r\n                    constructed_address = f\"{address_doc.address_line1}\\n\"\r\n                    if address_doc.get(\"address_line2\"):\r\n                        constructed_address += f\"{address_doc.address_line2}\\n\"\r\n                    if address_doc.get(\"city\"):\r\n                        constructed_address += f\"{address_doc.city}, \"\r\n                    if address_doc.get(\"state\"):\r\n                        constructed_address += f\"{address_doc.state} \"\r\n                    if address_doc.get(\"pincode\"):\r\n                        constructed_address += f\"{address_doc.pincode}\\n\"\r\n                    if address_doc.get(\"country\"):\r\n                        constructed_address += f\"{address_doc.country}\"\r\n                    \r\n                    try:\r\n                        so.address_display = constructed_address\r\n                    except:\r\n                        # If field doesn't exist, just move on\r\n                        pass\r\n                except Exception as addr_error:\r\n                    frappe.log_error(f\"Error constructing address: {str(addr_error)}\", \"Multi-Currency IC Debug\")\r\n            \r\n            # Try to find shipping address\r\n            try:\r\n                shipping_address = frappe.db.sql(\"\"\"\r\n                    SELECT al.parent \r\n                    FROM `tabAddress` a\r\n                    JOIN `tabDynamic Link` al ON a.name = al.parent\r\n                    WHERE al.link_doctype = 'Customer'\r\n                    AND al.link_name = %s\r\n                    AND a.address_type = 'Shipping'\r\n                    LIMIT 1\r\n                \"\"\", customer)\r\n                \r\n                if shipping_address:\r\n                    try:\r\n                        so.shipping_address_name = shipping_address[0][0]\r\n                        \r\n                        # Safely get shipping address display\r\n                        try:\r\n                            shipping_display = frappe.db.get_value(\"Address\", so.shipping_address_name, \"address_display\")\r\n                            if shipping_display:\r\n                                so.shipping_address = shipping_display\r\n                        except:\r\n                            # If field doesn't exist, just move on\r\n                            pass\r\n                    except:\r\n                        # If field doesn't exist, just move on\r\n                        pass\r\n            except Exception as shipping_error:\r\n                frappe.log_error(f\"Error setting shipping address: {str(shipping_error)}\", \"Multi-Currency IC Debug\")\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error setting address info: {str(e)}\", \"Multi-Currency IC Debug\")\r\n    \r\n    # Map items from PO to SO\r\n    for item in po_doc.items:\r\n        # Try to get a cost center\r\n        try:\r\n            cost_center = frappe.db.get_value(\r\n                \"Company\", \r\n                selling_company, \r\n                \"cost_center\"\r\n            )\r\n        except:\r\n            cost_center = None\r\n        \r\n        so_item = {\r\n            \"item_code\": item.item_code,\r\n            \"item_name\": item.item_name,\r\n            \"description\": item.description,\r\n            \"qty\": item.qty,\r\n            \"uom\": item.uom,\r\n            \"rate\": item.rate,  # Same rate as in PO (since using same currency)\r\n            \"delivery_date\": item.schedule_date,\r\n            \"warehouse\": warehouse,\r\n            \r\n            # Add reference to original PO\r\n            \"purchase_order\": po_doc.name,\r\n            \"purchase_order_item\": item.name\r\n        }\r\n        \r\n        # Safely try to add optional fields\r\n        try:\r\n            # Try to access stock_uom - use get() to avoid AttributeError\r\n            stock_uom = item.get(\"stock_uom\")\r\n            if stock_uom:\r\n                so_item[\"stock_uom\"] = stock_uom\r\n                \r\n            # Try to access conversion_factor - use get() to avoid AttributeError\r\n            conversion_factor = item.get(\"conversion_factor\")\r\n            if conversion_factor:\r\n                so_item[\"conversion_factor\"] = conversion_factor\r\n        except Exception as item_field_error:\r\n            frappe.log_error(f\"Error accessing item fields: {str(item_field_error)}\", \"Multi-Currency IC Debug\")\r\n        \r\n        # Add cost center if available\r\n        if cost_center:\r\n            so_item[\"cost_center\"] = cost_center\r\n        \r\n        so.append(\"items\", so_item)\r\n    \r\n    # Inter-company reference\r\n    so.inter_company_order_reference = po_doc.name\r\n    \r\n    # Set necessary flags\r\n    so.flags.ignore_permissions = True\r\n    so.flags.ignore_mandatory = True\r\n    \r\n    # Insert the Sales Order\r\n    so.insert()\r\n    \r\n    # Update the Purchase Order with reference\r\n    po_doc.db_set(\"inter_company_order_reference\", so.name)\r\n    \r\n    frappe.log_error(f\"Successfully created Sales Order {so.name} for PO {purchase_order_name}\", \r\n                   \"Multi-Currency IC Success\")\r\n    \r\n    frappe.response[\"message\"] = {\"sales_order\": so.name, \"success\": True}\r\n    \r\nexcept Exception as e:\r\n    frappe.log_error(f\"Error creating inter-company SO: {str(e)}\", \r\n                   \"Multi-Currency IC Error\")\r\n    frappe.throw(str(e))",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.308439",
  "module": "espresso",
  "name": "BOM Server Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM",
  "script": "for item in doc.items:\n    if item.custom_country_of_origin:\n        item.custom_coutry = item.custom_country_of_origin",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.430131",
  "module": "espresso",
  "name": "Sales Order Server Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "\nmax_custom_avg_carot_weight = 0\nmax_stone = \"\"\n\nfor item in doc.items:\n    if item.custom_country_of_origin:\n        item.custom_coutry = item.custom_country_of_origin\n\n\nfor item in doc.custom_bom_items:\n    if max_custom_avg_carot_weight < item.custom_avg_carat_weight:\n        max_custom_avg_carot_weight = item.custom_avg_carat_weight\n        max_stone = item.custom_gemstone\n        \ndoc.custom_main_stone = max_stone",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Delete",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.527641",
  "module": "espresso",
  "name": "PO Cancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "po_name = doc.name\r\n\r\nsales_orders = frappe.get_all(\r\n    \"Sales Order\",\r\n    filters={},\r\n    fields=[\"name\"]\r\n)\r\n\r\nfor so in sales_orders:\r\n    so_doc = frappe.get_doc(\"Sales Order\", so.name)\r\n    updated = False\r\n\r\n    # Unlink from Sales Order Items\r\n    for item in so_doc.items:\r\n        if item.custom_purchase_order_no == po_name:\r\n            item.custom_purchase_order_no = \"\"\r\n            updated = True\r\n\r\n    # Unlink from custom_bom_items child table\r\n    for bom_item in so_doc.get(\"custom_bom_items\") or []:\r\n        if str(bom_item.custom_purchase_order_id) == po_name:\r\n            bom_item.custom_purchase_order_id = \"\"\r\n            updated = True\r\n\r\n    if updated:\r\n        so_doc.save(ignore_permissions=True)\r\n\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "upsert_docs_with_children",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.561965",
  "module": "espresso",
  "name": "Upsert Documents with Child Table",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Complete Fixed Upsert Script - Variable Scoping Fix Only\r\n\r\n# Add field value conversion function at the top\r\ndef convert_field_value(value, field_name, meta):\r\n\t\"\"\"\r\n\tConvert field value to appropriate type based on ERPNext field definition\r\n\t\"\"\"\r\n\tif value is None:\r\n\t\treturn None\r\n\t\r\n\t# Get field definition\r\n\tfield_def = meta.get_field(field_name)\r\n\tif not field_def:\r\n\t\treturn value\r\n\t\r\n\tfieldtype = field_def.fieldtype\r\n\t\r\n\t# Handle different field types\r\n\tif fieldtype == 'Check':\r\n\t\t# Checkbox fields - convert to 0/1\r\n\t\tif value == '' or value is None:\r\n\t\t\treturn 0\r\n\t\telif value in [True, 'true', 'True', 1, '1']:\r\n\t\t\treturn 1\r\n\t\telif value in [False, 'false', 'False', 0, '0']:\r\n\t\t\treturn 0\r\n\t\telse:\r\n\t\t\treturn 1 if value else 0\r\n\t\r\n\telif fieldtype in ['Int', 'Integer']:\r\n\t\t# Integer fields\r\n\t\tif value == '' or value is None:\r\n\t\t\treturn 0\r\n\t\ttry:\r\n\t\t\treturn int(float(value))\r\n\t\texcept (ValueError, TypeError):\r\n\t\t\treturn 0\r\n\t\r\n\telif fieldtype in ['Float', 'Currency', 'Percent']:\r\n\t\t# Float fields\r\n\t\tif value == '' or value is None:\r\n\t\t\treturn 0.0\r\n\t\ttry:\r\n\t\t\treturn float(value)\r\n\t\texcept (ValueError, TypeError):\r\n\t\t\treturn 0.0\r\n\t\r\n\telif fieldtype in ['Data', 'Small Text', 'Text', 'Link', 'Select']:\r\n\t\t# String fields\r\n\t\tif value is None:\r\n\t\t\treturn ''\r\n\t\treturn str(value)\r\n\t\r\n\telse:\r\n\t\t# Default - return as is\r\n\t\treturn value\r\n\r\n# Initialize the response\r\nfrappe.response['results'] = []\r\nfrappe.response['summary'] = {\r\n\t\"inserted\": 0,\r\n\t\"updated\": 0,\r\n\t\"failed\": 0,\r\n\t\"total\": 0\r\n}\r\nfrappe.response['success'] = True\r\n\r\ntry:\r\n\t# Get data directly from form_dict\r\n\tif not frappe.form_dict.get('docs'):\r\n\t\tfrappe.response['error'] = \"No documents provided\"\r\n\telse:\r\n\t\t# Get response fields (fields to include in the response for child items)\r\n\t\tresponse_fields = frappe.form_dict.get('response_fields', ['name'])\r\n\t\tif isinstance(response_fields, str):\r\n\t\t\tresponse_fields = json.loads(response_fields)\r\n\t\t\r\n\t\t# Get delete flag (whether to remove child items not in request)\r\n\t\tremove_unmatched_items = frappe.form_dict.get('remove_unmatched_items', False)\r\n\t\tif isinstance(remove_unmatched_items, str):\r\n\t\t\tremove_unmatched_items = remove_unmatched_items.lower() in ['true', '1', 'yes']\r\n\t\t\r\n\t\t# Parse if needed\r\n\t\tif isinstance(frappe.form_dict.get('docs'), str):\r\n\t\t\t# Parse JSON string\r\n\t\t\tdocs_array = json.loads(frappe.form_dict.get('docs'))\r\n\t\telse:\r\n\t\t\t# Already a list/dict\r\n\t\t\tdocs_array = frappe.form_dict.get('docs')\r\n\t\t\r\n\t\t# Ensure it's a list\r\n\t\tif not isinstance(docs_array, list):\r\n\t\t\tdocs_array = [docs_array]\r\n\t\t\r\n\t\t# Store total count\r\n\t\tfrappe.response['summary']['total'] = len(docs_array)\r\n\t\t\r\n\t\t# Initialize counters\r\n\t\tinserted_count = 0\r\n\t\tupdated_count = 0\r\n\t\tfailed_count = 0\r\n\t\t\r\n\t\t# Process each document\r\n\t\tfor i in range(len(docs_array)):\r\n\t\t\t# Extract key fields for each document\r\n\t\t\tcurrent_doctype = None\r\n\t\t\tcurrent_name = None\r\n\t\t\toriginal_data = docs_array[i]\r\n\t\t\t\r\n\t\t\t# Track overall document success\r\n\t\t\tdocument_success = False\r\n\t\t\tdocument_error = None\r\n\t\t\t\r\n\t\t\t# IMPORTANT: Initialize child_items_response at document level\r\n\t\t\tchild_items_response = {}  # Initialize here to avoid \"not defined\" error\r\n\t\t\t\r\n\t\t\ttry:\r\n\t\t\t\t# Get doctype from current document\r\n\t\t\t\tcurrent_doctype = original_data.get('doctype')\r\n\t\t\t\tif not current_doctype:\r\n\t\t\t\t\traise ValueError(\"Missing doctype field\")\r\n\t\t\t\t\r\n\t\t\t\t# Get name/identifier\r\n\t\t\t\tcurrent_name = original_data.get('name')\r\n\t\t\t\t\r\n\t\t\t\t# Check if this is an update or insert\r\n\t\t\t\tdoc_exists = current_name and current_name.strip() != \"\" and frappe.db.exists(current_doctype, current_name)\r\n\t\t\t\t\r\n\t\t\t\t# For updating existing documents\r\n\t\t\t\tif doc_exists:\r\n\t\t\t\t\t# Get the existing document\r\n\t\t\t\t\tdoc = frappe.get_doc(current_doctype, current_name)\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Get meta information for the doctype to identify child tables\r\n\t\t\t\t\tmeta = frappe.get_meta(current_doctype)\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Re-initialize child items response data and main doc updates\r\n\t\t\t\t\tchild_items_response = {}  # Reset for this document\r\n\t\t\t\t\tmain_doc_updates = {}\r\n\t\t\t\t\tdoc_status = \"updated\"\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Track if we need to save for structural changes\r\n\t\t\t\t\tneeds_save = False\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Separate tracking data (not stored in response objects)\r\n\t\t\t\t\tupdate_operations = []  # List of operations to perform\r\n\t\t\t\t\tplaceholder_items = []  # List of new items to create\r\n\t\t\t\t\tremoval_operations = []  # List of items to remove\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Separate main document fields from child table fields\r\n\t\t\t\t\tfor field_name, field_value in original_data.items():\r\n\t\t\t\t\t\tif field_name not in ['doctype', 'name']:\r\n\t\t\t\t\t\t\t# Check if this is a child table field\r\n\t\t\t\t\t\t\tis_child_table = False\r\n\t\t\t\t\t\t\tchild_doctype = None\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor table_field in meta.get_table_fields():\r\n\t\t\t\t\t\t\t\tif table_field.fieldname == field_name:\r\n\t\t\t\t\t\t\t\t\tis_child_table = True\r\n\t\t\t\t\t\t\t\t\tchild_doctype = table_field.options\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif is_child_table and isinstance(field_value, list):\r\n\t\t\t\t\t\t\t\t# Handle child table updates\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Get existing child items\r\n\t\t\t\t\t\t\t\texisting_items = doc.get(field_name) or []\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Create mappings for matching based on name\r\n\t\t\t\t\t\t\t\texisting_by_name = {}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Map by name field\r\n\t\t\t\t\t\t\t\tfor existing_item in existing_items:\r\n\t\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t\t# Map by name (system key)\r\n\t\t\t\t\t\t\t\t\t\titem_name = existing_item.name\r\n\t\t\t\t\t\t\t\t\t\tif item_name:\r\n\t\t\t\t\t\t\t\t\t\t\texisting_by_name[item_name] = existing_item\r\n\t\t\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Initialize a single array for all child items in response\r\n\t\t\t\t\t\t\t\tchild_items_all = []\r\n\t\t\t\t\t\t\t\titems_to_remove = list(existing_items)\t# Start with all, remove matched ones\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Process each incoming item\r\n\t\t\t\t\t\t\t\tfor child_idx, item_data in enumerate(field_value):\r\n\t\t\t\t\t\t\t\t\tincoming_name = item_data.get('name', '').strip()\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\texisting_item = None\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t# Try to match by name if provided\r\n\t\t\t\t\t\t\t\t\tif incoming_name and incoming_name in existing_by_name:\r\n\t\t\t\t\t\t\t\t\t\texisting_item = existing_by_name[incoming_name]\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif existing_item:\r\n\t\t\t\t\t\t\t\t\t\t# Collect fields to update for this child item\r\n\t\t\t\t\t\t\t\t\t\tchild_updates = {}\r\n\t\t\t\t\t\t\t\t\t\tsystem_fields = ['name', 'parent', 'parenttype', 'parentfield', 'docstatus', 'creation', 'modified', 'modified_by', 'owner', 'idx']\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Get child table meta for field type conversion\r\n\t\t\t\t\t\t\t\t\t\tchild_meta = frappe.get_meta(child_doctype)\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfor key, value in item_data.items():\r\n\t\t\t\t\t\t\t\t\t\t\tif key not in system_fields:\r\n\t\t\t\t\t\t\t\t\t\t\t\t# Convert value based on field type\r\n\t\t\t\t\t\t\t\t\t\t\t\tconverted_value = convert_field_value(value, key, child_meta)\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild_updates[key] = converted_value\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Store operation for later execution (separate from response)\r\n\t\t\t\t\t\t\t\t\t\tif child_updates:\r\n\t\t\t\t\t\t\t\t\t\t\tupdate_operations.append({\r\n\t\t\t\t\t\t\t\t\t\t\t\t'doctype': child_doctype,\r\n\t\t\t\t\t\t\t\t\t\t\t\t'name': existing_item.name,\r\n\t\t\t\t\t\t\t\t\t\t\t\t'updates': child_updates,\r\n\t\t\t\t\t\t\t\t\t\t\t\t'response_index': len(child_items_all)  # Link to response item\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Create clean response object (no underscore fields)\r\n\t\t\t\t\t\t\t\t\t\titem_response = {\r\n\t\t\t\t\t\t\t\t\t\t\t\"status\": \"pending\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"original_child_index\": child_idx,\r\n\t\t\t\t\t\t\t\t\t\t\t\"name\": existing_item.name\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Add requested response fields from original data\r\n\t\t\t\t\t\t\t\t\t\tfor field in response_fields:\r\n\t\t\t\t\t\t\t\t\t\t\tif field != \"name\" and field in item_data:\r\n\t\t\t\t\t\t\t\t\t\t\t\titem_response[field] = item_data[field]\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tchild_items_all.append(item_response)\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Remove from items_to_remove since it's being kept\r\n\t\t\t\t\t\t\t\t\t\tif existing_item in items_to_remove:\r\n\t\t\t\t\t\t\t\t\t\t\titems_to_remove.remove(existing_item)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\t\t# Add new item - this requires structural change\r\n\t\t\t\t\t\t\t\t\t\tclean_item = {}\r\n\t\t\t\t\t\t\t\t\t\tsystem_fields = ['name', 'parent', 'parenttype', 'parentfield', 'docstatus', 'creation', 'modified', 'modified_by', 'owner', 'idx']\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Get child table meta for field type conversion\r\n\t\t\t\t\t\t\t\t\t\tchild_meta = frappe.get_meta(child_doctype)\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfor key, value in item_data.items():\r\n\t\t\t\t\t\t\t\t\t\t\tif key not in system_fields:\r\n\t\t\t\t\t\t\t\t\t\t\t\t# Convert value based on field type\r\n\t\t\t\t\t\t\t\t\t\t\t\tconverted_value = convert_field_value(value, key, child_meta)\r\n\t\t\t\t\t\t\t\t\t\t\t\tclean_item[key] = converted_value\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Create a new child item\r\n\t\t\t\t\t\t\t\t\t\tnew_item = doc.append(field_name, clean_item)\r\n\t\t\t\t\t\t\t\t\t\tneeds_save = True  # Mark that we need to save for structural changes\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Store placeholder info for later name resolution\r\n\t\t\t\t\t\t\t\t\t\tplaceholder_items.append({\r\n\t\t\t\t\t\t\t\t\t\t\t'response_index': len(child_items_all),\r\n\t\t\t\t\t\t\t\t\t\t\t'original_data': item_data\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Create clean response object (no underscore fields)\r\n\t\t\t\t\t\t\t\t\t\titem_response = {\r\n\t\t\t\t\t\t\t\t\t\t\t\"status\": \"pending\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"original_child_index\": child_idx,\r\n\t\t\t\t\t\t\t\t\t\t\t\"name\": \"\"  # Will be filled after save\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Add requested response fields from original data\r\n\t\t\t\t\t\t\t\t\t\tfor field in response_fields:\r\n\t\t\t\t\t\t\t\t\t\t\tif field != \"name\" and field in item_data:\r\n\t\t\t\t\t\t\t\t\t\t\t\titem_response[field] = item_data[field]\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tchild_items_all.append(item_response)\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Remove items that weren't matched (only if remove_unmatched_items is True)\r\n\t\t\t\t\t\t\t\tif remove_unmatched_items:\r\n\t\t\t\t\t\t\t\t\t# For removed items, we don't have original indices, so assign them after the last original index\r\n\t\t\t\t\t\t\t\t\tnext_removed_index = len(field_value)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfor item_to_remove in items_to_remove:\r\n\t\t\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t\t\t# Store removal operation\r\n\t\t\t\t\t\t\t\t\t\t\tremoval_operations.append({\r\n\t\t\t\t\t\t\t\t\t\t\t\t'item': item_to_remove,\r\n\t\t\t\t\t\t\t\t\t\t\t\t'field_name': field_name,\r\n\t\t\t\t\t\t\t\t\t\t\t\t'response_index': len(child_items_all)\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t# Create response for removed item\r\n\t\t\t\t\t\t\t\t\t\t\titem_response = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"status\": \"pending\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"original_child_index\": next_removed_index,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"name\": item_to_remove.name\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tchild_items_all.append(item_response)\r\n\t\t\t\t\t\t\t\t\t\t\tdoc.get(field_name).remove(item_to_remove)\r\n\t\t\t\t\t\t\t\t\t\t\tneeds_save = True  # Mark that we need to save for structural changes\r\n\t\t\t\t\t\t\t\t\t\t\tnext_removed_index = next_removed_index + 1\r\n\t\t\t\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\t\t\t\tfrappe.log_error(f\"Error removing items not matched\")\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Track this for response\r\n\t\t\t\t\t\t\t\tchild_items_response[field_name] = child_items_all\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t# Check if any items were inserted\r\n\t\t\t\t\t\t\t\tif placeholder_items:\r\n\t\t\t\t\t\t\t\t\tdoc_status = \"updated_with_inserts\"\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t# Collect main document field for bulk update\r\n\t\t\t\t\t\t\t\t# Convert value based on field type\r\n\t\t\t\t\t\t\t\tconverted_value = convert_field_value(field_value, field_name, meta)\r\n\t\t\t\t\t\t\t\tmain_doc_updates[field_name] = converted_value\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Now execute all the updates\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\t# Update main document fields using frappe.db.set_value (if any)\r\n\t\t\t\t\t\tif main_doc_updates:\r\n\t\t\t\t\t\t\tfrappe.db.set_value(doc.doctype, doc.name, main_doc_updates)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Execute child item updates\r\n\t\t\t\t\t\tfor operation in update_operations:\r\n\t\t\t\t\t\t\tfrappe.db.set_value(operation['doctype'], operation['name'], operation['updates'])\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Only save if we have structural changes (new/removed child items)\r\n\t\t\t\t\t\tif needs_save:\r\n\t\t\t\t\t\t\t# Reload document to get latest state before saving\r\n\t\t\t\t\t\t\tdoc.reload()\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t# Set flags to ignore timestamp checks\r\n\t\t\t\t\t\t\tdoc.flags.ignore_permissions = True\r\n\t\t\t\t\t\t\tdoc.flags.ignore_version = True\r\n\t\t\t\t\t\t\tdoc.flags.ignore_links = True\r\n\t\t\t\t\t\t\tdoc.flags.ignore_if_duplicate = True\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t# Save the document for structural changes\r\n\t\t\t\t\t\t\tdoc.save()\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# If we get here, everything succeeded\r\n\t\t\t\t\t\tdocument_success = True\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Ensure the document is committed to database\r\n\t\t\t\t\t\tfrappe.db.commit()\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Reload document to get latest state for response\r\n\t\t\t\t\t\tif needs_save:\r\n\t\t\t\t\t\t\tdoc.reload()\r\n\t\t\t\t\t\t\r\n\t\t\t\t\texcept Exception as update_error:\r\n\t\t\t\t\t\tdocument_success = False\r\n\t\t\t\t\t\tdocument_error = str(update_error)\r\n\t\t\t\t\t\tif len(document_error) > 100:\r\n\t\t\t\t\t\t\tdocument_error = document_error[:100] + \"...\"\r\n\t\t\t\t\t\traise update_error\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Update child item statuses based on overall success\r\n\t\t\t\t\tfor field_name, child_items in child_items_response.items():\r\n\t\t\t\t\t\tfor idx, item in enumerate(child_items):\r\n\t\t\t\t\t\t\tif item.get(\"status\") == \"pending\":\r\n\t\t\t\t\t\t\t\tif document_success:\r\n\t\t\t\t\t\t\t\t\t# Determine status based on what type of operation this was\r\n\t\t\t\t\t\t\t\t\tis_placeholder = any(p['response_index'] == idx for p in placeholder_items)\r\n\t\t\t\t\t\t\t\t\tis_update = any(o['response_index'] == idx for o in update_operations)\r\n\t\t\t\t\t\t\t\t\tis_removal = any(r['response_index'] == idx for r in removal_operations)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif is_placeholder:\r\n\t\t\t\t\t\t\t\t\t\titem[\"status\"] = \"inserted\"\r\n\t\t\t\t\t\t\t\t\telif is_update:\r\n\t\t\t\t\t\t\t\t\t\titem[\"status\"] = \"updated\" \r\n\t\t\t\t\t\t\t\t\telif is_removal:\r\n\t\t\t\t\t\t\t\t\t\titem[\"status\"] = \"removed\"\r\n\t\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\t\titem[\"status\"] = \"unchanged\"\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\titem[\"status\"] = \"failed\"\r\n\t\t\t\t\t\t\t\t\titem[\"error\"] = document_error\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Update placeholder names with actual names from saved document\r\n\t\t\t\t\tif document_success and needs_save:\r\n\t\t\t\t\t\tfor field_name in child_items_response.keys():\r\n\t\t\t\t\t\t\t# Get current child table after save\r\n\t\t\t\t\t\t\tcurrent_child_table = doc.get(field_name) or []\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t# Get placeholder items for this field\r\n\t\t\t\t\t\t\tfield_placeholders = [p for p in placeholder_items]\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t# Get existing item names to avoid duplicates\r\n\t\t\t\t\t\t\texisting_names = set()\r\n\t\t\t\t\t\t\tfor item in child_items_response[field_name]:\r\n\t\t\t\t\t\t\t\tif item.get(\"name\") and item.get(\"status\") != \"pending\":\r\n\t\t\t\t\t\t\t\t\texisting_names.add(item[\"name\"])\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t# Replace placeholder names with actual names\r\n\t\t\t\t\t\t\tif field_placeholders:\r\n\t\t\t\t\t\t\t\tplaceholder_idx = 0\r\n\t\t\t\t\t\t\t\tfor item in current_child_table:\r\n\t\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t\titem_name = item.name\r\n\t\t\t\t\t\t\t\t\t\tif item_name and item_name not in existing_names and placeholder_idx < len(field_placeholders):\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder_info = field_placeholders[placeholder_idx]\r\n\t\t\t\t\t\t\t\t\t\t\tresponse_idx = placeholder_info['response_index']\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tif response_idx < len(child_items_response[field_name]):\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild_items_response[field_name][response_idx][\"name\"] = item_name\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\texisting_names.add(item_name)\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder_idx = placeholder_idx + 1\r\n\t\t\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\t\t\tfrappe.log_error(f\"Error replacing placeholder items\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tif document_success:\r\n\t\t\t\t\t\t# Track successful update\r\n\t\t\t\t\t\tupdated_count = updated_count + 1\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Create result object with original data reference\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\t\"name\": current_name,\r\n\t\t\t\t\t\t\t\"doctype\": current_doctype,\r\n\t\t\t\t\t\t\t\"status\": doc_status,\r\n\t\t\t\t\t\t\t\"original_index\": i\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t# Add child items if present\r\n\t\t\t\t\t\tif child_items_response:\r\n\t\t\t\t\t\t\tresult[\"child_items\"] = child_items_response\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfrappe.response['results'].append(result)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\t# This should not happen as we would have raised an exception\r\n\t\t\t\t\t\traise Exception(\"Document processing failed but no exception was raised\")\r\n\t\t\t\t\r\n\t\t\t\t# For inserting new documents\r\n\t\t\t\telse:\r\n\t\t\t\t\t# Create clean document data\r\n\t\t\t\t\tclean_doc_data = {}\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Get document meta for field type conversion\r\n\t\t\t\t\tdoc_meta = frappe.get_meta(current_doctype)\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Copy all fields except name (for new documents)\r\n\t\t\t\t\tfor key, value in original_data.items():\r\n\t\t\t\t\t\tif key != 'name':  # Don't include name for new documents\r\n\t\t\t\t\t\t\t# Convert value based on field type\r\n\t\t\t\t\t\t\tconverted_value = convert_field_value(value, key, doc_meta)\r\n\t\t\t\t\t\t\tclean_doc_data[key] = converted_value\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Special case for Item doctype - generate item_code if not provided\r\n\t\t\t\t\tif current_doctype == \"Item\":\r\n\t\t\t\t\t\tif not clean_doc_data.get('item_code') and clean_doc_data.get('custom_abbr'):\r\n\t\t\t\t\t\t\tabbr = clean_doc_data['custom_abbr']\r\n\t\t\t\t\t\t\titem_group = clean_doc_data.get('item_group', '')\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t# Retry logic to handle race conditions\r\n\t\t\t\t\t\t\tmax_retries = 5\r\n\t\t\t\t\t\t\tgenerated_item_code = None\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor attempt in range(max_retries):\r\n\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t# Use better SQL query to find max numeric sequence\r\n\t\t\t\t\t\t\t\t\tresult = frappe.db.sql(\"\"\"\r\n\t\t\t\t\t\t\t\t\t\tSELECT MAX(CAST(SUBSTRING_INDEX(item_code, '-', -1) AS UNSIGNED)) as max_seq\r\n\t\t\t\t\t\t\t\t\t\tFROM `tabItem` \r\n\t\t\t\t\t\t\t\t\t\tWHERE item_code REGEXP %s\r\n\t\t\t\t\t\t\t\t\t\"\"\", (f\"^{abbr}-[0-9]+$\",), as_dict=1)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tmax_sequence = 0\r\n\t\t\t\t\t\t\t\t\tif result and result[0]['max_seq']:\r\n\t\t\t\t\t\t\t\t\t\tmax_sequence = result[0]['max_seq']\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tnew_sequence = max_sequence + 1\r\n\t\t\t\t\t\t\t\t\tgenerated_item_code = f\"{abbr}-{str(new_sequence).zfill(5)}\"\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t# Double-check it doesn't exist\r\n\t\t\t\t\t\t\t\t\tif not frappe.db.exists(\"Item\", generated_item_code):\r\n\t\t\t\t\t\t\t\t\t\tbreak  # Success, exit retry loop\r\n\t\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\t\t# Item exists, continue to next retry\r\n\t\t\t\t\t\t\t\t\t\tif attempt < max_retries - 1:\r\n\t\t\t\t\t\t\t\t\t\t\timport time\r\n\t\t\t\t\t\t\t\t\t\t\ttime.sleep(0.1 * (attempt + 1))\t # Increasing delay\r\n\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\t\t\tif attempt == max_retries - 1:\r\n\t\t\t\t\t\t\t\t\t\t# Last attempt, use timestamp fallback\r\n\t\t\t\t\t\t\t\t\t\timport time\r\n\t\t\t\t\t\t\t\t\t\ttimestamp = str(int(time.time() * 1000))[-6:]\r\n\t\t\t\t\t\t\t\t\t\tgenerated_item_code = f\"{abbr}-T{timestamp}\"\r\n\t\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\t\timport time\r\n\t\t\t\t\t\t\t\t\t\ttime.sleep(0.1)\r\n\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif generated_item_code:\r\n\t\t\t\t\t\t\t\tclean_doc_data['item_code'] = generated_item_code\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\traise Exception(f\"Could not generate unique item code for abbreviation {abbr}\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\telif not clean_doc_data.get('item_code'):\r\n\t\t\t\t\t\t\traise Exception(\"Item Code is required. Either provide item_code or custom_abbr for auto-generation.\")\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Create the document\r\n\t\t\t\t\tdoc = frappe.get_doc(clean_doc_data)\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Set flags for better control\r\n\t\t\t\t\tdoc.flags.ignore_permissions = True\r\n\t\t\t\t\tdoc.flags.ignore_validate = True\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Insert the document\r\n\t\t\t\t\tdoc.insert()\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Ensure the document is committed to database\r\n\t\t\t\t\tfrappe.db.commit()\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Verify the document was created\r\n\t\t\t\t\tif not frappe.db.exists(current_doctype, doc.name):\r\n\t\t\t\t\t\traise Exception(f\"Document {doc.name} was not created properly\")\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Reload the document to get the latest state with all child items\r\n\t\t\t\t\tdoc.reload()\r\n\r\n\t\t\t\t\t# Prepare response for child items - all items are new for inserts\r\n\t\t\t\t\tmeta = frappe.get_meta(current_doctype)\r\n\t\t\t\t\tchild_items_response = {}  # Initialize for new document\r\n\r\n\t\t\t\t\tfor table_field in meta.get_table_fields():\r\n\t\t\t\t\t\tfieldname = table_field.fieldname\r\n\t\t\t\t\t\tif fieldname in original_data:\r\n\t\t\t\t\t\t\tall_items = []\r\n\t\t\t\t\t\t\tchild_table_data = doc.get(fieldname) or []\r\n\t\t\t\t\t\t\toriginal_child_data = original_data[fieldname]\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif child_table_data:\r\n\t\t\t\t\t\t\t\tfor idx, row in enumerate(child_table_data):\r\n\t\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t\t# Find corresponding original child index\r\n\t\t\t\t\t\t\t\t\t\toriginal_idx = idx\r\n\t\t\t\t\t\t\t\t\t\tif idx < len(original_child_data):\r\n\t\t\t\t\t\t\t\t\t\t\toriginal_idx = idx\r\n\t\t\t\t\t\t\t\t\t\t\toriginal_item_data = original_child_data[idx]\r\n\t\t\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\t\t\toriginal_item_data = {}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Create response with basic fields\r\n\t\t\t\t\t\t\t\t\t\titem_response = {\r\n\t\t\t\t\t\t\t\t\t\t\t\"status\": \"inserted\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"original_child_index\": original_idx,\r\n\t\t\t\t\t\t\t\t\t\t\t\"name\": row.name\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t# Add requested response fields from original data\r\n\t\t\t\t\t\t\t\t\t\tfor field in response_fields:\r\n\t\t\t\t\t\t\t\t\t\t\tif field != \"name\" and field in original_item_data:\r\n\t\t\t\t\t\t\t\t\t\t\t\titem_response[field] = original_item_data[field]\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tall_items.append(item_response)\r\n\t\t\t\t\t\t\t\t\texcept Exception as row_error:\r\n\t\t\t\t\t\t\t\t\t\tfrappe.log_error(f\"Error processing child row: {str(row_error)}\", \"Bulk Upsert\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tchild_items_response[fieldname] = all_items\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Track successful insert\r\n\t\t\t\t\tinserted_count = inserted_count + 1\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Create result object with original data reference\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\"name\": doc.name,\r\n\t\t\t\t\t\t\"doctype\": current_doctype,\r\n\t\t\t\t\t\t\"status\": \"inserted\",\r\n\t\t\t\t\t\t\"original_index\": i\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t# Add child items if present\r\n\t\t\t\t\tif child_items_response:\r\n\t\t\t\t\t\tresult[\"child_items\"] = child_items_response\r\n\t\t\t\t\t\r\n\t\t\t\t\tfrappe.response['results'].append(result)\r\n\t\t\t\r\n\t\t\texcept Exception as e:\r\n\t\t\t\t# Rollback any partial changes\r\n\t\t\t\tfrappe.db.rollback()\r\n\t\t\t\t\r\n\t\t\t\t# Track failure\r\n\t\t\t\tfailed_count = failed_count + 1\r\n\t\t\t\t\r\n\t\t\t\t# Create a more detailed error report with shorter error message\r\n\t\t\t\terror_msg = str(e)\r\n\t\t\t\tif len(error_msg) > 100:\r\n\t\t\t\t\terror_msg = error_msg[:100] + \"...\"\r\n\t\t\t\t\r\n\t\t\t\terror_detail = {\r\n\t\t\t\t\t\"status\": \"failed\",\r\n\t\t\t\t\t\"error\": error_msg,\r\n\t\t\t\t\t\"original_index\": i\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t# Add identifying information when available\r\n\t\t\t\tif current_name:\r\n\t\t\t\t\terror_detail[\"name\"] = current_name\r\n\t\t\t\t\r\n\t\t\t\tif current_doctype:\r\n\t\t\t\t\terror_detail[\"doctype\"] = current_doctype\r\n\t\t\t\t\r\n\t\t\t\t# Handle child items in the failed document - mark all as failed\r\n\t\t\t\t# child_items_response is now guaranteed to be defined\r\n\t\t\t\tif child_items_response:\r\n\t\t\t\t\tfor field_name, child_items in child_items_response.items():\r\n\t\t\t\t\t\tfor item in child_items:\r\n\t\t\t\t\t\t\titem[\"status\"] = \"failed\"\r\n\t\t\t\t\t\t\titem[\"error\"] = error_msg\r\n\t\t\t\t\t\r\n\t\t\t\t\terror_detail[\"child_items\"] = child_items_response\r\n\t\t\t\t\r\n\t\t\t\tfrappe.response['results'].append(error_detail)\r\n\t\t\r\n\t\t# Update summary counts\r\n\t\tfrappe.response['summary']['inserted'] = inserted_count\r\n\t\tfrappe.response['summary']['updated'] = updated_count\r\n\t\tfrappe.response['summary']['failed'] = failed_count\r\n\t\t\r\n\t\t# Final commit\r\n\t\tfrappe.db.commit()\r\n\t\t\r\nexcept Exception as e:\r\n\t# Rollback everything if there's a global error\r\n\tfrappe.db.rollback()\r\n\terror_msg = str(e)\r\n\tif len(error_msg) > 100:\r\n\t\terror_msg = error_msg[:100] + \"...\"\r\n\tfrappe.response['error'] = f\"Error processing bulk upsert: {error_msg}\"",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_gold_rate",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.341228",
  "module": "espresso",
  "name": "Fetch Gold Rate",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "result = []\r\npo = frappe.get_doc(\"Purchase Order\",frappe.form_dict.get(\"docname\") )\r\n\r\nfor item in po.items:\r\n    item_dict = frappe.db.get_value('Item',item.item_code,[\"custom_metal_group\",\"item_group\",\"custom_purity_multiplier\"],as_dict = 1)\r\n    if item_dict.get(\"item_group\") == \"Metal\":\r\n        metal_cost = frappe.get_all(\r\n            \"Metal Cost Item\",\r\n            filters={\"metal\": item_dict.custom_metal_group},\r\n            fields=[\"*\"],\r\n            order_by=\"creation desc\",\r\n            limit=1\r\n        )\r\n        if metal_cost:\r\n            metal_cost = metal_cost[0]\r\n            rate = float(metal_cost.rate_per_gram or 0)\r\n            purity = float(item_dict.get(\"custom_purity_multiplier\") or 0)\r\n            loss = float(metal_cost.custom_metal_loss or 0)\r\n            \r\n            final_rate = rate * purity * (1 + loss)\r\n            \r\n            result.append({\r\n                \"metal\":item_dict.get(\"custom_metal_group\"),\r\n                \"rate\":final_rate,\r\n                \"time\":metal_cost.creation,\r\n                \"item\":item.item_code\r\n            })\r\n            \r\nfrappe.response['data'] = result if result else {}\r\n            ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "create_item",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.376567",
  "module": "espresso",
  "name": "New Item Creation from Customer Worksheet",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "@frappe.whitelist()\r\ndef create_item(item_code, item_name, item_group, customer_sku=None, vendor_product_id=None):\r\n    item = frappe.get_doc({\r\n        \"doctype\": \"Item\",\r\n        \"item_code\": item_code,\r\n        \"item_name\": item_name,\r\n        \"item_group\": item_group,\r\n        \"custom_customer_sku\": customer_sku,\r\n        \"custom_vendor_product_id\": vendor_product_id\r\n    })\r\n    item.insert(ignore_permissions=True)\r\n    return item.name\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_origin_countries_for_gemstone",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:53:24.285049",
  "module": "espresso",
  "name": "get_origin_countries_for_gemstone",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "gemstone = frappe.form_dict.get(\"gemstone\")\n\nresult = frappe.db.sql(\"\"\"\n    SELECT DISTINCT oc.country\n    FROM `tabOrigin Country` oc\n    WHERE oc.parent = %s\n    ORDER BY oc.creation DESC\n\"\"\", (gemstone,))\n\nfrappe.response['message'] = [r[0] for r in result]\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_customer_dashboard",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.394121",
  "module": "espresso",
  "name": "Web Page",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "user = frappe.session.user\n\n\nif frappe.db.exists(\"Customer\",{\"user\":user}):\n    customer = frappe.db.get_value(\"Customer\", {\"user\": user}, \"name\")\n    \n    \n    if customer:\n        result = {\n        \"sales_orders\": frappe.get_all(\"Sales Order\", {\n            \"customer\": customer\n        }, [\"name\", \"transaction_date\", \"grand_total\"]),\n    \n        \"sales_invoices\": frappe.get_all(\"Sales Invoice\", {\n            \"customer\": customer\n        }, [\"name\", \"posting_date\", \"grand_total\"]),\n    \n        \"items\": []\n    }\n    \n    \n        if customer == \"JTV\":\n            result[\"items\"] = frappe.get_all(\"Item\", {}, [\"item_code\", \"item_name\", \"item_group\"])\n        \n        frappe.response[\"result\"] =  result\n    \n    else:\n        frappe.response[\"result\"] = \"\"\n        \nelse:\n    frappe.response[\"result\"] =  \"\"\n    \n    \n    \n    \n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:53:24.318263",
  "module": "espresso",
  "name": "BOM Item Spec Linking with BOM Item",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM Item Spec",
  "script": "if doc.bom_item_id and frappe.db.exists(\"BOM Item\", doc.bom_item_id):\r\n    frappe.db.set_value(\"BOM Item\", doc.bom_item_id, \"bom_item_spec\", doc.name)\r\n    print(f\"Linked BOM Item Spec {doc.name} to BOM Item {doc.bom_item_id}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.622953",
  "module": "espresso",
  "name": "Update Item Description based on Item Spec",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item Spec",
  "script": "# Server Script for Item Spec\r\n# Document Type: Item Spec\r\n# Event: After Save\r\n\r\n# Auto-update Item with Item Spec reference (like inter-company SO/PO linking)\r\n# Check if this Item Spec has an item field populated\r\nif doc.item:\r\n    # Check if the item exists\r\n    if frappe.db.exists(\"Item\", doc.item):\r\n        # Update the Item with this Item Spec reference\r\n        frappe.db.set_value(\"Item\", doc.item, \"item_spec\", doc.name)\r\n\r\n# Find all Items that link to this Item Spec\r\nitems_with_this_spec = frappe.db.get_all('Item', \r\n    filters={'item_spec': doc.name}, \r\n    fields=['name'])\r\n\r\nfor item_record in items_with_this_spec:\r\n    item_doc = frappe.get_doc('Item', item_record.name)\r\n    \r\n    # Build the description\r\n    parts = []\r\n    \r\n    # Add Item fields to the description\r\n    if item_doc.item_name:\r\n        parts.append(f\"<b>{item_doc.item_name}</b>\")\r\n    if item_doc.item_group:\r\n        parts.append(f\"Item Group: {item_doc.item_group}\")\r\n    if item_doc.gst_hsn_code:\r\n        parts.append(f\"HSN/SAC: {item_doc.gst_hsn_code}\")\r\n    \r\n    # Add Item Spec fields that were moved from Item\r\n    if doc.material_id:\r\n        parts.append(f\"Material ID: {doc.material_id}\")\r\n    if doc.customer_sku:\r\n        parts.append(f\"Customer SKU: {doc.customer_sku}\")\r\n    if doc.vendor_product_id:\r\n        parts.append(f\"Vendor Product ID: {doc.vendor_product_id}\")\r\n    if doc.color:\r\n        parts.append(f\"Color: {doc.color}\")\r\n\r\n    # Add other Item Spec fields\r\n    if doc.gemstone:\r\n        parts.append(f\"Gemstone: {doc.gemstone}\")\r\n    if doc.form:\r\n        parts.append(f\"Form: {doc.form}\")\r\n    if doc.composition:\r\n        parts.append(f\"Composition: {doc.composition}\")\r\n    if doc.dimensions:\r\n        parts.append(f\"Dimensions: {doc.dimensions}\")\r\n    if doc.shape:\r\n        parts.append(f\"Shape: {doc.shape}\")\r\n    if doc.metal_group:\r\n        parts.append(f\"Metal Group: {doc.metal_group}\")\r\n    if doc.purity_multiplier:\r\n        parts.append(f\"Purity Multiplier: {doc.purity_multiplier}\")\r\n    if doc.clasp:\r\n        parts.append(f\"Clasp: {doc.clasp}\")\r\n    if doc.extender:\r\n        parts.append(f\"Extender: {doc.extender}\")\r\n    if doc.diamond_cut:\r\n        parts.append(f\"Diamond Cut: {doc.diamond_cut}\")\r\n    if doc.chain_length:\r\n        parts.append(f\"Chain Length: {doc.chain_length}\")\r\n    if doc.finding_type:\r\n        parts.append(f\"Finding Type: {doc.finding_type}\")\r\n    if doc.plating_group:\r\n        parts.append(f\"Plating Group: {doc.plating_group}\")\r\n    if doc.metal_purity_plating:\r\n        parts.append(f\"Metal Purity Plating: {doc.metal_purity_plating}\")\r\n    if doc.plating_thickness:\r\n        parts.append(f\"Plating Thickness: {doc.plating_thickness}\")\r\n    if doc.thickness_unit_of_measure:\r\n        parts.append(f\"Thickness UOM: {doc.thickness_unit_of_measure}\")\r\n    \r\n    # Update the Item description\r\n    new_description = \" | \".join(parts)\r\n    frappe.db.set_value('Item', item_doc.name, 'description', new_description)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.600415",
  "module": "espresso",
  "name": "Update BOM Item Description based on BOM Item Spec",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM Item Spec",
  "script": "# Server Script for BOM Item Spec\r\n# Document Type: BOM Item Spec\r\n# Event: After Save\r\n\r\n# 1. Update individual BOM Item description when BOM Item Spec is saved\r\nif doc.bom_item_id:\r\n    # Check if BOM Item exists\r\n    if frappe.db.exists(\"BOM Item\", doc.bom_item_id):\r\n        # Get the BOM Item\r\n        bom_item = frappe.get_doc('BOM Item', doc.bom_item_id)\r\n        \r\n        # Build description from BOM Item Spec fields\r\n        parts = []\r\n        \r\n        # Add basic item info\r\n        if bom_item.item_name:\r\n            parts.append(f\"Item Name: {bom_item.item_name}\")\r\n        if bom_item.item_group:\r\n            parts.append(f\"Item Group: {bom_item.item_group}\")\r\n        \r\n        # Add BOM Item Spec fields (using correct field names from form)\r\n        if doc.gemstone:\r\n            parts.append(f\"Gemstone: {doc.gemstone}\")\r\n        if doc.stone_treatment:\r\n            parts.append(f\"Treatment: {doc.stone_treatment}\")\r\n        if doc.grade:\r\n            parts.append(f\"Grade: {doc.grade}\")\r\n        if doc.cut:\r\n            parts.append(f\"Cut: {doc.cut}\")\r\n        if doc.setting_type:\r\n            parts.append(f\"Setting Type: {doc.setting_type}\")\r\n        if doc.merch_color_attribute:\r\n            parts.append(f\"Merch Color: {doc.merch_color_attribute}\")\r\n        if doc.stone_pieces:\r\n            parts.append(f\"Pieces: {doc.stone_pieces}\")\r\n        if doc.country_of_origin:\r\n            parts.append(f\"Country: {doc.country_of_origin}\")\r\n        if doc.sku_carat_weight:\r\n            parts.append(f\"SKU Weight: {doc.sku_carat_weight}\")\r\n        if doc.avg_carat_weight:\r\n            parts.append(f\"Avg Carat: {doc.avg_carat_weight}\")\r\n        if doc.sku_metal_weight:\r\n            parts.append(f\"Metal Weight: {doc.sku_metal_weight}\")\r\n        if doc.avg_metal_weight:\r\n            parts.append(f\"Avg Metal Weight: {doc.avg_metal_weight}\")\r\n        if doc.length:\r\n            parts.append(f\"Length: {doc.length}\")\r\n        if doc.weight_per_piece:\r\n            parts.append(f\"Weight/Piece: {doc.weight_per_piece}\")\r\n        if doc.metal_group:\r\n            parts.append(f\"Metal Group: {doc.metal_group}\")\r\n        if doc.finding_pieces:\r\n            parts.append(f\"Finding Pieces: {doc.finding_pieces}\")\r\n        if doc.total_weight:\r\n            parts.append(f\"Total Weight: {doc.total_weight}\")\r\n        if doc.length_uom:\r\n            parts.append(f\"Length UOM: {doc.length_uom}\")\r\n        \r\n        # Update the BOM Item description\r\n        new_description = \" | \".join(parts)\r\n        frappe.db.set_value('BOM Item', doc.bom_item_id, 'description', new_description)\r\n\r\n# 2. Auto-update main BOM description when BOM Item Spec is saved\r\nif doc.bom:\r\n    # Check if BOM exists\r\n    if frappe.db.exists(\"BOM\", doc.bom):\r\n        # Get all BOM Item Specs for this BOM with correct field names\r\n        all_specs = frappe.db.get_all('BOM Item Spec',\r\n            filters={'bom': doc.bom},\r\n            fields=['name', 'item', 'item_group', 'gemstone', 'stone_treatment', 'merch_color_attribute',\r\n                   'country_of_origin', 'cut', 'stone_pieces', 'setting_type', 'grade', 'avg_carat_weight',\r\n                   'sku_carat_weight', 'metal_group', 'sku_metal_weight', 'avg_metal_weight', \r\n                   'finding_pieces', 'length', 'weight_per_piece', 'length_uom', 'total_weight'])\r\n        \r\n        # Get the BOM document\r\n        bom_doc = frappe.get_doc('BOM', doc.bom)\r\n        \r\n        # Build the main BOM description\r\n        parts = []\r\n        \r\n        # Add main BOM info\r\n        if bom_doc.item_name:\r\n            parts.append(f\"<b>{bom_doc.item_name}</b>\")\r\n        if bom_doc.item_group:\r\n            parts.append(f\"Item Group: {bom_doc.item_group}\")\r\n        \r\n        # Group specs by type (following client script logic)\r\n        stone_specs = []\r\n        metal_specs = []\r\n        finding_specs = []\r\n        other_specs = []\r\n        \r\n        for spec in all_specs:\r\n            if spec.gemstone or spec.stone_pieces or spec.avg_carat_weight:\r\n                stone_specs.append(spec)\r\n            elif spec.metal_group or spec.sku_metal_weight or spec.avg_metal_weight:\r\n                metal_specs.append(spec)\r\n            elif spec.finding_pieces or spec.length or spec.weight_per_piece:\r\n                finding_specs.append(spec)\r\n            else:\r\n                other_specs.append(spec)\r\n        \r\n        # Add stone specifications\r\n        if stone_specs:\r\n            stone_descriptions = []\r\n            for spec in stone_specs:\r\n                stone_parts = []\r\n                if spec.gemstone:\r\n                    stone_parts.append(spec.gemstone)\r\n                if spec.cut:\r\n                    stone_parts.append(spec.cut)\r\n                if spec.merch_color_attribute:\r\n                    stone_parts.append(spec.merch_color_attribute)\r\n                if spec.grade:\r\n                    stone_parts.append(f\"Grade {spec.grade}\")\r\n                if spec.stone_pieces:\r\n                    stone_parts.append(f\"{spec.stone_pieces} pcs\")\r\n                if spec.avg_carat_weight:\r\n                    stone_parts.append(f\"{spec.avg_carat_weight}ct\")\r\n                if spec.country_of_origin:\r\n                    stone_parts.append(f\"({spec.country_of_origin})\")\r\n                \r\n                if stone_parts:\r\n                    stone_descriptions.append(' '.join(stone_parts))\r\n            \r\n            if stone_descriptions:\r\n                parts.append(f\"Stones: {', '.join(stone_descriptions)}\")\r\n        \r\n        # Add metal specifications\r\n        if metal_specs:\r\n            metal_descriptions = []\r\n            for spec in metal_specs:\r\n                metal_parts = []\r\n                if spec.metal_group:\r\n                    metal_parts.append(spec.metal_group)\r\n                if spec.avg_metal_weight:\r\n                    metal_parts.append(f\"{spec.avg_metal_weight}g\")\r\n                elif spec.sku_metal_weight:\r\n                    metal_parts.append(f\"{spec.sku_metal_weight}g\")\r\n                \r\n                if metal_parts:\r\n                    metal_descriptions.append(' '.join(metal_parts))\r\n            \r\n            if metal_descriptions:\r\n                parts.append(f\"Metal: {', '.join(metal_descriptions)}\")\r\n        \r\n        # Add finding/chain specifications\r\n        if finding_specs:\r\n            finding_descriptions = []\r\n            for spec in finding_specs:\r\n                finding_parts = []\r\n                if spec.finding_pieces:\r\n                    finding_parts.append(f\"{spec.finding_pieces} findings\")\r\n                if spec.length and spec.length_uom:\r\n                    finding_parts.append(f\"{spec.length}{spec.length_uom}\")\r\n                elif spec.length:\r\n                    finding_parts.append(f\"{spec.length} length\")\r\n                if spec.weight_per_piece:\r\n                    finding_parts.append(f\"{spec.weight_per_piece}g/pc\")\r\n                if spec.total_weight:\r\n                    finding_parts.append(f\"{spec.total_weight}g total\")\r\n                \r\n                if finding_parts:\r\n                    finding_descriptions.append(' '.join(finding_parts))\r\n            \r\n            if finding_descriptions:\r\n                parts.append(f\"Findings: {', '.join(finding_descriptions)}\")\r\n        \r\n        # Add other components\r\n        if other_specs:\r\n            other_descriptions = []\r\n            for spec in other_specs:\r\n                if spec.item:\r\n                    other_descriptions.append(spec.item)\r\n            \r\n            if other_descriptions:\r\n                parts.append(f\"Components: {', '.join(other_descriptions)}\")\r\n        \r\n        # Add setting type if available\r\n        setting_types = [spec.setting_type for spec in all_specs if spec.setting_type]\r\n        if setting_types:\r\n            unique_settings = list(set(setting_types))\r\n            parts.append(f\"Setting: {', '.join(unique_settings)}\")\r\n        \r\n        # Add stone treatment if available\r\n        treatments = [spec.stone_treatment for spec in all_specs if spec.stone_treatment]\r\n        if treatments:\r\n            unique_treatments = list(set(treatments))\r\n            parts.append(f\"Treatment: {', '.join(unique_treatments)}\")\r\n        \r\n        # Update the main BOM description\r\n        new_description = \" | \".join(parts)\r\n        frappe.db.set_value('BOM', doc.bom, 'description', new_description)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Delete",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.511043",
  "module": "espresso",
  "name": "SO Cancel",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "so_name = doc.name\r\n\r\nworksheets = frappe.get_all(\r\n    \"Customer Worksheet\",\r\n    filters={},\r\n    fields=[\"name\"]\r\n)\r\n\r\nfor ws in worksheets:\r\n    ws_doc = frappe.get_doc(\"Customer Worksheet\", ws.name)\r\n    updated = False\r\n\r\n    # Unlink from customer_worksheet_items\r\n    for item in ws_doc.customer_worksheet_items:\r\n        if item.sales_order == so_name:\r\n            item.sales_order = \"\"\r\n            updated = True\r\n\r\n\r\n    if updated:\r\n        ws_doc.save(ignore_permissions=True)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "get_default_bom",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.412861",
  "module": "espresso",
  "name": "Default first BOM",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "BOM",
  "script": "data = frappe.db.sql(\"\"\"\n    SELECT name, item\n        FROM `tabBOM`\n        WHERE is_default = 1 AND docstatus IN (0, 1)\n        ORDER BY creation DESC\n        LIMIT 1\n\"\"\")\nfrappe.msgprint(data)\nfrappe.response['message'] = data\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_latest_item_code",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.448117",
  "module": "espresso",
  "name": "item code generate",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "def get_latest_item_code(item_group):\r\n    prefix = item_group.replace(\" \", \"_\")\r\n    result = frappe.db.sql(f\"\"\"\r\n        SELECT name FROM `tabItem`\r\n        WHERE name LIKE %s\r\n        ORDER BY creation DESC\r\n        LIMIT 1\r\n    \"\"\", (f\"{prefix}-%\",), as_dict=True)\r\n\r\n    return result[0].name if result else None\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_item_related_info",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.220252",
  "module": "espresso",
  "name": "Customer PO Manager details",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "item_code = frappe.form_dict.get(\"item_code\")\r\n\r\n# Get Sales Order info (UPDATED to include qty, rate, amount)\r\nsales_order = frappe.db.sql(\"\"\"\r\n    SELECT \r\n        soi.parent AS sales_order,\r\n        so.po_no,\r\n        so.po_date,\r\n        so.delivery_date, \r\n        so.status,\r\n        soi.qty, \r\n        soi.rate, \r\n        soi.amount,\r\n        soi.item_group,\r\n        so.total_qty,\r\n        (\r\n            SELECT COUNT(*) \r\n            FROM `tabSales Order Item` soi2\r\n            WHERE soi2.parent = soi.parent \r\n              AND LOWER(soi2.item_code) = LOWER(%s)\r\n        ) AS size_count\r\n    FROM `tabSales Order Item` soi\r\n    INNER JOIN `tabSales Order` so ON soi.parent = so.name\r\n    WHERE LOWER(soi.item_code) = LOWER(%s) AND so.docstatus = 0\r\n    ORDER BY soi.creation DESC\r\n    LIMIT 1\r\n\"\"\", (item_code, item_code), as_dict=True)\r\n\r\n\r\n# Get Purchase Order info\r\npurchase_order = frappe.db.sql(\"\"\"\r\n    SELECT poi.parent AS purchase_order, po.status AS purchase_order_status\r\n    FROM `tabPurchase Order Item` poi\r\n    INNER JOIN `tabPurchase Order` po ON poi.parent = po.name\r\n    WHERE LOWER(poi.item_code) = LOWER(%s) AND po.docstatus = 0\r\n    ORDER BY poi.creation DESC\r\n    LIMIT 1\r\n\"\"\", (item_code,), as_dict=True)\r\n\r\n# Get BOM info\r\nbom = frappe.db.sql(\"\"\"\r\n    SELECT name, docstatus\r\n    FROM `tabBOM`\r\n    WHERE item = %s\r\n    ORDER BY creation DESC\r\n    LIMIT 1\r\n\"\"\", (item_code,), as_dict=True)\r\n\r\n# Build response\r\nfrappe.response[\"message\"] = {\r\n    \"sales_order\": sales_order[0].sales_order if sales_order else \"\",\r\n    \"delivery_date\": sales_order[0].delivery_date if sales_order else \"\",\r\n    \"sales_order_status\": sales_order[0].status if sales_order else \"\",\r\n    \"qty\": sales_order[0].qty if sales_order else 0,\r\n    \"rate\": sales_order[0].rate if sales_order else 0,\r\n    \"amount\": sales_order[0].amount if sales_order else 0,\r\n    \"item_group\": sales_order[0].item_group if sales_order else \"\",\r\n    \"sales_order_total_qty\": sales_order[0].total_qty if sales_order else 0,\r\n    \"size_count\": sales_order[0].size_count if sales_order else 0,\r\n    \"purchase_order\": purchase_order[0].purchase_order if purchase_order else \"\",\r\n    \"purchase_order_status\": purchase_order[0].purchase_order_status if purchase_order else \"\",\r\n    \"bom\": bom[0].name if bom else \"\",\r\n    \"bom_status\": (\r\n        \"Draft\" if bom and bom[0].docstatus == 0 else\r\n        \"Submitted\" if bom and bom[0].docstatus == 1 else\r\n        \"\"\r\n    ),\r\n    \"po_no\": sales_order[0].po_no if sales_order else \"\",\r\n    \"po_date\": sales_order[0].po_date if sales_order else \"\"\r\n}\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_items_with_draft_sales_order",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.464449",
  "module": "espresso",
  "name": "Vendor Items In PO Manager",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "frappe.response[\"message\"] = frappe.db.sql(\"\"\"\r\n    SELECT i.name, i.item_name, i.item_group,\r\n        i.custom_vendor_product_id, i.custom_customer_sku, i.description\r\n    FROM `tabItem` i\r\n    WHERE EXISTS (\r\n        SELECT 1 FROM `tabSales Order Item` soi\r\n        INNER JOIN `tabSales Order` so ON soi.parent = so.name\r\n        WHERE soi.item_code = i.name\r\n        AND so.docstatus = 0\r\n    )\r\n    ORDER BY i.modified DESC\r\n\"\"\", as_dict=True)\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "set_delivery_date_in_so",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.492209",
  "module": "espresso",
  "name": "Sales order delivery date",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "item_rows = frappe.get_all(\r\n    \"Sales Order Item\",\r\n    filters={\"parent\": frappe.form_dict.get(\"sales_order\")},\r\n    fields=[\"name\"]\r\n)\r\nif item_rows:\r\n    for row in item_rows:\r\n        frappe.db.set_value(\"Sales Order Item\", row.name, \"delivery_date\", frappe.form_dict.get(\"delivery_date\"))\r\nfrappe.response[\"message\"] = \"Delivery date updated successfully.\"\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.283533",
  "module": "espresso",
  "name": "Validate BOMs on SO Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "\r\nfor row in doc.items:\r\n    if row.bom_no:\r\n        bom_status = frappe.db.get_value(\"BOM\", row.bom_no, \"docstatus\")\r\n\r\n        if bom_status != 1:\r\n            frappe.throw(\r\n                f\"BOM {row.bom_no} for item {row.item_code or ''} is not Submitted. Please submit it before submitting the Sales Order.\"\r\n            )\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.257087",
  "module": "espresso",
  "name": "SO submit in PO",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "\r\n# for row in doc.items:\r\n#     if row.sales_order:\r\n#         so_status = frappe.db.get_value(\"Sales Order\", row.sales_order, \"docstatus\")\r\n\r\n#         if so_status!= 1:\r\n#             frappe.throw(\r\n#                 f\"Sales Order {row.sales_order} for item {row.item_code or ''} is not Submitted. Please submit it before submitting the Sales Order.\"\r\n#             )\r\n\r\n\r\nfor po_row in doc.items:\r\n    if po_row.sales_order:\r\n        # Ensure Sales Order is submitted\r\n        so_docstatus = frappe.db.get_value(\"Sales Order\", po_row.sales_order, \"docstatus\")\r\n        if so_docstatus != 1:\r\n            frappe.throw(\r\n                f\"Sales Order {po_row.sales_order} linked to item {po_row.item_code or ''} is not Submitted.\"\r\n            )\r\n\r\n        so_items = frappe.get_all(\r\n            \"Sales Order Item\",\r\n            filters={\"parent\": po_row.sales_order},\r\n            fields=[\"item_code\", \"bom_no\"]\r\n        )\r\n\r\n        for so_row in so_items:\r\n            if so_row.bom_no:\r\n                bom_status = frappe.db.get_value(\"BOM\", so_row.bom_no, \"docstatus\")\r\n                if bom_status != 1:\r\n                    frappe.throw(\r\n                        f\"BOM {so_row.bom_no} linked in Sales Order {po_row.sales_order} for item {so_row.item_code} is not Submitted. Please submit it before submitting the Purchase Order.\"\r\n                    )\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "submit_documents",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-25 11:52:49.193380",
  "module": "espresso",
  "name": "PO Header Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "docs = frappe.form_dict.get(\"doc_list\")\nsubmitted = json.loads(docs)\n\nfor doc in submitted:\n    doctype = doc[\"doctype\"]\n    name = doc[\"name\"]\n    submit_to_doc = frappe.get_doc(doctype, name)\n    if submit_to_doc.docstatus == 0:\n        submit_to_doc.submit()\n",
  "script_type": "API"
 }
]